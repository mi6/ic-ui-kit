(self.webpackChunk_ukic_web_components=self.webpackChunk_ukic_web_components||[]).push([[4877],{"./src/components/ic-text-field/ic-text-field.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const readme_namespaceObject='# ic-textfield\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property               | Attribute                | Description                                                                                                                                                                                                         | Type                                                                                  | Default                                                   |\n| ---------------------- | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | --------------------------------------------------------- |\n| `autocapitalize`       | `autocapitalize`         | The automatic capitalisation of the text value as it is entered/edited by the user. Available options: "off", "none", "on", "sentences", "words", "characters".                                                     | `string`                                                                              | `"off"`                                                   |\n| `autocomplete`         | `autocomplete`           | The state of autocompletion the browser can apply on the text value.                                                                                                                                                | `IcAutocompleteTypes \\| undefined`                                                    | `"off"`                                                   |\n| `autocorrect`          | `autocorrect`            | The state of autocorrection the browser can apply when the user is entering/editing the text value.                                                                                                                 | `"off" \\| "on" \\| undefined`                                                          | `"off"`                                                   |\n| `autofocus`            | `autofocus`              | If `true`, the form control will have input focus when the page loads.                                                                                                                                              | `boolean`                                                                             | `false`                                                   |\n| `debounce`             | `debounce`               | The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.                                                                                                                  | `number`                                                                              | `0`                                                       |\n| `disabled`             | `disabled`               | If `true`, the disabled state will be set.                                                                                                                                                                          | `boolean`                                                                             | `false`                                                   |\n| `fullWidth`            | `full-width`             | Specify whether the text field fills the full width of the container. If `true`, this overrides the --input-width CSS variable.                                                                                     | `boolean`                                                                             | `false`                                                   |\n| `helperText`           | `helper-text`            | The helper text that will be displayed for additional field guidance.                                                                                                                                               | `string`                                                                              | `""`                                                      |\n| `hideCharCount`        | `hide-char-count`        | If `true`, the character count which is displayed when `maxCharacters` is set will be visually hidden.                                                                                                              | `boolean`                                                                             | `false`                                                   |\n| `hideLabel`            | `hide-label`             | If `true`, the label will be hidden and the required label value will be applied as an aria-label.                                                                                                                  | `boolean`                                                                             | `false`                                                   |\n| `inputId`              | `input-id`               | The ID for the input.                                                                                                                                                                                               | `string`                                                                              | `` `ic-text-field-input-${inputIds++}` ``                 |\n| `inputmode`            | `inputmode`              | A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.                                                    | `"decimal" \\| "email" \\| "none" \\| "numeric" \\| "search" \\| "tel" \\| "text" \\| "url"` | `"text"`                                                  |\n| `label` _(required)_   | `label`                  | The label for the input.                                                                                                                                                                                            | `string`                                                                              | `undefined`                                               |\n| `max`                  | `max`                    | The maximum number that can be accepted as a value, when `type` is `number` and `rows` is `1`. (NOTE: Ensure to include visual indication of max value in `helperText` or `label`)                                  | `number \\| string \\| undefined`                                                       | `undefined`                                               |\n| `maxCharacters`        | `max-characters`         | The count of characters in the field. Will display a warning if the bound is reached. (NOTE: If the value of the text field has been set using the `value` prop, it will be truncated to this number of characters) | `number`                                                                              | `0`                                                       |\n| `maxCharactersMessage` | `max-characters-message` | The text to display as the warning message when the maximum number of characters (the `maxCharacters` prop value) is reached.                                                                                       | `string`                                                                              | `` `Maximum input is ${this.maxCharacters} characters` `` |\n| `maxMessage`           | `max-message`            | The text to display as the error message when the maximum value (the `max` prop value) has been exceeded.                                                                                                           | `string`                                                                              | `` `Maximum value of ${this.max} exceeded` ``             |\n| `min`                  | `min`                    | The minimum number that can be accepted as a value, when `type` is `number` and `rows` is `1`. (NOTE: Ensure to include visual indication of min value in `helperText` or `label`)                                  | `number \\| string \\| undefined`                                                       | `undefined`                                               |\n| `minCharacters`        | `min-characters`         | The minimum number of characters that can be entered in the field.                                                                                                                                                  | `number`                                                                              | `0`                                                       |\n| `minCharactersMessage` | `min-characters-message` | The text to display as the error message when the minimum number of characters (the `minCharacters` prop value) has not been met.                                                                                   | `string`                                                                              | `` `Minimum input is ${this.minCharacters} characters` `` |\n| `minMessage`           | `min-message`            | The text to display as the error message when the minimum value (the `min` prop value) has not been met.                                                                                                            | `string`                                                                              | `` `Minimum value of ${this.min} not met` ``              |\n| `name`                 | `name`                   | The name of the control, which is submitted with the form data.                                                                                                                                                     | `string`                                                                              | `this.inputId`                                            |\n| `placeholder`          | `placeholder`            | The placeholder value to be displayed.                                                                                                                                                                              | `string`                                                                              | `""`                                                      |\n| `readonly`             | `readonly`               | If `true`, the read only state will be set.                                                                                                                                                                         | `boolean`                                                                             | `false`                                                   |\n| `required`             | `required`               | If `true`, the input will require a value.                                                                                                                                                                          | `boolean`                                                                             | `false`                                                   |\n| `resize`               | `resize`                 | If `true`, the multiline text area will be resizeable.                                                                                                                                                              | `boolean`                                                                             | `false`                                                   |\n| `rows`                 | `rows`                   | The number of rows to transform the text field into a text area with a specific height.                                                                                                                             | `number`                                                                              | `1`                                                       |\n| `size`                 | `size`                   | The size of the text field component.                                                                                                                                                                               | `"medium" \\| "small"`                                                                 | `"medium"`                                                |\n| `spellcheck`           | `spellcheck`             | If `true`, the value of the text field will have its spelling and grammar checked.                                                                                                                                  | `boolean`                                                                             | `false`                                                   |\n| `theme`                | `theme`                  | Sets the theme color to the dark or light theme color. "inherit" will set the color based on the system settings or ic-theme component.                                                                             | `"dark" \\| "inherit" \\| "light"`                                                      | `"inherit"`                                               |\n| `type`                 | `type`                   | The type of control to display. The default type is text.                                                                                                                                                           | `"email" \\| "number" \\| "password" \\| "search" \\| "tel" \\| "text" \\| "url"`           | `"text"`                                                  |\n| `validationInline`     | `validation-inline`      | If `true`, the icon in input control will be displayed - only applies when validationStatus =\'success\'.                                                                                                             | `boolean`                                                                             | `false`                                                   |\n| `validationStatus`     | `validation-status`      | The validation state - e.g. \'error\' \\| \'warning\' \\| \'success\'.                                                                                                                                                      | `"" \\| "error" \\| "success" \\| "warning"`                                             | `""`                                                      |\n| `validationText`       | `validation-text`        | The text to display as the validation message.                                                                                                                                                                      | `string`                                                                              | `""`                                                      |\n| `value`                | `value`                  | The value of the text field.                                                                                                                                                                                        | `string`                                                                              | `""`                                                      |\n\n\n## Events\n\n| Event       | Description                                    | Type                                     |\n| ----------- | ---------------------------------------------- | ---------------------------------------- |\n| `icBlur`    | Emitted when input loses focus.                | `CustomEvent<IcValueEventDetail>`        |\n| `icChange`  | Emitted when the value has changed.            | `CustomEvent<IcValueEventDetail>`        |\n| `icFocus`   | Emitted when input gains focus.                | `CustomEvent<IcValueEventDetail>`        |\n| `icInput`   | Emitted when a keyboard input occurred.        | `CustomEvent<IcValueEventDetail>`        |\n| `icKeydown` | Emitted when a keydown event occurred.         | `CustomEvent<{ event: KeyboardEvent; }>` |\n| `icScroll`  | Emitted when the textarea variant is scrolled. | `CustomEvent<any>`                       |\n\n\n## Methods\n\n### `setFocus() => Promise<void>`\n\nSets focus on the native `input`.\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n\n## Slots\n\n| Slot     | Description                                           |\n| -------- | ----------------------------------------------------- |\n| `"icon"` | Content will be placed to the left of the text input. |\n\n\n## CSS Custom Properties\n\n| Name            | Description              |\n| --------------- | ------------------------ |\n| `--input-width` | Width of the input field |\n\n\n## Dependencies\n\n### Depends on\n\n- [ic-input-container](../ic-input-container)\n- [ic-input-label](../ic-input-label)\n- [ic-input-component-container](../ic-input-component-container)\n- [ic-input-validation](../ic-input-validation)\n- [ic-typography](../ic-typography)\n\n### Graph\n```mermaid\ngraph TD;\n  ic-text-field --\x3e ic-input-container\n  ic-text-field --\x3e ic-input-label\n  ic-text-field --\x3e ic-input-component-container\n  ic-text-field --\x3e ic-input-validation\n  ic-text-field --\x3e ic-typography\n  ic-input-label --\x3e ic-typography\n  ic-input-validation --\x3e ic-typography\n  style ic-text-field fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n';var ic_text_field_stories=__webpack_require__("./src/components/ic-text-field/ic-text-field.stories.js");function _createMdxContent(props){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.W8,{of:ic_text_field_stories}),"\n",(0,jsx_runtime.jsx)(dist.oz,{children:readme_namespaceObject}),"\n",(0,jsx_runtime.jsx)(dist.om,{})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.R)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent()}},"./node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{R:()=>useMDXComponents,x:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}}),[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./node_modules/@storybook/blocks/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/blocks/dist sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/core/dist/components sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/core/dist/components sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/core/dist/theming sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/core/dist/theming sync recursive",module.exports=webpackEmptyContext}}]);