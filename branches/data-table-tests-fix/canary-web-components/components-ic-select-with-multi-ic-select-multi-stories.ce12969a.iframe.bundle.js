"use strict";(self.webpackChunk_ukic_canary_web_components=self.webpackChunk_ukic_canary_web_components||[]).push([[5988],{"./src/components/ic-select-with-multi/ic-select-multi.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefaultExample:()=>DefaultExample,DefaultValueExample:()=>DefaultValueExample,DisabledExample:()=>DisabledExample,DisabledOptionsExample:()=>DisabledOptionsExample,GroupsExample:()=>GroupsExample,HelperTextExample:()=>HelperTextExample,HiddenLabelExample:()=>HiddenLabelExample,InFormExample:()=>InFormExample,LoadingWithErrorExample:()=>LoadingWithErrorExample,ReadOnlyExample:()=>ReadOnlyExample,RecommendedExample:()=>RecommendedExample,RequiredExample:()=>RequiredExample,SizesExample:()=>SizesExample,ValidationExample:()=>ValidationExample,WithClearButtonExample:()=>WithClearButtonExample,WithDescriptionsExample:()=>WithDescriptionsExample,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ic_select_multi_stories});const OPTIONS=[{label:"Cappuccino",value:"Cap"},{label:"Latte",value:"Lat"},{label:"Americano",value:"Ame"},{label:"Filter",value:"Fil"},{label:"Flat white",value:"Fla"},{label:"Mocha",value:"Moc"},{label:"Macchiato",value:"Mac"}],OPTIONS_WITH_DESCRIPTIONS=[{label:"Cappuccino",value:"Cap",description:"Coffee frothed up with pressurised steam"},{label:"Latte",value:"Lat",description:"A milkier coffee than a cappuccino"},{label:"Americano",value:"Ame",description:"Espresso coffee diluted with hot water"},{label:"Filter",value:"Fil",description:"Coffee filtered using paper or a mesh"},{label:"Flat white",value:"Fla",description:"Coffee without froth made with espresso and hot steamed milk"},{label:"Mocha",value:"Moc",description:"A mixture of coffee and chocolate"},{label:"Macchiato",value:"Mac",description:"Espresso coffee with a dash of frothy steamed milk"}],OPTIONS_WITH_DISABLED=[{label:"Cappuccino",value:"Cap"},{label:"Latte",value:"Lat",disabled:!0},{label:"Americano",value:"Ame"},{label:"Filter",value:"Fil",disabled:!0},{label:"Flat white",value:"Fla",disabled:!0},{label:"Mocha",value:"Moc"},{label:"Macchiato",value:"Mac"}],GROUPED_OPTIONS=[{label:"Fancy",children:[{label:"Cappuccino",value:"Cap"},{label:"Flat white",value:"Flat"}]},{label:"Boring",children:[{label:"Filter",value:"Fil"},{label:"Latte",value:"Lat"}]}],OPTIONS_WITH_RECOMMENDED=[{label:"Cappuccino",value:"Cap"},{label:"Latte",value:"Lat"},{label:"Americano",value:"Ame",recommended:!0},{label:"Filter",value:"Fil"},{label:"Flat white",value:"Fla",recommended:!0},{label:"Mocha",value:"Moc"},{label:"Macchiato",value:"Mac"}],createMultiSelectElement=(options=OPTIONS)=>{const multiSelect=document.createElement("ic-select-with-multi");return multiSelect.setAttribute("multiple","true"),multiSelect.setAttribute("label","What are your favourite types of coffee?"),multiSelect.options=options,multiSelect.addEventListener("icChange",(function(event){console.log("icChange: "+event.detail.value)})),multiSelect},createContainer=(elementArray,height="430px")=>{const container=document.createElement("div");return container.style.height=height,elementArray.forEach((element=>container.appendChild(element))),container},ic_select_multi_stories={title:"Web Components/Multi-Select",component:"ic-select-with-multi",parameters:{componentAPI:{data:'# ic-select\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property                      | Attribute                        | Description                                                                                                                                                                                                                                                                | Type                                      | Default              |\n| ----------------------------- | -------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------- | -------------------- |\n| `charactersUntilSuggestions`  | `characters-until-suggestions`   | **[DEPRECATED]** This prop should not be used anymore.                                                                                                                                                                                                                     | `number`                                  | `0`                  |\n| `debounce`                    | `debounce`                       | The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.                                                                                                                                                                         | `number`                                  | `0`                  |\n| `disableFilter`               | `disable-filter`                 | If `true`, the built in filtering will be disabled for a searchable variant. For example, if options will already be filtered from external source.                                                                                                                        | `boolean`                                 | `false`              |\n| `disabled`                    | `disabled`                       | If `true`, the disabled state will be set.                                                                                                                                                                                                                                 | `boolean`                                 | `false`              |\n| `emptyOptionListText`         | `empty-option-list-text`         | The text displayed when there are no options in the option list.                                                                                                                                                                                                           | `string`                                  | `"No results found"` |\n| `form`                        | `form`                           | The <form> element to associate the select with.                                                                                                                                                                                                                           | `string`                                  | `undefined`          |\n| `formaction`                  | `formaction`                     | The URL that processes the information submitted by the select. It overrides the action attribute of the select\'s form owner. Does nothing if there is no form owner. This prop should only be used with searchable select and will only be applied if searchable is true. | `string`                                  | `undefined`          |\n| `formenctype`                 | `formenctype`                    | The way the submitted form data is encoded. This prop should only be used with searchable select and will only be applied if searchable is true.                                                                                                                           | `string`                                  | `undefined`          |\n| `formmethod`                  | `formmethod`                     | The HTTP method used to submit the form. This prop should only be used with searchable select and will only be applied if searchable is true.                                                                                                                              | `string`                                  | `undefined`          |\n| `formnovalidate`              | `formnovalidate`                 | If `true`, the form will not be validated when submitted. This prop should only be used with searchable select and will only be applied if searchable is true.                                                                                                             | `boolean`                                 | `undefined`          |\n| `formtarget`                  | `formtarget`                     | The place to display the response from submitting the form. It overrides the target attribute of the select\'s form owner. This prop should only be used with searchable select and will only be applied if searchable is true.                                             | `string`                                  | `undefined`          |\n| `fullWidth`                   | `full-width`                     | If `true`, the select element will fill the width of the container. This prop should only be used with searchable select and will only be applied if searchable is true.                                                                                                   | `boolean`                                 | `false`              |\n| `helperText`                  | `helper-text`                    | The helper text that will be displayed for additional field guidance.                                                                                                                                                                                                      | `string`                                  | `""`                 |\n| `hideLabel`                   | `hide-label`                     | If `true`, the label will be hidden and the required label value will be applied as an aria-label.                                                                                                                                                                         | `boolean`                                 | `false`              |\n| `includeDescriptionsInSearch` | `include-descriptions-in-search` | If `true`, descriptions of options will be included when filtering options in a searchable select. Only applies to built in filtering.                                                                                                                                     | `boolean`                                 | `false`              |\n| `includeGroupTitlesInSearch`  | `include-group-titles-in-search` | If `true`, group titles of grouped options will be included when filtering options in a searchable select. Only applies to built in filtering.                                                                                                                             | `boolean`                                 | `false`              |\n| `label` _(required)_          | `label`                          | The label for the select.                                                                                                                                                                                                                                                  | `string`                                  | `undefined`          |\n| `loading`                     | `loading`                        | If `true`, the loading state will be triggered when fetching options asynchronously.                                                                                                                                                                                       | `boolean`                                 | `false`              |\n| `loadingErrorLabel`           | `loading-error-label`            | The message displayed when external loading times out.                                                                                                                                                                                                                     | `string`                                  | `"Loading Error"`    |\n| `loadingLabel`                | `loading-label`                  | The message displayed whilst the options are being loaded externally.                                                                                                                                                                                                      | `string`                                  | `"Loading..."`       |\n| `multiple`                    | `multiple`                       | If `true`, multiple options can be selected.                                                                                                                                                                                                                               | `boolean`                                 | `false`              |\n| `name`                        | `name`                           | The name of the control, which is submitted with the form data.                                                                                                                                                                                                            | `string`                                  | `this.inputId`       |\n| `options`                     | --                               | The possible selection options.                                                                                                                                                                                                                                            | `IcMenuOption[]`                          | `[]`                 |\n| `placeholder`                 | `placeholder`                    | The placeholder value to be displayed.                                                                                                                                                                                                                                     | `string`                                  | `"Select an option"` |\n| `readonly`                    | `readonly`                       | If `true`, the readonly state will be set.                                                                                                                                                                                                                                 | `boolean`                                 | `false`              |\n| `required`                    | `required`                       | If `true`, the select will require a value.                                                                                                                                                                                                                                | `boolean`                                 | `false`              |\n| `searchMatchPosition`         | `search-match-position`          | Whether the search string of the searchable select should match the start of or anywhere in the options. Only applies to built in filtering.                                                                                                                               | `"anywhere" \\| "start"`                   | `"anywhere"`         |\n| `searchable`                  | `searchable`                     | If `true`, a searchable variant of the select will be displayed which can be typed in to filter options. This functionality is only available on the single-select variant of the select component.                                                                        | `boolean`                                 | `false`              |\n| `selectOnEnter`               | `select-on-enter`                | If `true`, the icOptionSelect event will be fired on enter instead of ArrowUp and ArrowDown.                                                                                                                                                                               | `boolean`                                 | `false`              |\n| `showClearButton`             | `show-clear-button`              | If `true`, a button which clears the select input when clicked will be displayed. The button will always appear on the searchable select.                                                                                                                                  | `boolean`                                 | `false`              |\n| `size`                        | `size`                           | The size of the select.                                                                                                                                                                                                                                                    | `"default" \\| "large" \\| "small"`         | `"default"`          |\n| `small`                       | `small`                          | **[DEPRECATED]** This prop should not be used anymore. Set prop `size` to "small" instead.                                                                                                                                                                                 | `boolean`                                 | `false`              |\n| `timeout`                     | `timeout`                        | If using external filtering, set a timeout for when loading takes too long.                                                                                                                                                                                                | `number`                                  | `undefined`          |\n| `validationStatus`            | `validation-status`              | The validation status - e.g. \'error\' \\| \'warning\' \\| \'success\'.                                                                                                                                                                                                            | `"" \\| "error" \\| "success" \\| "warning"` | `""`                 |\n| `validationText`              | `validation-text`                | The text to display as the validation message.                                                                                                                                                                                                                             | `string`                                  | `""`                 |\n| `value`                       | `value`                          | The value of the select, reflected by the value of the currently selected option. For the searchable variant, the value is also reflected by the user input. For the multi-select variant, the value must be an array of option values.                                    | `string \\| string[]`                      | `undefined`          |\n\n\n## Events\n\n| Event              | Description                                                                                                                        | Type                                     |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------- |\n| `icBlur`           | Emitted when the select loses focus.                                                                                               | `CustomEvent<void>`                      |\n| `icChange`         | Emitted when the value changes.                                                                                                    | `CustomEvent<IcValueEventDetail>`        |\n| `icClear`          | Emitted when the clear button is clicked.                                                                                          | `CustomEvent<void>`                      |\n| `icFocus`          | Emitted when the select gains focus.                                                                                               | `CustomEvent<void>`                      |\n| `icInput`          | Emitted when a keyboard input occurred.                                                                                            | `CustomEvent<IcValueEventDetail>`        |\n| `icOptionDeselect` | Emitted when `multiple` is `true` and an option is deselected.                                                                     | `CustomEvent<IcOptionSelectEventDetail>` |\n| `icOptionSelect`   | Emitted when an option is selected. Selecting an option will also trigger an `icChange/onIcChange` due to the value being updated. | `CustomEvent<IcOptionSelectEventDetail>` |\n| `icRetryLoad`      | Emitted when the \'retry loading\' button is clicked for a searchable variant.                                                       | `CustomEvent<IcValueEventDetail>`        |\n\n\n## Methods\n\n### `setFocus() => Promise<void>`\n\nSets focus on the input box.\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n\n## CSS Custom Properties\n\n| Name                | Description                |\n| ------------------- | -------------------------- |\n| `--ic-z-index-menu` | z-index of select menu     |\n| `--input-width`     | Width of the input field   |\n| `--menu-width`      | Width of the dropdown menu |\n\n\n## Dependencies\n\n### Depends on\n\n- ic-input-container\n- ic-input-label\n- ic-input-component-container\n- ic-typography\n- ic-button\n- [ic-menu-with-multi](../ic-menu-with-multi)\n- ic-input-validation\n\n### Graph\n```mermaid\ngraph TD;\n  ic-select-with-multi --\x3e ic-input-container\n  ic-select-with-multi --\x3e ic-input-label\n  ic-select-with-multi --\x3e ic-input-component-container\n  ic-select-with-multi --\x3e ic-typography\n  ic-select-with-multi --\x3e ic-button\n  ic-select-with-multi --\x3e ic-menu-with-multi\n  ic-select-with-multi --\x3e ic-input-validation\n  ic-input-label --\x3e ic-typography\n  ic-button --\x3e ic-loading-indicator\n  ic-button --\x3e ic-tooltip\n  ic-loading-indicator --\x3e ic-typography\n  ic-tooltip --\x3e ic-typography\n  ic-menu-with-multi --\x3e ic-loading-indicator\n  ic-menu-with-multi --\x3e ic-typography\n  ic-menu-with-multi --\x3e ic-button\n  ic-input-validation --\x3e ic-typography\n  style ic-select-with-multi fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n'}}},DefaultExample={render:()=>(()=>{const multiSelect=createMultiSelectElement();return multiSelect.addEventListener("icOptionSelect",(function(event){console.log("icOptionSelect: "+event.detail.value)})),multiSelect.addEventListener("icOptionDeselect",(function(event){console.log("icOptionDeselect: "+event.detail.value)})),createContainer([multiSelect])})(),name:"Default"},DefaultValueExample={render:()=>(()=>{const multiSelect=createMultiSelectElement();return multiSelect.value=["Ame","Fil","Moc"],createContainer([multiSelect])})(),name:"Default Value"},WithClearButtonExample={render:()=>(()=>{const multiSelect=createMultiSelectElement();return multiSelect.setAttribute("show-clear-button","true"),createContainer([multiSelect])})(),name:"With Clear Button"},WithDescriptionsExample={render:()=>(()=>{const multiSelect=createMultiSelectElement(OPTIONS_WITH_DESCRIPTIONS);return createContainer([multiSelect],"470px")})(),name:"With Descriptions"},HelperTextExample={render:()=>(()=>{const multiSelect=createMultiSelectElement();return multiSelect.setAttribute("helper-text","Select some options from the list"),createContainer([multiSelect],"450px")})(),name:"Helper Text"},SizesExample={render:()=>(()=>{const multiSelectSmall=createMultiSelectElement();multiSelectSmall.setAttribute("size","small");const multiSelectDefault=createMultiSelectElement(),multiSelectLarge=createMultiSelectElement();multiSelectLarge.setAttribute("size","large");const container=createContainer([multiSelectSmall,multiSelectDefault,multiSelectLarge],"650px");return container.style.display="flex",container.style.flexDirection="column",container.style.gap="16px",container})(),name:"Sizes"},DisabledExample={render:()=>(()=>{const multiSelect=createMultiSelectElement();return multiSelect.setAttribute("disabled","true"),createContainer([multiSelect],"200px")})(),name:"Disabled"},DisabledOptionsExample={render:()=>(()=>{const multiSelect=createMultiSelectElement(OPTIONS_WITH_DISABLED);return createContainer([multiSelect])})(),name:"Disabled Options"},HiddenLabelExample={render:()=>(()=>{const multiSelect=createMultiSelectElement();return multiSelect.setAttribute("hide-label","true"),createContainer([multiSelect],"400px")})(),name:"Hidden Label"},RequiredExample={render:()=>(()=>{const multiSelect=createMultiSelectElement();return multiSelect.setAttribute("required","true"),createContainer([multiSelect])})(),name:"Required"},ReadOnlyExample={render:()=>(()=>{const multiSelect=createMultiSelectElement();return multiSelect.value=["Cap","Fla","Moc"],multiSelect.setAttribute("readonly","true"),createContainer([multiSelect],"200px")})(),name:"Read-only"},GroupsExample={render:()=>(()=>{const multiSelect=createMultiSelectElement(GROUPED_OPTIONS);return createContainer([multiSelect])})(),name:"Groups"},RecommendedExample={render:()=>(()=>{const multiSelect=createMultiSelectElement(OPTIONS_WITH_RECOMMENDED);return createContainer([multiSelect])})(),name:"Recommended"},ValidationExample={render:()=>(()=>{const multiSelectSuccess=createMultiSelectElement();multiSelectSuccess.setAttribute("validation-status","success"),multiSelectSuccess.setAttribute("validation-text","Coffee available");const multiSelectWarning=createMultiSelectElement();multiSelectWarning.setAttribute("validation-status","warning"),multiSelectWarning.setAttribute("validation-text","Only a few left");const multiSelectError=createMultiSelectElement();return multiSelectError.setAttribute("validation-status","error"),multiSelectError.setAttribute("validation-text","Coffee unavailable"),createContainer([multiSelectSuccess,multiSelectWarning,multiSelectError],"640px")})(),name:"Validation"},LoadingWithErrorExample={render:()=>(()=>{const multiSelect=createMultiSelectElement();return multiSelect.setAttribute("loading","true"),multiSelect.setAttribute("timeout","1000"),multiSelect.addEventListener("icRetryLoad",(function(){multiSelect.setAttribute("loading","true")})),createContainer([multiSelect])})(),name:"Loading With Error"},InFormExample={render:()=>(()=>{const form=document.createElement("form"),multiSelect=createMultiSelectElement();form.appendChild(multiSelect),form.appendChild(document.createElement("br")),form.appendChild(document.createElement("br"));const submitButton=document.createElement("input");submitButton.setAttribute("type","submit"),submitButton.setAttribute("value","Submit");const resetButton=document.createElement("input");return resetButton.setAttribute("type","reset"),resetButton.setAttribute("value","Reset"),form.appendChild(submitButton),form.appendChild(resetButton),form.addEventListener("submit",(function(event){event.preventDefault(),console.log(multiSelect.querySelector("input.ic-input").value)})),createContainer([form])})(),name:"In Form"},__namedExportsOrder=["DefaultExample","DefaultValueExample","WithClearButtonExample","WithDescriptionsExample","HelperTextExample","SizesExample","DisabledExample","DisabledOptionsExample","HiddenLabelExample","RequiredExample","ReadOnlyExample","GroupsExample","RecommendedExample","ValidationExample","LoadingWithErrorExample","InFormExample"];DefaultExample.parameters={...DefaultExample.parameters,docs:{...DefaultExample.parameters?.docs,source:{originalSource:'{\n  render: () => Default(),\n  name: "Default"\n}',...DefaultExample.parameters?.docs?.source},description:{story:"Use the multi-select component to allow users to select one or more values from a list of options.\nThere is one required prop for the multi-select:\n- label: `string`\n\nClick the 'Component API' tab to view all the available props, events and slots for the multi-select.\n\nTo use the multi-select component, import `@ukic/canary-web-components` into your application.\n\nThe component tag name for the multi-select is `ic-select-with-multi`.\nEven though it is a variant of the `ic-select` component (which includes the single and searchable selects), this different tag name is necessary because of the need to keep the multi-select functionality separate while it is experimental (in a canary release).\nNote that the `multiple` prop still needs to be applied in order to enable the multi-select functionality.",...DefaultExample.parameters?.docs?.description}}},DefaultValueExample.parameters={...DefaultValueExample.parameters,docs:{...DefaultValueExample.parameters?.docs,source:{originalSource:'{\n  render: () => DefaultValue(),\n  name: "Default Value"\n}',...DefaultValueExample.parameters?.docs?.source},description:{story:"Show options as pre-selected by setting the `value` prop to an array containing the values of these options.",...DefaultValueExample.parameters?.docs?.description}}},WithClearButtonExample.parameters={...WithClearButtonExample.parameters,docs:{...WithClearButtonExample.parameters?.docs,source:{originalSource:'{\n  render: () => WithClearButton(),\n  name: "With Clear Button"\n}',...WithClearButtonExample.parameters?.docs?.source},description:{story:"Display a clear button by using the `show-clear-button` prop.\nThis will appear when the user has selected some options and allow them to easily clear their selection.",...WithClearButtonExample.parameters?.docs?.description}}},WithDescriptionsExample.parameters={...WithDescriptionsExample.parameters,docs:{...WithDescriptionsExample.parameters?.docs,source:{originalSource:'{\n  render: () => WithDescriptions(),\n  name: "With Descriptions"\n}',...WithDescriptionsExample.parameters?.docs?.source},description:{story:"Display extra information about the options by providing a description using the `description` property for each option.",...WithDescriptionsExample.parameters?.docs?.description}}},HelperTextExample.parameters={...HelperTextExample.parameters,docs:{...HelperTextExample.parameters?.docs,source:{originalSource:'{\n  render: () => HelperText(),\n  name: "Helper Text"\n}',...HelperTextExample.parameters?.docs?.source},description:{story:"Display helper text to provide additional information by using the `helper-text` prop.",...HelperTextExample.parameters?.docs?.description}}},SizesExample.parameters={...SizesExample.parameters,docs:{...SizesExample.parameters?.docs,source:{originalSource:'{\n  render: () => Sizes(),\n  name: "Sizes"\n}',...SizesExample.parameters?.docs?.source},description:{story:"Set the size of the multi-select by using the `size` prop. This prop takes the values `small`, `default` or `large`.\nDepending on the chosen size, the prop will apply styling to increase or decrease the amount of spacing within the component.\nThe `default` variant is seen in the first [default](#default) example.",...SizesExample.parameters?.docs?.description}}},DisabledExample.parameters={...DisabledExample.parameters,docs:{...DisabledExample.parameters?.docs,source:{originalSource:'{\n  render: () => Disabled(),\n  name: "Disabled"\n}',...DisabledExample.parameters?.docs?.source},description:{story:"Disable the multi-select and prevent user interaction by using the `disabled` prop.",...DisabledExample.parameters?.docs?.description}}},DisabledOptionsExample.parameters={...DisabledOptionsExample.parameters,docs:{...DisabledOptionsExample.parameters?.docs,source:{originalSource:'{\n  render: () => DisabledOptions(),\n  name: "Disabled Options"\n}',...DisabledOptionsExample.parameters?.docs?.source},description:{story:"Disable certain options by setting the `disabled` property to `true` for each option.",...DisabledOptionsExample.parameters?.docs?.description}}},HiddenLabelExample.parameters={...HiddenLabelExample.parameters,docs:{...HiddenLabelExample.parameters?.docs,source:{originalSource:'{\n  render: () => HiddenLabel(),\n  name: "Hidden Label"\n}',...HiddenLabelExample.parameters?.docs?.source},description:{story:"Hide the visible label for the multi-select by using the `hide-label` prop.",...HiddenLabelExample.parameters?.docs?.description}}},RequiredExample.parameters={...RequiredExample.parameters,docs:{...RequiredExample.parameters?.docs,source:{originalSource:'{\n  render: () => Required(),\n  name: "Required"\n}',...RequiredExample.parameters?.docs?.source},description:{story:"Inform the user that the multi-select is a required field by using the `required` prop.\nThis will display an asterisk next to the label and apply the `aria-required` attribute.",...RequiredExample.parameters?.docs?.description}}},ReadOnlyExample.parameters={...ReadOnlyExample.parameters,docs:{...ReadOnlyExample.parameters?.docs,source:{originalSource:'{\n  render: () => ReadOnly(),\n  name: "Read-only"\n}',...ReadOnlyExample.parameters?.docs?.source},description:{story:"Make the multi-select read-only by using the `readonly` prop.\nUse the `value` prop to set which options are selected and will be displayed when it is read-only.",...ReadOnlyExample.parameters?.docs?.description}}},GroupsExample.parameters={...GroupsExample.parameters,docs:{...GroupsExample.parameters?.docs,source:{originalSource:'{\n  render: () => Groups(),\n  name: "Groups"\n}',...GroupsExample.parameters?.docs?.source},description:{story:"Display options in groups by passing an array of child options to the `children` property of a parent option.\nThe parent option will be rendered as the title of the group.",...GroupsExample.parameters?.docs?.description}}},RecommendedExample.parameters={...RecommendedExample.parameters,docs:{...RecommendedExample.parameters?.docs,source:{originalSource:'{\n  render: () => Recommended(),\n  name: "Recommended"\n}',...RecommendedExample.parameters?.docs?.source},description:{story:"Display certain options at the top of the option list by setting the `recommended` property to `true` on each option.\nThis will allow for quick access to these options.",...RecommendedExample.parameters?.docs?.description}}},ValidationExample.parameters={...ValidationExample.parameters,docs:{...ValidationExample.parameters?.docs,source:{originalSource:'{\n  render: () => Validation(),\n  name: "Validation"\n}',...ValidationExample.parameters?.docs?.source},description:{story:"Display a validation status and message by using the `validation-status` and `validation-message` props.\nThe `validation-status` prop takes the values `success`, `warning` or `error`.",...ValidationExample.parameters?.docs?.description}}},LoadingWithErrorExample.parameters={...LoadingWithErrorExample.parameters,docs:{...LoadingWithErrorExample.parameters?.docs,source:{originalSource:'{\n  render: () => LoadingWithError(),\n  name: "Loading With Error"\n}',...LoadingWithErrorExample.parameters?.docs?.source},description:{story:"Display the loading state by using the `loading` prop.\nThe multi-select will show a loading error after the amount of time specified using the `timeout` prop has elapsed.",...LoadingWithErrorExample.parameters?.docs?.description}}},InFormExample.parameters={...InFormExample.parameters,docs:{...InFormExample.parameters?.docs,source:{originalSource:'{\n  render: () => InForm(),\n  name: "In Form"\n}',...InFormExample.parameters?.docs?.source},description:{story:"An example of the multi-select working in a form. The value will appear in the console on submit.",...InFormExample.parameters?.docs?.description}}}}}]);