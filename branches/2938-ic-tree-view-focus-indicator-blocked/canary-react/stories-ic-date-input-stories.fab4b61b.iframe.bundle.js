"use strict";(self.webpackChunk_ukic_canary_react=self.webpackChunk_ukic_canary_react||[]).push([[9503],{"./src/stories/ic-date-input.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:()=>Basic,CustomValidation:()=>CustomValidation,DateObject:()=>DateObject,Disabled:()=>Disabled,DisabledFutureDates:()=>DisabledFutureDates,DisabledPastDates:()=>DisabledPastDates,EpochTime:()=>EpochTime,Form:()=>Form,HelperText:()=>HelperText,HideHelperText:()=>HideHelperText,HideLabel:()=>HideLabel,IcChangeEvent:()=>IcChangeEvent,MinMax:()=>MinMax,Playground:()=>Playground,Required:()=>Required,Sizes:()=>Sizes,WithClearingValue:()=>WithClearingValue,WithHyphens:()=>WithHyphens,WithValue:()=>WithValue,ZuluDatetime:()=>ZuluDatetime,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ic_date_input_stories});var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),components=__webpack_require__("../react/dist/components.js"),react=__webpack_require__("./node_modules/react/index.js");var src_components=__webpack_require__("./src/components.ts");const ic_date_input_stories={title:"React Components/Date Input",component:src_components.z2,parameters:{componentAPI:{data:'# ic-date-input\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property               | Attribute                | Description                                                                                                                                                                                                                                            | Type                                           | Default                                                                                                 |\n| ---------------------- | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------- | ------------------------------------------------------------------------------------------------------- |\n| `dateFormat`           | `date-format`            | The format in which the date will be displayed.                                                                                                                                                                                                        | `"DD/MM/YYYY" \\| "MM/DD/YYYY" \\| "YYYY/MM/DD"` | `this.DEFAULT_DATE_FORMAT`                                                                              |\n| `disableDays`          | --                       | The days of the week to disable.                                                                                                                                                                                                                       | `IcWeekDays[]`                                 | `[]`                                                                                                    |\n| `disableDaysMessage`   | `disable-days-message`   | The text to display as the validation message when `disableDays` is set and a disabled date is entered.                                                                                                                                                | `string`                                       | `"The date you have selected is on a day of the week that is not allowed. Please select another date."` |\n| `disableFuture`        | `disable-future`         | If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.                                                                                                                                   | `boolean \\| undefined`                         | `false`                                                                                                 |\n| `disableFutureMessage` | `disable-future-message` | The text to display as the validation message when `disableFuture` is true and a date in the future is entered.                                                                                                                                        | `string`                                       | `"Dates in the future are not allowed. Please select a date in the past."`                              |\n| `disablePast`          | `disable-past`           | If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.                                                                                                                                       | `boolean \\| undefined`                         | `false`                                                                                                 |\n| `disablePastMessage`   | `disable-past-message`   | The text to display as the validation message when `disablePast` is true and a date in the past is entered.                                                                                                                                            | `string`                                       | `"Dates in the past are not allowed. Please select a date in the future."`                              |\n| `disabled`             | `disabled`               | If `true`, the disabled state will be set.                                                                                                                                                                                                             | `boolean`                                      | `false`                                                                                                 |\n| `emitDatePartChange`   | `emit-date-part-change`  | If `true`, every individual input field completed will emit an icChange event.                                                                                                                                                                         | `boolean \\| undefined`                         | `false`                                                                                                 |\n| `helperText`           | `helper-text`            | The helper text that will be displayed for additional field guidance. This will default to the text "Use format" along with the `dateFormat` value.                                                                                                    | `null \\| string`                               | `undefined`                                                                                             |\n| `hideHelperText`       | `hide-helper-text`       | If `true`, the helper text will be visually hidden, but still read out by screenreaders.                                                                                                                                                               | `boolean`                                      | `false`                                                                                                 |\n| `hideLabel`            | `hide-label`             | If `true`, the label will be visually hidden, but will still be read out by screen readers.                                                                                                                                                            | `boolean \\| undefined`                         | `false`                                                                                                 |\n| `inputId`              | `input-id`               | The ID for the input.                                                                                                                                                                                                                                  | `string`                                       | `` `ic-date-input-${inputIds++}` ``                                                                     |\n| `invalidDateMessage`   | `invalid-date-message`   | The text to display as the validation message when an invalid date is entered.                                                                                                                                                                         | `string`                                       | `"Please enter a valid date."`                                                                          |\n| `label` _(required)_   | `label`                  | The label for the date input.                                                                                                                                                                                                                          | `string`                                       | `undefined`                                                                                             |\n| `max`                  | `max`                    | The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disableFuture` is set to `true`. | `Date \\| string`                               | `""`                                                                                                    |\n| `min`                  | `min`                    | The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disablePast` is set to `true`. | `Date \\| string`                               | `""`                                                                                                    |\n| `name`                 | `name`                   | The name of the control, which is submitted with the form data.                                                                                                                                                                                        | `string`                                       | `this.inputId`                                                                                          |\n| `required`             | `required`               | If `true`, the input will require a value.                                                                                                                                                                                                             | `boolean`                                      | `false`                                                                                                 |\n| `showClearButton`      | `show-clear-button`      | If `true`, a button which clears the date input when clicked will be displayed.                                                                                                                                                                        | `boolean \\| undefined`                         | `true`                                                                                                  |\n| `size`                 | `size`                   | The size of the date input to be displayed.                                                                                                                                                                                                            | `"large" \\| "medium" \\| "small"`               | `"medium"`                                                                                              |\n| `theme`                | `theme`                  | Sets the date picker to the dark or light theme colors. "inherit" will set the color based on the system settings or ic-theme component.                                                                                                               | `"dark" \\| "inherit" \\| "light" \\| undefined`  | `"inherit"`                                                                                             |\n| `validationStatus`     | `validation-status`      | The validation status - e.g. \'error\' \\| \'warning\' \\| \'success\'. This will override the built-in date validation.                                                                                                                                       | `"" \\| "error" \\| "success" \\| "warning"`      | `""`                                                                                                    |\n| `validationText`       | `validation-text`        | The text to display as the validation message. This will override the built-in date validation.                                                                                                                                                        | `string \\| undefined`                          | `""`                                                                                                    |\n| `value`                | `value`                  | The value of the date input. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.                                                                                 | `Date \\| null \\| string \\| undefined`          | `""`                                                                                                    |\n\n\n## Events\n\n| Event      | Description                         | Type                                                                                                                                               |\n| ---------- | ----------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `icBlur`   | Emitted when the input loses focus. | `CustomEvent<{ value: Date \\| null; }>`                                                                                                            |\n| `icChange` | Emitted when the value has changed. | `CustomEvent<{ value: Date \\| null; dateObject: { day: string \\| null; month: string \\| null; year: string \\| null; }; utcValue: Date \\| null; }>` |\n| `icFocus`  | Emitted when the input gains focus. | `CustomEvent<{ value: Date \\| null; }>`                                                                                                            |\n\n\n## Methods\n\n### `getDate() => Promise<Date | null>`\n\nReturns the value as a Date object\n\n#### Returns\n\nType: `Promise<Date | null>`\n\nDate\n\n\n## Dependencies\n\n### Used by\n\n - [ic-date-picker](../ic-date-picker)\n\n### Depends on\n\n- ic-input-container\n- ic-input-label\n- ic-input-component-container\n- ic-button\n- ic-input-validation\n\n### Graph\n```mermaid\ngraph TD;\n  ic-date-input --\x3e ic-input-container\n  ic-date-input --\x3e ic-input-label\n  ic-date-input --\x3e ic-input-component-container\n  ic-date-input --\x3e ic-button\n  ic-date-input --\x3e ic-input-validation\n  ic-input-label --\x3e ic-typography\n  ic-button --\x3e ic-typography\n  ic-button --\x3e ic-loading-indicator\n  ic-button --\x3e ic-tooltip\n  ic-loading-indicator --\x3e ic-typography\n  ic-tooltip --\x3e ic-typography\n  ic-input-validation --\x3e ic-typography\n  ic-date-picker --\x3e ic-date-input\n  style ic-date-input fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n'}}},Basic={render:()=>react.createElement(react.Fragment,null,react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",onIcChange:ev=>console.log(ev.detail.value)}),react.createElement("br",null),react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",dateFormat:"MM/DD/YYYY"}),react.createElement("br",null),react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",dateFormat:"YYYY/MM/DD"})),name:"Basic"},IcChangeEvent={render:()=>react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",onIcChange:ev=>console.log(ev.detail.value,ev.detail.utcValue)}),name:"onIcChange event"},WithValue={render:()=>react.createElement(src_components.z2,{id:"date-input-default-date-with-value",label:"When would you like to collect your coffee?",value:"21/01/2001"}),name:"With value"},DateObject={render:()=>react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",value:new Date("28 November 2021")}),name:"Date object"},ZuluDatetime={render:()=>react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",value:new Date("28 November 2021").toISOString()}),name:"Zulu datetime"},WithHyphens={render:()=>react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",value:"25-05-2005"}),name:"With hyphens"},EpochTime={render:()=>react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",value:Date.now()}),name:"Epoch time"},HideLabel={render:()=>react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",hideLabel:!0}),name:"Hide label"},Required={render:()=>react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",required:!0}),name:"Required"},Disabled={render:()=>react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",disabled:!0}),name:"Disabled"},Sizes={render:()=>react.createElement(react.Fragment,null,react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",size:"small"}),react.createElement("br",null),react.createElement(src_components.z2,{label:"When would you like to collect your coffee?"}),react.createElement("br",null),react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",size:"large"})),name:"Sizes"},HelperText={render:()=>react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",helperText:"We will have your order ready for you on this date"}),name:"Custom helper text"},HideHelperText={render:()=>react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",helperText:"You cannot see me, but you can hear me",hideHelperText:"true"}),name:"Hide helper text"},CustomValidation={render:()=>react.createElement(react.Fragment,null,react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",validationStatus:"error",validationText:"There is a coffee shortage forecast for that day. Please choose a different date."}),react.createElement("br",null),react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",validationStatus:"warning",validationText:"Please be aware that there may be a coffee shortage on that day."}),react.createElement("br",null),react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",validationStatus:"success",validationText:"Your coffee will be available for you to collect on this day."})),name:"Custom validation"},DisabledPastDates={render:()=>react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",disablePast:!0}),name:"Disabled past dates"},DisabledFutureDates={render:()=>react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",disableFuture:!0}),name:"Disabled future dates"},MinMax={render:()=>react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",min:"02-01-2023",max:"20/07/2023"}),name:"Min and max"},Form={render:()=>react.createElement("form",{onSubmit:e=>{console.log(e)}},react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",value:new Date("13 March 1951")}),react.createElement(components.nP,{type:"submit"},"Submit"),react.createElement(components.nP,{type:"reset"},"Reset"))},WithClearingValue={render:()=>{const[value,setValue]=(0,react.useState)("21/01/2001"),handleClearValue=value=>{setValue(value)};return react.createElement(react.Fragment,null,react.createElement(src_components.z2,{label:"When would you like to collect your coffee?",value}),react.createElement("br",null),react.createElement("div",{style:{display:"flex",gap:"8px"}},react.createElement(components.nP,{onClick:()=>{setValue(new Date("05 May 2005"))}},"Update date"),react.createElement(components.nP,{onClick:()=>handleClearValue(null)},"Set null"),react.createElement(components.nP,{onClick:()=>handleClearValue("")},"Set Empty String"),react.createElement(components.nP,{onClick:()=>handleClearValue(void 0)},"Set undefined")))},name:"With clearing value"},Playground={render:args=>{const[{value},updateArgs]=(0,external_STORYBOOK_MODULE_PREVIEW_API_.useArgs)();return react.createElement(src_components.z2,{dateFormat:args.dateFormat,disabled:args.disabled,disableDays:args.disableDays,disableDaysMessage:args.disableDaysMessage,disableFuture:args.disableFuture,disableFutureMessage:args.disableFutureMessage,disablePast:args.disablePast,disablePastMessage:args.disablePastMessage,helperText:args.helperText,hideHelperText:args.hideHelperText,hideLabel:args.hideLabel,invalidDateMessage:args.invalidDateMessage,label:args.label,max:args.max,min:args.min,openAtDate:args.openAtDate,required:args.required,showDaysOutsideMonth:args.showDaysOutsideMonth,showPickerClearButton:args.showPickerClearButton,showPickerTodayButton:args.showPickerTodayButton,size:args.size,startOfWeek:args.startOfWeek,theme:args.theme,validationStatus:args.validationStatus,validationText:args.validationText,value,onIcChange:ev=>{const date=ev.detail.value;let formattedDate;formattedDate=null===date?"":`${date.getDate()}-${date.getMonth()+1}-${date.getFullYear()}`,updateArgs({value:formattedDate})}})},args:{dateFormat:"DD/MM/YYYY",disabled:!1,disableDays:[],disableDaysMessage:"This day is not available",disableFuture:!1,disableFutureMessage:"This date is in the future",disablePast:!1,disablePastMessage:"This date is in the past",helperText:"Choose a date",hideHelperText:!1,hideLabel:!1,invalidDateMessage:"Invalid date",label:"When would you like to collect your coffee?",max:"",min:"",required:!1,showClearButton:!0,size:"medium",theme:"inherit",validationStatus:"",validationText:"",value:""},argTypes:{dateFormat:{options:["DD/MM/YYYY","MM/DD/YYYY","YYYY/MM/DD"],control:{type:"inline-radio"}},validationStatus:{options:["","error","success","warning"],control:{type:"inline-radio"}},size:{options:["small","medium","large"],control:{type:"inline-radio"}},theme:{options:["inherit","light","dark"],control:{type:"inline-radio"}}},name:"Playground"},__namedExportsOrder=["Basic","IcChangeEvent","WithValue","DateObject","ZuluDatetime","WithHyphens","EpochTime","HideLabel","Required","Disabled","Sizes","HelperText","HideHelperText","CustomValidation","DisabledPastDates","DisabledFutureDates","MinMax","Form","WithClearingValue","Playground"];Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcDateInput label="When would you like to collect your coffee?" onIcChange={ev => console.log(ev.detail.value)} />\n      <br />\n      <IcDateInput label="When would you like to collect your coffee?" dateFormat="MM/DD/YYYY" />\n      <br />\n      <IcDateInput label="When would you like to collect your coffee?" dateFormat="YYYY/MM/DD" />\n    </>,\n  name: "Basic"\n}',...Basic.parameters?.docs?.source},description:{story:"Use the date input component to manually type in a date in different formats.\n\nThe input `label` is the only required prop for date input.\n\nClick the 'Component API' tab to view all the available props, events and slots for date input.\n\nTo use the date input component, import `@ukic/canary-react` into your application.\n\nEach example below demonstrates the date input in three different date formats:\n- DD/MM/YYYY (Default date format)\n- MM/DD/YYYY\n- YYYY/MM/DD\n\nDates can be added by manually typing into the input or using the up and down arrow keys.\n\nTo move between day, month and year using the keyboard, provide the required values based on the placeholders or use `/` or `-`.\n\nBy default, the helper text displays the date format.",...Basic.parameters?.docs?.description}}},IcChangeEvent.parameters={...IcChangeEvent.parameters,docs:{...IcChangeEvent.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput label="When would you like to collect your coffee?" onIcChange={ev => console.log(ev.detail.value, ev.detail.utcValue)} />,\n  name: "onIcChange event"\n}',...IcChangeEvent.parameters?.docs?.source},description:{story:"Retrieving the date input value via `onIcChange` returns the date as a Date object.\n\nThe event returns the Date object when day, month and year have been entered.",...IcChangeEvent.parameters?.docs?.description}}},WithValue.parameters={...WithValue.parameters,docs:{...WithValue.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput id="date-input-default-date-with-value" label="When would you like to collect your coffee?" value="21/01/2001" />,\n  name: "With value"\n}',...WithValue.parameters?.docs?.source},description:{story:"To set a value to the date input, pass the date value in the relevant date format.\n\nThe date input also accepts a number of different date formats within the value prop:\n- [Date object](#date-object)\n- [Zulu datetime](#zulu-datetime)\n- [With hyphens (DD-MM-YYYY)](#with-hyphens)\n- [Epoch time](#epoch-time)",...WithValue.parameters?.docs?.description}}},DateObject.parameters={...DateObject.parameters,docs:{...DateObject.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput label="When would you like to collect your coffee?" value={new Date("28 November 2021")} />,\n  name: "Date object"\n}',...DateObject.parameters?.docs?.source}}},ZuluDatetime.parameters={...ZuluDatetime.parameters,docs:{...ZuluDatetime.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput label="When would you like to collect your coffee?" value={new Date("28 November 2021").toISOString()} />,\n  name: "Zulu datetime"\n}',...ZuluDatetime.parameters?.docs?.source}}},WithHyphens.parameters={...WithHyphens.parameters,docs:{...WithHyphens.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput label="When would you like to collect your coffee?" value="25-05-2005" />,\n  name: "With hyphens"\n}',...WithHyphens.parameters?.docs?.source}}},EpochTime.parameters={...EpochTime.parameters,docs:{...EpochTime.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput label="When would you like to collect your coffee?" value={Date.now()} />,\n  name: "Epoch time"\n}',...EpochTime.parameters?.docs?.source}}},HideLabel.parameters={...HideLabel.parameters,docs:{...HideLabel.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput label="When would you like to collect your coffee?" hideLabel />,\n  name: "Hide label"\n}',...HideLabel.parameters?.docs?.source},description:{story:"To hide the label, set the `hideLabel` prop to `true`. The required `label` will still be read out by screen readers.",...HideLabel.parameters?.docs?.description}}},Required.parameters={...Required.parameters,docs:{...Required.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput label="When would you like to collect your coffee?" required />,\n  name: "Required"\n}',...Required.parameters?.docs?.source},description:{story:"To set the date input as a required field, add the `required` prop. This will add an asterisk at the end of the date input label.",...Required.parameters?.docs?.description}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput label="When would you like to collect your coffee?" disabled />,\n  name: "Disabled"\n}',...Disabled.parameters?.docs?.source},description:{story:"Set the `disabled`, to prevent interaction with the date input.",...Disabled.parameters?.docs?.description}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcDateInput label="When would you like to collect your coffee?" size="small" />\n      <br />\n      <IcDateInput label="When would you like to collect your coffee?" />\n      <br />\n      <IcDateInput label="When would you like to collect your coffee?" size="large" />\n    </>,\n  name: "Sizes"\n}',...Sizes.parameters?.docs?.source},description:{story:"The date input is available in three different sizes:\n\n- `small`\n- `medium` (default)\n- `large`",...Sizes.parameters?.docs?.description}}},HelperText.parameters={...HelperText.parameters,docs:{...HelperText.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput label="When would you like to collect your coffee?" helperText="We will have your order ready for you on this date" />,\n  name: "Custom helper text"\n}',...HelperText.parameters?.docs?.source},description:{story:"Use the helper text to add additional detail for the date input.",...HelperText.parameters?.docs?.description}}},HideHelperText.parameters={...HideHelperText.parameters,docs:{...HideHelperText.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput label="When would you like to collect your coffee?" helperText="You cannot see me, but you can hear me" hideHelperText="true" />,\n  name: "Hide helper text"\n}',...HideHelperText.parameters?.docs?.source}}},CustomValidation.parameters={...CustomValidation.parameters,docs:{...CustomValidation.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <IcDateInput label="When would you like to collect your coffee?" validationStatus="error" validationText="There is a coffee shortage forecast for that day. Please choose a different date." />\n      <br />\n      <IcDateInput label="When would you like to collect your coffee?" validationStatus="warning" validationText="Please be aware that there may be a coffee shortage on that day." />\n      <br />\n      <IcDateInput label="When would you like to collect your coffee?" validationStatus="success" validationText="Your coffee will be available for you to collect on this day." />\n    </>,\n  name: "Custom validation"\n}',...CustomValidation.parameters?.docs?.source},description:{story:"Validation on date input is set via `validationStatus` and `validationText`.\n\n`validationStatus` will set the style of the validation message. `validationStatus` accepts:\n- `error`\n- `warning`\n- `success`\n\n`validationStatus` is required for the `validationText` to appear.",...CustomValidation.parameters?.docs?.description}}},DisabledPastDates.parameters={...DisabledPastDates.parameters,docs:{...DisabledPastDates.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput label="When would you like to collect your coffee?" disablePast />,\n  name: "Disabled past dates"\n}',...DisabledPastDates.parameters?.docs?.source},description:{story:"Validation can be set on the date input if a date in the past has been set by setting the `disablePast` prop.\n\nEnter a date in the past to view the validation message.",...DisabledPastDates.parameters?.docs?.description}}},DisabledFutureDates.parameters={...DisabledFutureDates.parameters,docs:{...DisabledFutureDates.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput label="When would you like to collect your coffee?" disableFuture />,\n  name: "Disabled future dates"\n}',...DisabledFutureDates.parameters?.docs?.source},description:{story:"Validation can be set on the date input if a date in the future has been set by setting the `disableFuture` prop.\n\nEnter a date in the future to view the validation message.",...DisabledFutureDates.parameters?.docs?.description}}},MinMax.parameters={...MinMax.parameters,docs:{...MinMax.parameters?.docs,source:{originalSource:'{\n  render: () => <IcDateInput label="When would you like to collect your coffee?" min="02-01-2023" max="20/07/2023" />,\n  name: "Min and max"\n}',...MinMax.parameters?.docs?.source},description:{story:"It is possible to set a min and max date range. If a date is set and it is before the min or after the max date, a validation error will appear.\n\nThe min or max dates accept the following date formats:\n- [Date string](#with-value) (with slashes i.e. DD/MM/YYYY)\n- [Date string with hyphens](#with-hyphens) (i.e. DD-MM-YYYY)\n- [Date object](#date-object)\n- [Zulu datetime](#zulu-datetime)\n\nEnter a date after 2nd Jan 2023 and before 20th July to view the validation message.\n\nIn this code snippet, the min and max have been set using two different date formats to demonstrate its flexibility.",...MinMax.parameters?.docs?.description}}},Form.parameters={...Form.parameters,docs:{...Form.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const formSubmit = e => {\n      console.log(e);\n    };\n    return <form onSubmit={formSubmit}>\n        <IcDateInput label="When would you like to collect your coffee?" value={new Date("13 March 1951")} />\n        <IcButton type="submit">Submit</IcButton>\n        <IcButton type="reset">Reset</IcButton>\n      </form>;\n  }\n}',...Form.parameters?.docs?.source},description:{story:"When the date input component is used within a form, the date value is returned as an ISO string.\n\nThe value is console logged to the browser dev tools.",...Form.parameters?.docs?.description}}},WithClearingValue.parameters={...WithClearingValue.parameters,docs:{...WithClearingValue.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [value, setValue] = useState("21/01/2001");\n    const handleUpdate = () => {\n      setValue(new Date("05 May 2005"));\n    };\n    const handleClearValue = value => {\n      setValue(value);\n    };\n    return <>\n        <IcDateInput label="When would you like to collect your coffee?" value={value} />\n        <br />\n        <div style={{\n        display: "flex",\n        gap: "8px"\n      }}>\n          <IcButton onClick={() => handleUpdate()}>Update date</IcButton>\n          <IcButton onClick={() => handleClearValue(null)}>Set null</IcButton>\n          <IcButton onClick={() => handleClearValue("")}>\n            Set Empty String\n          </IcButton>\n          <IcButton onClick={() => handleClearValue(undefined)}>\n            Set undefined\n          </IcButton>\n        </div>\n      </>;\n  },\n  name: "With clearing value"\n}',...WithClearingValue.parameters?.docs?.source},description:{story:"The date input can be cleared by setting the the value attribute to one of the following:\n- empty string\n- `null`\n- `undefined`",...WithClearingValue.parameters?.docs?.description}}},Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:'{\n  render: args => {\n    const [{\n      value\n    }, updateArgs] = useArgs();\n    const updateDate = ev => {\n      const date = ev.detail.value;\n      let formattedDate;\n      date === null ? formattedDate = "" : formattedDate = `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()}`;\n      updateArgs({\n        value: formattedDate\n      });\n    };\n    return <IcDateInput dateFormat={args.dateFormat} disabled={args.disabled} disableDays={args.disableDays} disableDaysMessage={args.disableDaysMessage} disableFuture={args.disableFuture} disableFutureMessage={args.disableFutureMessage} disablePast={args.disablePast} disablePastMessage={args.disablePastMessage} helperText={args.helperText} hideHelperText={args.hideHelperText} hideLabel={args.hideLabel} invalidDateMessage={args.invalidDateMessage} label={args.label} max={args.max} min={args.min} openAtDate={args.openAtDate} required={args.required} showDaysOutsideMonth={args.showDaysOutsideMonth} showPickerClearButton={args.showPickerClearButton} showPickerTodayButton={args.showPickerTodayButton} size={args.size} startOfWeek={args.startOfWeek} theme={args.theme} validationStatus={args.validationStatus} validationText={args.validationText} value={value} onIcChange={updateDate} />;\n  },\n  args: defaultArgs,\n  argTypes: {\n    dateFormat: {\n      options: ["DD/MM/YYYY", "MM/DD/YYYY", "YYYY/MM/DD"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    validationStatus: {\n      options: ["", "error", "success", "warning"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    size: {\n      options: ["small", "medium", "large"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    theme: {\n      options: ["inherit", "light", "dark"],\n      control: {\n        type: "inline-radio"\n      }\n    }\n  },\n  name: "Playground"\n}',...Playground.parameters?.docs?.source},description:{story:'Go to the <ic-link href="/?path=/story/react-components-date-input--playground">separate page for the playground example</ic-link> to view the prop controls.',...Playground.parameters?.docs?.description}}}}}]);