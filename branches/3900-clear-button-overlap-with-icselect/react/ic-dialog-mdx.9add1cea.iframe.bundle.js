(self.webpackChunk_ukic_react=self.webpackChunk_ukic_react||[]).push([[6318],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{R:()=>useMDXComponents,x:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}}),[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./src/stories/ic-dialog.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const readme_namespaceObject='# ic-dialog\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property                  | Attribute                   | Description                                                                                                                                                                                                           | Type                                          | Default     |\n| ------------------------- | --------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------- | ----------- |\n| `closeOnBackdropClick`    | `close-on-backdrop-click`   | If set to `false`, the dialog will not close when the backdrop is clicked.                                                                                                                                            | `boolean \\| undefined`                        | `true`      |\n| `destructive`             | `destructive`               | If \'true\', sets the \'primary\' or rightmost button to the destructive variant. Stops initial focus being set on the \'primary\' or rightmost default or slotted button.                                                  | `boolean \\| undefined`                        | `false`     |\n| `disableHeightConstraint` | `disable-height-constraint` | If set to `true`, the content area max height and overflow properties are removed allowing the dialog to stretch below the fold. This prop also prevents popover elements from being cut off within the content area. | `boolean \\| undefined`                        | `false`     |\n| `disableWidthConstraint`  | `disable-width-constraint`  | If set to `true`, the content area width property is removed, allowing content to take the full width of the dialog when using the large variant.                                                                     | `boolean \\| undefined`                        | `false`     |\n| `dismissLabel`            | `dismiss-label`             | Sets the dismiss label tooltip and aria label.                                                                                                                                                                        | `string \\| undefined`                         | `"Dismiss"` |\n| `heading`                 | `heading`                   | Sets the heading for the dialog.                                                                                                                                                                                      | `string \\| undefined`                         | `undefined` |\n| `hideCloseButton`         | `hide-close-button`         | If `true`, the close button will not be displayed.                                                                                                                                                                    | `boolean \\| undefined`                        | `false`     |\n| `hideDefaultControls`     | `hide-default-controls`     | If set to `true`, default button controls will not be shown, but slotted dialog controls will still be displayed.                                                                                                     | `boolean`                                     | `false`     |\n| `label`                   | `label`                     | Sets the optional label for the dialog which appears above the heading.                                                                                                                                               | `string \\| undefined`                         | `undefined` |\n| `open`                    | `open`                      | If `true`, the dialog will be displayed.                                                                                                                                                                              | `boolean \\| undefined`                        | `false`     |\n| `size`                    | `size`                      | Sets the maximum and minimum height and width for the dialog.                                                                                                                                                         | `"large" \\| "medium" \\| "small" \\| undefined` | `"small"`   |\n| `theme`                   | `theme`                     | Sets the theme color to the dark or light theme color. "inherit" will set the color based on the system settings or ic-theme component.                                                                               | `"dark" \\| "inherit" \\| "light" \\| undefined` | `"inherit"` |\n\n\n## Events\n\n| Event               | Description                                                                                                   | Type                |\n| ------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------- |\n| `icDialogCancelled` | Cancelation event emitted when default \'Cancel\' button clicked or \'cancelDialog\' method is called.            | `CustomEvent<void>` |\n| `icDialogClosed`    | Emitted when dialog has closed.                                                                               | `CustomEvent<void>` |\n| `icDialogConfirmed` | Confirmation event emitted when default \'Confirm\' primary button clicked or \'confirmDialog\' method is called. | `CustomEvent<void>` |\n| `icDialogOpened`    | Emitted when dialog has opened.                                                                               | `CustomEvent<void>` |\n\n\n## Methods\n\n### `cancelDialog() => Promise<void>`\n\nCancels the dialog. Used by the default \'Cancel\' button or can be called manually to trigger cancelling of dialog.\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n### `confirmDialog() => Promise<void>`\n\nConfirms the dialog. Used by the default \'Confirm\' button or can be called manually to trigger confirming of dialog.\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n\n## Slots\n\n| Slot                | Description                                                          |\n| ------------------- | -------------------------------------------------------------------- |\n| `"alert"`           | Content will be placed at the top of the content area of the dialog. |\n| `"dialog-controls"` | Content will be place at the bottom of the dialog.                   |\n| `"heading"`         | Content will be placed at the top of the dialog.                     |\n| `"label"`           | Content will be placed above the dialog heading.                     |\n\n\n## CSS Custom Properties\n\n| Name                  | Description       |\n| --------------------- | ----------------- |\n| `--ic-z-index-dialog` | z-index of dialog |\n\n\n## Dependencies\n\n### Depends on\n\n- [ic-typography](../ic-typography)\n- [ic-button](../ic-button)\n\n### Graph\n```mermaid\ngraph TD;\n  ic-dialog --\x3e ic-typography\n  ic-dialog --\x3e ic-button\n  ic-button --\x3e ic-typography\n  ic-button --\x3e ic-loading-indicator\n  ic-button --\x3e ic-tooltip\n  ic-loading-indicator --\x3e ic-typography\n  ic-tooltip --\x3e ic-typography\n  style ic-dialog fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n';var ic_dialog_stories=__webpack_require__("./src/stories/ic-dialog.stories.js");function _createMdxContent(props){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.W8,{of:ic_dialog_stories}),"\n",(0,jsx_runtime.jsx)(dist.oz,{children:readme_namespaceObject}),"\n",(0,jsx_runtime.jsx)(dist.om,{})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.R)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent()}},"./node_modules/@storybook/blocks/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/blocks/dist sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/core/dist/components sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/core/dist/components sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/core/dist/theming sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/core/dist/theming sync recursive",module.exports=webpackEmptyContext}}]);