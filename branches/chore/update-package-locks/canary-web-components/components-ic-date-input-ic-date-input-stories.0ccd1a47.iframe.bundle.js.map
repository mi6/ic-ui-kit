{"version":3,"file":"components-ic-date-input-ic-date-input-stories.0ccd1a47.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AA2DA;;;;;;;;AAkBA;;;;;AAaA;;;;;;;;;AAqBA;;;;;;;;;;;AAgBA;;;;;;;;;AAcA;;;;;;;;;AAcA;;;AAWA;;;AAWA;;;AAmBA;;;;;;;;;;;;;;AAgBA;;;AAWA;;;;AASA;;;;;;;;;;;;;;;;;;AAiCA;;;AAaA;;;AAaA;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;;;;;;;;;;AAmBA","sources":["webpack://@ukic/canary-web-components/./src/components/ic-date-input/ic-date-input.stories.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { html } from \"lit-html\";\nimport readme from \"./readme.md\";\nimport { createDateInputForm } from \"./story-data\";\n\nexport default {\n  title: \"Web Components/Date Input\",\n  component: \"ic-date-input\",\n  parameters: {\n    componentAPI: {\n      data: readme,\n    },\n  },\n};\n\n/**\n * Use the date input component to manually type in a date in different formats.\n *\n * The input `label` is the only required attribute for date input.\n *\n * Click the 'Component API' tab to view all the available attributes, events and slots for date input.\n *\n * To use the date input component, import `@ukic/canary-web-components` into your application.\n *\n * Each example below demonstrates the date input in three different date formats:\n * - DD/MM/YYYY (Default date format)\n * - MM/DD/YYYY\n * - YYYY/MM/DD\n *\n * Dates can be added by manually typing into the input or using the up and down arrow keys.\n *\n * To move between day, month and year using the keyboard, provide the required values based on the placeholders or use `/` or `-`.\n *\n * By default, the helper text displays the date format.\n */\nexport const Default = {\n  render: () => html`<ic-date-input\n      label=\"When would you like to collect your coffee?\"\n    ></ic-date-input>\n    <script>\n      var dateInput = document.querySelector(\"ic-date-input\");\n      {\n        dateInput.addEventListener(\"icChange\", function (event) {\n          console.log(\"icChange\", event.detail.value);\n        });\n      }\n    </script>\n    <br />\n    <br />\n    <ic-date-input\n      label=\"When would you like to collect your coffee?\"\n      date-format=\"MM/DD/YYYY\"\n    ></ic-date-input>\n    <br />\n    <br />\n    <ic-date-input\n      label=\"When would you like to collect your coffee?\"\n      date-format=\"YYYY/MM/DD\"\n    ></ic-date-input>`,\n  name: \"Default\",\n};\n\n/**\n * Retrieving the date input value via `icChange` returns the date as a Date object.\n *\n * The event returns the Date object once day, month and year have been entered.\n */\nexport const IcChangeEvent = {\n  render: () => html`<ic-date-input\n      label=\"When would you like to collect your coffee?\"\n    ></ic-date-input>\n    <script>\n      var dateInput = document.querySelector(\"ic-date-input\");\n      dateInput.addEventListener(\"icChange\", function (event) {\n        console.log(event.detail.value, event.detail.utcValue);\n      });\n    </script>`,\n  name: \"icChange event\",\n};\n\n/**\n * To set a value to the date input, pass the date value in the relevant date format.\n */\nexport const WithValue = {\n  render: () => html`<ic-date-input\n    id=\"date-input-default-date-with-value\"\n    label=\"When would you like to collect your coffee?\"\n    date-format=\"DD/MM/YYYY\"\n    value=\"21/01/2001\"\n  ></ic-date-input>`,\n  name: \"With value\",\n};\n\n/**\n * The date input also accepts a number of different date formats within the value attribute:\n * - Date object\n * - [Zulu datetime](#zulu-datetime)\n * - [With hyphens (DD-MM-YYYY)](#with-hyphens)\n * - [Epoch time](#epoch-time)\n */\nexport const DateObject = {\n  render: () => html`<ic-date-input\n      id=\"date-input-default-date-date\"\n      label=\"When would you like to collect your coffee?\"\n    ></ic-date-input>\n    <script>\n      var dateInputDate = document.querySelector(\n        \"#date-input-default-date-date\"\n      );\n      dateInputDate.value = new Date(\"28 November 2021\");\n    </script>`,\n  name: \"Date object\",\n};\n\nexport const ZuluDatetime = {\n  render: () => html`<div>\n      <ic-date-input\n        id=\"date-input-default-zulu-date\"\n        label=\"When would you like to collect your coffee?\"\n      ></ic-date-input>\n    </div>\n    <script>\n      var dateInputDate = document.querySelector(\n        \"#date-input-default-zulu-date\"\n      );\n      dateInputDate.value = new Date(\"1 May 1990\").toISOString();\n    </script>`,\n  name: \"Zulu datetime\",\n};\n\nexport const WithHyphens = {\n  render: () => html`<ic-date-input\n      id=\"date-input-default-date-string\"\n      label=\"When would you like to collect your coffee?\"\n    ></ic-date-input>\n    <script>\n      var dateInputString = document.querySelector(\n        \"#date-input-default-date-string\"\n      );\n      dateInputString.value = \"25-05-2005\";\n    </script>`,\n  name: \"With hyphens\",\n};\n\nexport const EpochTime = {\n  render: () => html`<ic-date-input\n      id=\"date-input-default-date-epoch\"\n      label=\"When would you like to collect your coffee?\"\n    ></ic-date-input>\n    <script>\n      var dateInputString = document.querySelector(\n        \"#date-input-default-date-epoch\"\n      );\n      dateInputString.value = Date.now();\n    </script>`,\n  name: \"Epoch time\",\n};\n\n/**\n * To set the date input as a required field, set the `required` attribute to `true`. This will add an asterisk at the end of the date input label.\n */\nexport const Required = {\n  render: () => html`<ic-date-input\n    label=\"When would you like to collect your coffee?\"\n    required=\"true\"\n  ></ic-date-input>`,\n  name: \"Required\",\n};\n\n/**\n * To hide the label, set the `hide-label` attribute to `true`. The required `label` will still be read out by screen readers.\n */\nexport const HideLabel = {\n  render: () => html`<ic-date-input\n    label=\"When would you like to collect your coffee?\"\n    hide-label=\"true\"\n  ></ic-date-input>`,\n  name: \"Hide label\",\n};\n\n/**\n * Set the `disabled` attribute to `true` to prevent interaction with the date input.\n */\nexport const Disabled = {\n  render: () => html`<ic-date-input\n    label=\"When would you like to collect your coffee?\"\n    disabled=\"true\"\n  ></ic-date-input>`,\n};\n\n/**\n * The date input is available in three different sizes:\n * - `small`\n * - `medium` (default)\n * - `large`\n */\nexport const Sizes = {\n  render: () => html`<ic-date-input\n      label=\"When would you like to collect your coffee?\"\n      size=\"small\"\n    ></ic-date-input>\n    <br />\n    <br />\n    <ic-date-input\n      label=\"When would you like to collect your coffee?\"\n    ></ic-date-input>\n    <br />\n    <br />\n    <ic-date-input\n      label=\"When would you like to collect your coffee?\"\n      size=\"large\"\n    ></ic-date-input>`,\n  name: \"Sizes\",\n};\n\n/**\n * Use the helper text to add additional detail for the date input.\n */\nexport const CustomHelperText = {\n  render: () => html`<ic-date-input\n    label=\"When would you like to collect your coffee?\"\n    helper-text=\"We will have your order ready for you on this date\"\n  ></ic-date-input>`,\n  name: \"Custom helper text\",\n};\n\nexport const HideHelperText = {\n  render: () => html`<ic-date-input\n    label=\"When would you like to collect your coffee?\"\n    helper-text=\"You cannot see me, but you can hear me\"\n    hide-helper-text=\"true\"\n  ></ic-date-input>`,\n  name: \"Hide helper text\",\n};\n\n/**\n * Validation on date input is set via `validation-status` and `validation-text`.\n *\n * `validation-status` will set the style of the validation message. `validation-status` accepts:\n * - `error`\n * - `warning`\n * - `success`\n *\n * `validation-status` is required for the `validation-text` to appear.\n */\nexport const Validation = {\n  render: () => html`<ic-date-input\n      label=\"When would you like to collect your coffee?\"\n      validation-status=\"error\"\n      validation-text=\"There is a coffee shortage forecast for that day. Please choose a different date.\"\n    ></ic-date-input>\n    <br />\n    <br />\n    <ic-date-input\n      label=\"When would you like to collect your coffee?\"\n      validation-status=\"warning\"\n      validation-text=\"Please be aware that there may be a coffee shortage on that day.\"\n    ></ic-date-input>\n    <br />\n    <br />\n    <ic-date-input\n      label=\"When would you like to collect your coffee?\"\n      validation-status=\"success\"\n      validation-text=\"Your coffee will be available for you to collect on this day.\"\n    ></ic-date-input>`,\n  name: \"Custom validation\",\n};\n\n/**\n * Validation can be set on the date input if a date in the past has been set by setting the `disable-past` attribute to `true`.\n *\n * Enter a date in the past to view the validation message.\n */\nexport const DisablePastDates = {\n  render: () => html`<ic-date-input\n    label=\"When would you like to collect your coffee?\"\n    disable-past=\"true\"\n  ></ic-date-input>`,\n  name: \"Disable past dates\",\n};\n\n/**\n * Validation can be set on the date input if a date in the future has been set by setting the `disable-future` attribute to `true`.\n *\n * Enter a date in the future to view the validation message.\n */\nexport const DisableFutureDates = {\n  render: () => html`<ic-date-input\n    label=\"When would you like to collect your coffee?\"\n    disable-future=\"true\"\n  ></ic-date-input>`,\n  name: \"Disable future dates\",\n};\n\n/**\n * It is possible to set a min and max date range. If a date is set and it is before the min or after the max date, a validation error will appear.\n *\n * The min or max dates accept the following date formats:\n * - [Date string](#with-value) (with slashes i.e. DD/MM/YYYY)\n * - [Date string with hyphens](#with-hyphens) (i.e. DD-MM-YYYY)\n * - [Date object](#date-object)\n * - [Zulu time](#zulu-datetime)\n *\n * Enter a date after 2nd Jan 2023 and before 20th July to view the validation message.\n *\n * In this code snippet, the min and max have been set using two different date formats to demonstrate its flexibility.\n */\nexport const MinMax = {\n  render: () => html`<ic-date-input\n    label=\"When would you like to collect your coffee?\"\n    min=\"02/01/2023\"\n    max=\"20-07-2023\"\n  ></ic-date-input>`,\n  name: \"Min and max\",\n};\n\n/**\n * When the date input component is used within a form, the date value is returned as an ISO string.\n *\n * The value is console logged to the browser dev tools.\n */\nexport const Form = {\n  render: () => createDateInputForm(),\n  name: \"Form\",\n};\n\n/**\n * The date input can be cleared by setting the the value attribute to one of the following:\n * - empty string\n * - `null`\n * - `undefined`\n */\nexport const WithClearingValue = {\n  render: () => html`<ic-date-input\n      id=\"date-input-clear-value\"\n      label=\"When would you like to collect your coffee?\"\n      date-format=\"DD/MM/YYYY\"\n      value=\"21/01/2001\"\n    ></ic-date-input>\n    <br />\n    <ic-button id=\"update\">Update date</ic-button>\n    <ic-button id=\"null-btn\">set null</ic-button>\n    <ic-button id=\"empty-btn\">set empty string</ic-button>\n    <ic-button id=\"undef-btn\">set undefined</ic-button>\n    <script>\n      var input = document.querySelector(\"#date-input-clear-value\");\n      var btn = document.querySelector(\"#update\");\n      btn.addEventListener(\"click\", () => {\n        input.value = new Date(\"05 May 2005\");\n      });\n      var btn2 = document.querySelector(\"#null-btn\");\n      btn2.addEventListener(\"click\", () => {\n        input.value = null;\n      });\n      var btn3 = document.querySelector(\"#empty-btn\");\n      btn3.addEventListener(\"click\", () => {\n        input.value = \"\";\n      });\n      var btn4 = document.querySelector(\"#undef-btn\");\n      btn4.addEventListener(\"click\", () => {\n        input.value = undefined;\n      });\n    </script>`,\n  name: \"With clearing value\",\n};\n\n/**\n * The `IcChange` event is emitted by the date input every time an input field is changed.\n */\nexport const IcChangeEmitDatePartChanges = {\n  render: () => html`<ic-date-input\n      emit-date-part-change=\"true\"\n      label=\"When would you like to collect your coffee?\"\n    ></ic-date-input>\n    <script>\n      var dateInput = document.querySelector(\"ic-date-input\");\n      {\n        dateInput.addEventListener(\"icChange\", function (event) {\n          console.log(\"icChange\", event.detail);\n        });\n      }\n    </script>`,\n  name: \"IcChange with emitDatePartChange\",\n};\n"],"names":[],"sourceRoot":""}