{"version":3,"file":"components-ic-time-selector-ic-time-selector-mdx.06528159.iframe.bundle.js","mappings":";;;;;;;AA4CA;;;;;;;;AA0BA;;;;;;;;AAaA;;;;;;AAmBA;;;AASA;;;AAiBA;;;;;;;;;;;AAwCA","sources":["webpack://@ukic/canary-web-components/./src/components/ic-time-selector/ic-time-selector.stories.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { html } from \"lit-html\";\nimport readme from \"./readme.md\";\n\nexport default {\n  title: \"Web Components/Time Selector\",\n  component: \"ic-time-selector\",\n  parameters: {\n    componentAPI: {\n      data: readme,\n    },\n  },\n};\n\n/**\n * Use the time selector component to manually select a time in different formats.\n *\n * Click the 'Component API' tab to view all the available attributes, events and slots for time selector.\n *\n * To use the time selector component, import `@ukic/canary-web-components` into your application.\n *\n * Times can be selected by scrolling through each column or using the up and down arrow keys.\n *\n * To move between hour, minute and second using the keyboard, provide the required values based on the placeholders or use `:`.\n *\n */\nexport const Default = {\n  render: () => html`<ic-time-selector></ic-time-selector>`,\n  name: \"Default\",\n};\n\n/**\n * Retrieving the time selector value via `icChange` returns the time as a Date object.\n *\n * The event returns the Date object once hour, minute and second have been selected by clicking the tick icon button.\n */\nexport const IcChangeEvent = {\n  render: () => html`<ic-time-selector></ic-time-selector>\n    <script>\n      var timeSelector = document.querySelector(\"ic-time-selector\");\n      timeSelector.addEventListener(\"icChange\", (event) => {\n        console.log(\"icChange event detail:\", event.detail);\n      });\n    </script>`,\n  name: \"icChange Event\",\n};\n\n/**\n * To set a value to the time selector, pass the time value in the relevant time format.\n */\nexport const WithValue = {\n  render: () => html`<ic-time-selector value=\"14:30:40\"></ic-time-selector>`,\n  name: \"With value\",\n};\n\n/**\n * The time selector also accepts a number of different time formats within the value attribute:\n * - [Date object](#date-object)\n * - [Zulu time](#zulu-time)\n */\nexport const DateObject = {\n  render: () => html`<ic-time-selector\n      id=\"time-selector-default-time-date\"\n    ></ic-time-selector>\n    <script>\n      var timeSelectorDate = document.querySelector(\n        \"#time-selector-default-time-date\"\n      );\n      timeSelectorDate.value = new Date(\"2025-07-14T15:30:45\");\n    </script>`,\n  name: \"Date object\",\n};\n\nexport const ZuluTime = {\n  render: () => html`<div>\n      <ic-time-selector id=\"time-selector-default-zulu-time\"></ic-time-selector>\n    </div>\n    <script>\n      var timeSelectorZulu = document.querySelector(\n        \"#time-selector-default-zulu-time\"\n      );\n      timeSelectorZulu.value = \"15:30:45Z\";\n    </script>`,\n  name: \"Zulu time\",\n};\n\n/**\n * Demonstrates the `time-period` prop for 12-hour selection.\n */\nexport const TimePeriod = {\n  render: () => html`<ic-time-selector time-period=\"12\"></ic-time-selector>`,\n  name: \"12-Hour\",\n};\n\nexport const IcChangeEventTimePeriod = {\n  render: () => html`<ic-time-selector time-period=\"12\"></ic-time-selector>\n    <script>\n      var icTimeSelector = document.querySelector(\"ic-time-selector\");\n      icTimeSelector.addEventListener(\"icChange\", (event) => {\n        console.log(\"icChange event detail:\", event.detail);\n      });\n    </script>`,\n  name: \"icChange Event - with time period\",\n};\n\nexport const DefaultValue12Hour = {\n  render: () =>\n    html`<ic-time-selector\n      value=\"14:30:40\"\n      time-period=\"12\"\n    ></ic-time-selector>`,\n  name: \"Default value - 12 hour\",\n};\n\n/**\n * Demonstrates the time format HH:MM.\n */\nexport const TimeFormat = {\n  render: () => html`<ic-time-selector time-format=\"HH:MM\"></ic-time-selector>`,\n  name: \"Time format HH:MM\",\n};\n\nexport const DefaultValueTimeFormat = {\n  render: () =>\n    html`<ic-time-selector\n      value=\"14:30\"\n      time-format=\"HH:MM\"\n    ></ic-time-selector>`,\n  name: \"Default value - Time format HH:MM\",\n};\n\n/**\n * Setting min time allows you to restrict the earliest time that can be selected.\n * The value can be in any format supported as `time-format`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.\n */\nexport const MinTime = {\n  render: () => html`<ic-time-selector min=\"09:30:00\"></ic-time-selector>`,\n  name: \"Min time\",\n};\n\n/**\n * Setting max time allows you to restrict the latest time that can be selected.\n * The value can be in any format supported as `time-format`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.\n */\nexport const MaxTime = {\n  render: () => html`<ic-time-selector max=\"18:00:00\"></ic-time-selector>`,\n  name: \"Max time\",\n};\n\n/**\n * To disable specific times in the time selector, set the `disable-times` prop.\n * The `disable-times` prop accepts an array of time objects or strings.\n * Each time object can have a `start` and `end` property to define a range of disabled times, or it can be a single time string to disable that specific time.\n * The time can be in any format supported as `time-format`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.\n */\nexport const DisableTimes = {\n  render: () => html`<ic-time-selector\n      id=\"time-selector-default-disable-time\"\n    ></ic-time-selector>\n    <script>\n      var timeSelectorDisable = document.querySelector(\n        \"#time-selector-default-disable-time\"\n      );\n      timeSelectorDisable.disableTimes = [\n        { start: \"08:00\", end: \"10:00\" },\n        \"13:20\",\n      ];\n    </script>`,\n  name: \"Disabled times\",\n};\n\n/**\n * Demonstrates the size options for the time selector component.\n */\nexport const Small = {\n  render: () =>\n    html`<ic-time-selector size=\"small\" time-period=\"12\"></ic-time-selector>`,\n  name: \"Small\",\n};\n\nexport const Large = {\n  render: () =>\n    html`<ic-time-selector size=\"large\" time-period=\"12\"></ic-time-selector>`,\n  name: \"Large\",\n};\n"],"names":[],"sourceRoot":""}