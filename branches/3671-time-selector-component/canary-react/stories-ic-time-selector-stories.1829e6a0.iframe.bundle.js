"use strict";(self.webpackChunk_ukic_canary_react=self.webpackChunk_ukic_canary_react||[]).push([[5983],{"./src/stories/ic-time-selector.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DateObject:()=>DateObject,Default:()=>Default,DefaultValue12Hour:()=>DefaultValue12Hour,DefaultValueHHMM:()=>DefaultValueHHMM,DisableTimes:()=>DisableTimes,HHMM:()=>HHMM,IcChangeEvent:()=>IcChangeEvent,IcChangeEventTimePeriod:()=>IcChangeEventTimePeriod,Large:()=>Large,MaxTime:()=>MaxTime,MinTime:()=>MinTime,Playground:()=>Playground,Small:()=>Small,TimePeriod:()=>TimePeriod,UpdatingValue:()=>UpdatingValue,WithClearingValue:()=>WithClearingValue,WithValue:()=>WithValue,ZuluTime:()=>ZuluTime,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _ukic_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../react/dist/components.js"),react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_canary_web_components_src_components_ic_time_input_readme_md__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../canary-web-components/src/components/ic-time-input/readme.md"),_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"React Components/Time Selector",component:_components__WEBPACK_IMPORTED_MODULE_2__.DP,parameters:{componentAPI:{data:_canary_web_components_src_components_ic_time_input_readme_md__WEBPACK_IMPORTED_MODULE_1__}}},Default={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,null),name:"Default"},IcChangeEvent={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{onIcChange:event=>console.log("icChange",event.detail.value)}),name:"icChange event"},WithValue={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{value:"13:45:00"}),name:"With value"},DateObject={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{value:new Date("2025-07-14T15:30:45")}),name:"Date object"},ZuluTime={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{value:"15:30:45Z"}),name:"Zulu time"},TimePeriod={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{timePeriod:"12"}),name:"Time period"},IcChangeEventTimePeriod={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{timePeriod:"12",onIcChange:event=>console.log("icChange",event.detail.value)}),name:"icChange event - with time period"},DefaultValue12Hour={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{value:"14:30:40",timePeriod:"12"}),name:"Default value - 12 hour"},HHMM={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{timeFormat:"HH:MM"}),name:"Time format HH:MM"},DefaultValueHHMM={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{value:"14:30",timeFormat:"HH:MM"}),name:"Default value - Time format HH:MM"},MinTime={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{min:"09:00:00"}),name:"Min time"},MaxTime={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{max:"18:00:00"}),name:"Max time"},DisableTimes={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{disableTimes:[{start:"08:00",end:"10:00"},"13:20"]}),name:"Disable times"},Small={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{size:"small",timePeriod:"12"}),name:"Small"},Large={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{size:"large",timePeriod:"12"}),name:"Large"},WithClearingValue={render:()=>{const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)("08:30:00"),handleClearValue=value=>{setValue(value)};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{value}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{display:"flex",gap:"8px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ukic_react__WEBPACK_IMPORTED_MODULE_3__.nP,{onClick:()=>{setValue("08:30:00")}},"Update time"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ukic_react__WEBPACK_IMPORTED_MODULE_3__.nP,{onClick:()=>handleClearValue(null)},"Set null"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ukic_react__WEBPACK_IMPORTED_MODULE_3__.nP,{onClick:()=>handleClearValue("")},"Set Empty String"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ukic_react__WEBPACK_IMPORTED_MODULE_3__.nP,{onClick:()=>handleClearValue(void 0)},"Set undefined")))},name:"With clearing value"},UpdatingValue={render:()=>{const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)("08:30:00");return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{value}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{display:"flex",gap:"8px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ukic_react__WEBPACK_IMPORTED_MODULE_3__.nP,{onClick:()=>{setValue("08:30:00")}},"Reset time"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ukic_react__WEBPACK_IMPORTED_MODULE_3__.nP,{onClick:()=>{setValue("10:45:15")}},"Set new time")))},name:"Updating value"},Playground={render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components__WEBPACK_IMPORTED_MODULE_2__.DP,{disableTimes:args.disableTimes,max:args.max,min:args.min,size:args.size,theme:args.theme,timeFormat:args.timeFormat,timePeriod:args.timePeriod,value:args.value}),args:{disableTimes:[],max:"",min:"",size:"medium",theme:"inherit",timeFormat:"HH:MM:SS",timePeriod:"24",value:"12:00:00"},argTypes:{size:{options:["small","medium","large"],control:{type:"inline-radio"}},theme:{options:["inherit","light","dark"],control:{type:"inline-radio"}},timeFormat:{options:["HH:MM:SS","HH:MM"],control:{type:"inline-radio"}},timePeriod:{options:["24","12"],control:{type:"inline-radio"}}},name:"Playground"},__namedExportsOrder=["Default","IcChangeEvent","WithValue","DateObject","ZuluTime","TimePeriod","IcChangeEventTimePeriod","DefaultValue12Hour","HHMM","DefaultValueHHMM","MinTime","MaxTime","DisableTimes","Small","Large","WithClearingValue","UpdatingValue","Playground"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector />,\n  name: "Default"\n}',...Default.parameters?.docs?.source},description:{story:"Use the time selector component to manually select a time in different formats.\n\nClick the 'Component API' tab to view all the available attributes, events and slots for time selector.\n\nTo use the time selector component, import `@ukic/canary-web-components` into your application.\n\nTimes can be selected by scrolling through each column or using the up and down arrow keys.\n\nTo move between hour, minute and second using the keyboard, provide the required values based on the placeholders or use `:`.",...Default.parameters?.docs?.description}}},IcChangeEvent.parameters={...IcChangeEvent.parameters,docs:{...IcChangeEvent.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector onIcChange={event => console.log("icChange", event.detail.value)} />,\n  name: "icChange event"\n}',...IcChangeEvent.parameters?.docs?.source},description:{story:"Retrieving the time selector value via `icChange` returns the time as a Date object.\n\nThe event returns the Date object once hour, minute and second have been selected by clicking the tick icon button.",...IcChangeEvent.parameters?.docs?.description}}},WithValue.parameters={...WithValue.parameters,docs:{...WithValue.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector value="13:45:00" />,\n  name: "With value"\n}',...WithValue.parameters?.docs?.source},description:{story:"To set a value to the time selector, pass the time value in the relevant time format.",...WithValue.parameters?.docs?.description}}},DateObject.parameters={...DateObject.parameters,docs:{...DateObject.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector value={new Date("2025-07-14T15:30:45")} />,\n  name: "Date object"\n}',...DateObject.parameters?.docs?.source},description:{story:"The time selector also accepts a number of different time formats within the value attribute:\n- [Date object](#date-object)\n- [Zulu time](#zulu-time)",...DateObject.parameters?.docs?.description}}},ZuluTime.parameters={...ZuluTime.parameters,docs:{...ZuluTime.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector value="15:30:45Z" />,\n  name: "Zulu time"\n}',...ZuluTime.parameters?.docs?.source}}},TimePeriod.parameters={...TimePeriod.parameters,docs:{...TimePeriod.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector timePeriod="12" />,\n  name: "Time period"\n}',...TimePeriod.parameters?.docs?.source},description:{story:"Demonstrates the `timePeriod` prop for 12-hour selection.",...TimePeriod.parameters?.docs?.description}}},IcChangeEventTimePeriod.parameters={...IcChangeEventTimePeriod.parameters,docs:{...IcChangeEventTimePeriod.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector timePeriod="12" onIcChange={event => console.log("icChange", event.detail.value)} />,\n  name: "icChange event - with time period"\n}',...IcChangeEventTimePeriod.parameters?.docs?.source}}},DefaultValue12Hour.parameters={...DefaultValue12Hour.parameters,docs:{...DefaultValue12Hour.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector value="14:30:40" timePeriod="12" />,\n  name: "Default value - 12 hour"\n}',...DefaultValue12Hour.parameters?.docs?.source}}},HHMM.parameters={...HHMM.parameters,docs:{...HHMM.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector timeFormat="HH:MM" />,\n  name: "Time format HH:MM"\n}',...HHMM.parameters?.docs?.source},description:{story:"Demonstrates the time format HH:MM.",...HHMM.parameters?.docs?.description}}},DefaultValueHHMM.parameters={...DefaultValueHHMM.parameters,docs:{...DefaultValueHHMM.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector value="14:30" timeFormat="HH:MM" />,\n  name: "Default value - Time format HH:MM"\n}',...DefaultValueHHMM.parameters?.docs?.source}}},MinTime.parameters={...MinTime.parameters,docs:{...MinTime.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector min="09:00:00" />,\n  name: "Min time"\n}',...MinTime.parameters?.docs?.source},description:{story:"Setting min time allows you to restrict the earliest time that can be selected.\nThe value can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.",...MinTime.parameters?.docs?.description}}},MaxTime.parameters={...MaxTime.parameters,docs:{...MaxTime.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector max="18:00:00" />,\n  name: "Max time"\n}',...MaxTime.parameters?.docs?.source},description:{story:"Setting max time allows you to restrict the latest time that can be selected.\nThe value can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.",...MaxTime.parameters?.docs?.description}}},DisableTimes.parameters={...DisableTimes.parameters,docs:{...DisableTimes.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector disableTimes={[{\n    start: "08:00",\n    end: "10:00"\n  }, "13:20"]} />,\n  name: "Disable times"\n}',...DisableTimes.parameters?.docs?.source},description:{story:"To disable specific times in the time selector, set the `disableTimes` prop.\nThe `disableTimes` prop accepts an array of time objects or strings.\nEach time object can have a `start` and `end` property to define a range of disabled times, or it can be a single time string to disable that specific time.\nThe time can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.",...DisableTimes.parameters?.docs?.description}}},Small.parameters={...Small.parameters,docs:{...Small.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector size="small" timePeriod="12" />,\n  name: "Small"\n}',...Small.parameters?.docs?.source},description:{story:"Demonstrates the size options for the time selector component.",...Small.parameters?.docs?.description}}},Large.parameters={...Large.parameters,docs:{...Large.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeSelector size="large" timePeriod="12" />,\n  name: "Large"\n}',...Large.parameters?.docs?.source}}},WithClearingValue.parameters={...WithClearingValue.parameters,docs:{...WithClearingValue.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [value, setValue] = useState("08:30:00");\n    const handleUpdate = () => {\n      setValue("08:30:00");\n    };\n    const handleClearValue = value => {\n      setValue(value);\n    };\n    return <>\n        <IcTimeSelector value={value} />\n        <br />\n        <div style={{\n        display: "flex",\n        gap: "8px"\n      }}>\n          <IcButton onClick={() => handleUpdate()}>Update time</IcButton>\n          <IcButton onClick={() => handleClearValue(null)}>Set null</IcButton>\n          <IcButton onClick={() => handleClearValue("")}>\n            Set Empty String\n          </IcButton>\n          <IcButton onClick={() => handleClearValue(undefined)}>\n            Set undefined\n          </IcButton>\n        </div>\n      </>;\n  },\n  name: "With clearing value"\n}',...WithClearingValue.parameters?.docs?.source},description:{story:"The time selector can be cleared by setting the the value attribute to one of the following:\n- empty string\n- `null`\n- `undefined`",...WithClearingValue.parameters?.docs?.description}}},UpdatingValue.parameters={...UpdatingValue.parameters,docs:{...UpdatingValue.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [value, setValue] = useState("08:30:00");\n    const handleReset = () => {\n      setValue("08:30:00");\n    };\n    const handleNewValue = () => {\n      setValue("10:45:15");\n    };\n    return <>\n        <IcTimeSelector value={value} />\n        <br />\n        <div style={{\n        display: "flex",\n        gap: "8px"\n      }}>\n          <IcButton onClick={() => handleReset()}>Reset time</IcButton>\n          <IcButton onClick={() => handleNewValue()}>Set new time</IcButton>\n        </div>\n      </>;\n  },\n  name: "Updating value"\n}',...UpdatingValue.parameters?.docs?.source}}},Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:'{\n  render: args => {\n    return <IcTimeSelector disableTimes={args.disableTimes} max={args.max} min={args.min} size={args.size} theme={args.theme} timeFormat={args.timeFormat} timePeriod={args.timePeriod} value={args.value} />;\n  },\n  args: defaultArgs,\n  argTypes: {\n    size: {\n      options: ["small", "medium", "large"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    theme: {\n      options: ["inherit", "light", "dark"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    timeFormat: {\n      options: ["HH:MM:SS", "HH:MM"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    timePeriod: {\n      options: ["24", "12"],\n      control: {\n        type: "inline-radio"\n      }\n    }\n  },\n  name: "Playground"\n}',...Playground.parameters?.docs?.source},description:{story:'Go to the <ic-link href="/?path=/story/react-components-time-selector--playground">separate page for the playground example</ic-link> to view the prop controls.',...Playground.parameters?.docs?.description}}}},"../canary-web-components/src/components/ic-time-input/readme.md":module=>{module.exports='# ic-date-input\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property             | Attribute               | Description                                                                                                                                                                                        | Type                                          | Default                             |\n| -------------------- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------- | ----------------------------------- |\n| `disableTimes`       | --                      | An array of times that will be disabled in the time input. The times can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object. | `IcDisableTimeSelection[]`                    | `[]`                                |\n| `disabled`           | `disabled`              | If `true`, the disabled state will be set.                                                                                                                                                         | `boolean`                                     | `false`                             |\n| `emitTimePartChange` | `emit-time-part-change` | If `true`, every individual input field completed will emit an icChange event.                                                                                                                     | `boolean \\| undefined`                        | `false`                             |\n| `helperText`         | `helper-text`           | The helper text that will be displayed for additional field guidance. This will default to the text "Use format" along with the `timeFormat` value.                                                | `null \\| string`                              | `undefined`                         |\n| `hideHelperText`     | `hide-helper-text`      | If `true`, the helper text will be visually hidden, but still read out by screenreaders.                                                                                                           | `boolean`                                     | `false`                             |\n| `hideLabel`          | `hide-label`            | If `true`, the label will be visually hidden, but will still be read out by screen readers.                                                                                                        | `boolean \\| undefined`                        | `false`                             |\n| `inputId`            | `input-id`              | The ID for the input.                                                                                                                                                                              | `string`                                      | `` `ic-time-input-${inputIds++}` `` |\n| `invalidTimeMessage` | `invalid-time-message`  | The text to display as the validation message when an invalid time is entered.                                                                                                                     | `string`                                      | `"Please enter a valid time."`      |\n| `label` _(required)_ | `label`                 | The label for the time input.                                                                                                                                                                      | `string`                                      | `undefined`                         |\n| `max`                | `max`                   | The latest time that will be allowed. The value can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.                      | `Date \\| string`                              | `""`                                |\n| `min`                | `min`                   | The earliest time that will be allowed. The value can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.                    | `Date \\| string`                              | `""`                                |\n| `name`               | `name`                  | The name of the control, which is submitted with the form data.                                                                                                                                    | `string`                                      | `this.inputId`                      |\n| `required`           | `required`              | If `true`, the input will require a value.                                                                                                                                                         | `boolean`                                     | `false`                             |\n| `showClearButton`    | `show-clear-button`     | If `true`, a button which clears the time input when clicked will be displayed.                                                                                                                    | `boolean \\| undefined`                        | `true`                              |\n| `size`               | `size`                  | The size of the time input to be displayed.                                                                                                                                                        | `"large" \\| "medium" \\| "small"`              | `"medium"`                          |\n| `theme`              | `theme`                 | Sets the time picker to the dark or light theme colors. "inherit" will set the color based on the system settings or ic-theme component.                                                           | `"dark" \\| "inherit" \\| "light" \\| undefined` | `"inherit"`                         |\n| `timeFormat`         | `time-format`           | The format in which the time will be displayed.                                                                                                                                                    | `"HH:MM" \\| "HH:MM:SS"`                       | `this.DEFAULT_TIME_FORMAT`          |\n| `timePeriod`         | `time-period`           | The time period format: "12" for 12-hour, "24" for 24-hour. Defaults to "24".                                                                                                                      | `"12" \\| "24"`                                | `"24"`                              |\n| `validationStatus`   | `validation-status`     | The validation status - e.g. \'error\' \\| \'warning\' \\| \'success\'. This will override the built-in time validation.                                                                                   | `"" \\| "error" \\| "success" \\| "warning"`     | `""`                                |\n| `validationText`     | `validation-text`       | The text to display as the validation message. This will override the built-in time validation.                                                                                                    | `string \\| undefined`                         | `""`                                |\n| `value`              | `value`                 | The value of the time input. The value can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.                               | `Date \\| null \\| string \\| undefined`         | `""`                                |\n\n\n## Events\n\n| Event      | Description                         | Type                                                                                                                           |\n| ---------- | ----------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| `icBlur`   | Emitted when the input loses focus. | `CustomEvent<{ value: Date \\| null; }>`                                                                                        |\n| `icChange` | Emitted when the value has changed. | `CustomEvent<{ value: Date \\| null; timeObject: { hour: string \\| null; minute: string \\| null; second: string \\| null; }; }>` |\n| `icFocus`  | Emitted when the input gains focus. | `CustomEvent<{ value: Date \\| null; }>`                                                                                        |\n\n\n## Methods\n\n### `getTime() => Promise<Date | null>`\n\nReturns the value as a Date object\n\n#### Returns\n\nType: `Promise<Date | null>`\n\nDate\n\n\n## Slots\n\n| Slot            | Description                                           |\n| --------------- | ----------------------------------------------------- |\n| `"helper-text"` | Content is set as the helper text for the time input. |\n\n\n## Dependencies\n\n### Depends on\n\n- ic-input-container\n- ic-input-label\n- ic-input-component-container\n- ic-button\n- ic-input-validation\n\n### Graph\n```mermaid\ngraph TD;\n  ic-time-input --\x3e ic-input-container\n  ic-time-input --\x3e ic-input-label\n  ic-time-input --\x3e ic-input-component-container\n  ic-time-input --\x3e ic-button\n  ic-time-input --\x3e ic-input-validation\n  ic-input-label --\x3e ic-typography\n  ic-button --\x3e ic-typography\n  ic-button --\x3e ic-loading-indicator\n  ic-button --\x3e ic-tooltip\n  ic-loading-indicator --\x3e ic-typography\n  ic-tooltip --\x3e ic-typography\n  ic-input-validation --\x3e ic-typography\n  style ic-time-input fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n'}}]);