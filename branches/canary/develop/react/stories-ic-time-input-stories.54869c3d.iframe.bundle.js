"use strict";(self.webpackChunk_ukic_canary_react=self.webpackChunk_ukic_canary_react||[]).push([[6032],{"./src/stories/ic-time-input.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomHelperText:()=>CustomHelperText,DateObject:()=>DateObject,Default:()=>Default,DisableTimes:()=>DisableTimes,Disabled:()=>Disabled,HHMM:()=>HHMM,HideHelperText:()=>HideHelperText,HideLabel:()=>HideLabel,IcChangeEmitTimePartChanges:()=>IcChangeEmitTimePartChanges,IcChangeEvent:()=>IcChangeEvent,MaxTime:()=>MaxTime,MinTime:()=>MinTime,Playground:()=>Playground,Required:()=>Required,Sizes:()=>Sizes,TimePeriod:()=>TimePeriod,Validation:()=>Validation,WithClearingValue:()=>WithClearingValue,WithValue:()=>WithValue,ZuluTime:()=>ZuluTime,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ic_time_input_stories});var components=__webpack_require__("../react/dist/components.js"),react=__webpack_require__("./node_modules/react/index.js");var src_components=__webpack_require__("./src/components.ts");const ic_time_input_stories={title:"React Components/Time Input",component:src_components.We,parameters:{componentAPI:{data:'# ic-date-input\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property             | Attribute               | Description                                                                                                                                                                                        | Type                                          | Default                             |\n| -------------------- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------- | ----------------------------------- |\n| `disableTimes`       | --                      | An array of times that will be disabled in the time input. The times can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object. | `IcDisableTimeSelection[]`                    | `[]`                                |\n| `disabled`           | `disabled`              | If `true`, the disabled state will be set.                                                                                                                                                         | `boolean`                                     | `false`                             |\n| `emitTimePartChange` | `emit-time-part-change` | If `true`, every individual input field completed will emit an icChange event.                                                                                                                     | `boolean \\| undefined`                        | `false`                             |\n| `helperText`         | `helper-text`           | The helper text that will be displayed for additional field guidance. This will default to the text "Use format" along with the `timeFormat` value.                                                | `null \\| string`                              | `undefined`                         |\n| `hideHelperText`     | `hide-helper-text`      | If `true`, the helper text will be visually hidden, but still read out by screenreaders.                                                                                                           | `boolean`                                     | `false`                             |\n| `hideLabel`          | `hide-label`            | If `true`, the label will be visually hidden, but will still be read out by screen readers.                                                                                                        | `boolean \\| undefined`                        | `false`                             |\n| `inputId`            | `input-id`              | The ID for the input.                                                                                                                                                                              | `string`                                      | `` `ic-time-input-${inputIds++}` `` |\n| `invalidTimeMessage` | `invalid-time-message`  | The text to display as the validation message when an invalid time is entered.                                                                                                                     | `string`                                      | `"Please enter a valid time."`      |\n| `label` _(required)_ | `label`                 | The label for the time input.                                                                                                                                                                      | `string`                                      | `undefined`                         |\n| `max`                | `max`                   | The latest time that will be allowed. The value can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.                      | `Date \\| string`                              | `""`                                |\n| `min`                | `min`                   | The earliest time that will be allowed. The value can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.                    | `Date \\| string`                              | `""`                                |\n| `name`               | `name`                  | The name of the control, which is submitted with the form data.                                                                                                                                    | `string`                                      | `this.inputId`                      |\n| `required`           | `required`              | If `true`, the input will require a value.                                                                                                                                                         | `boolean`                                     | `false`                             |\n| `showClearButton`    | `show-clear-button`     | If `true`, a button which clears the time input when clicked will be displayed.                                                                                                                    | `boolean \\| undefined`                        | `true`                              |\n| `size`               | `size`                  | The size of the time input to be displayed.                                                                                                                                                        | `"large" \\| "medium" \\| "small"`              | `"medium"`                          |\n| `theme`              | `theme`                 | Sets the time picker to the dark or light theme colors. "inherit" will set the color based on the system settings or ic-theme component.                                                           | `"dark" \\| "inherit" \\| "light" \\| undefined` | `"inherit"`                         |\n| `timeFormat`         | `time-format`           | The format in which the time will be displayed.                                                                                                                                                    | `"HH:MM" \\| "HH:MM:SS"`                       | `this.DEFAULT_TIME_FORMAT`          |\n| `timePeriod`         | `time-period`           | The time period format: "12" for 12-hour, "24" for 24-hour. Defaults to "24".                                                                                                                      | `"12" \\| "24"`                                | `"24"`                              |\n| `validationStatus`   | `validation-status`     | The validation status - e.g. \'error\' \\| \'warning\' \\| \'success\'. This will override the built-in time validation.                                                                                   | `"" \\| "error" \\| "success" \\| "warning"`     | `""`                                |\n| `validationText`     | `validation-text`       | The text to display as the validation message. This will override the built-in time validation.                                                                                                    | `string \\| undefined`                         | `""`                                |\n| `value`              | `value`                 | The value of the time input. The value can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.                               | `Date \\| null \\| string \\| undefined`         | `""`                                |\n\n\n## Events\n\n| Event      | Description                         | Type                                                                                                                           |\n| ---------- | ----------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| `icBlur`   | Emitted when the input loses focus. | `CustomEvent<{ value: Date \\| null; }>`                                                                                        |\n| `icChange` | Emitted when the value has changed. | `CustomEvent<{ value: Date \\| null; timeObject: { hour: string \\| null; minute: string \\| null; second: string \\| null; }; }>` |\n| `icFocus`  | Emitted when the input gains focus. | `CustomEvent<{ value: Date \\| null; }>`                                                                                        |\n\n\n## Methods\n\n### `getTime() => Promise<Date | null>`\n\nReturns the value as a Date object\n\n#### Returns\n\nType: `Promise<Date | null>`\n\nDate\n\n\n## Slots\n\n| Slot            | Description                                           |\n| --------------- | ----------------------------------------------------- |\n| `"helper-text"` | Content is set as the helper text for the time input. |\n\n\n## Dependencies\n\n### Depends on\n\n- ic-input-container\n- ic-input-label\n- ic-input-component-container\n- ic-button\n- ic-input-validation\n\n### Graph\n```mermaid\ngraph TD;\n  ic-time-input --\x3e ic-input-container\n  ic-time-input --\x3e ic-input-label\n  ic-time-input --\x3e ic-input-component-container\n  ic-time-input --\x3e ic-button\n  ic-time-input --\x3e ic-input-validation\n  ic-input-label --\x3e ic-typography\n  ic-button --\x3e ic-typography\n  ic-button --\x3e ic-loading-indicator\n  ic-button --\x3e ic-tooltip\n  ic-loading-indicator --\x3e ic-typography\n  ic-tooltip --\x3e ic-typography\n  ic-input-validation --\x3e ic-typography\n  style ic-time-input fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n'}}},Default={render:()=>react.createElement(src_components.We,{label:"What time would you like to collect your coffee?"}),name:"Default"},IcChangeEvent={render:()=>react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",onIcChange:event=>console.log("icChange",event.detail.value)}),name:"icChange event"},WithValue={render:()=>react.createElement(src_components.We,{id:"time-input-default-time-with-value",label:"What time would you like to collect your coffee?",value:"13:45:00"}),name:"With value"},DateObject={render:()=>react.createElement(src_components.We,{id:"time-input-default-time-date",label:"What time would you like to collect your coffee?",value:new Date("2025-07-14T15:30:45")}),name:"Date object"},ZuluTime={render:()=>react.createElement(src_components.We,{id:"time-input-default-zulu-time",label:"What time would you like to collect your coffee?",value:"15:30:45Z"}),name:"Zulu time"},HideLabel={render:()=>react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",hideLabel:!0}),name:"Hide label"},Required={render:()=>react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",required:"true"}),name:"Required"},Disabled={render:()=>react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",disabled:!0})},Sizes={render:()=>react.createElement(react.Fragment,null,react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",size:"small"}),react.createElement("br",null),react.createElement(src_components.We,{label:"What time would you like to collect your coffee?"}),react.createElement("br",null),react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",size:"large"})),name:"Sizes"},CustomHelperText={render:()=>react.createElement(react.Fragment,null,react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",helperText:"We will have your order ready for you at this time"}),react.createElement("br",null),react.createElement(src_components.We,{label:"What time would you like to collect your coffee?"},react.createElement(components.Cu,{variant:"caption",slot:"helper-text"},react.createElement("span",null,"For special requests,",react.createElement(components.D9,{href:"#"},"contact us")," before choosing a time")))),name:"Custom helper text"},HideHelperText={render:()=>react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",helperText:"You cannot see me, but you can hear me",hideHelperText:!0}),name:"Hide helper text"},Validation={render:()=>react.createElement(react.Fragment,null,react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",validationStatus:"error",validationText:"There is a coffee shortage forecast for that time. Please choose a different time."}),react.createElement("br",null),react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",validationStatus:"warning",validationText:"Please be aware that there may be a coffee shortage at that time."}),react.createElement("br",null),react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",validationStatus:"success",validationText:"Your coffee will be available for you to collect at this time."})),name:"Custom validation"},IcChangeEmitTimePartChanges={render:()=>react.createElement(src_components.We,{emitTimePartChange:!0,label:"What time would you like to collect your coffee?",onIcChange:event=>console.log("icChange with time parts",event.detail)}),name:"IcChange with emitTimePartChange"},TimePeriod={render:()=>react.createElement(src_components.We,{label:"12-hour time",timePeriod:"12"}),name:"Time period"},HHMM={render:()=>react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",timeFormat:"HH:MM"}),name:"Time format HH:MM"},MinTime={render:()=>react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",min:"08:00:00"}),name:"Min time"},MaxTime={render:()=>react.createElement(src_components.We,{label:"What time would you like to collect your coffee?",max:"16:00:00"}),name:"Max time"},DisableTimes={render:()=>react.createElement(src_components.We,{id:"time-input-default-disable-time",label:"What time would you like to collect your coffee?",disableTimes:[{start:"08:00",end:"10:00"},"13:20"]}),name:"Disable times"},WithClearingValue={render:()=>{const[value,setValue]=(0,react.useState)("08:30:00"),handleClearValue=value=>{setValue(value)};return react.createElement(react.Fragment,null,react.createElement(src_components.We,{label:"When would you like to collect your coffee?",value}),react.createElement("br",null),react.createElement("div",{style:{display:"flex",gap:"8px"}},react.createElement(components.nP,{onClick:()=>{setValue("08:30:00")}},"Update time"),react.createElement(components.nP,{onClick:()=>handleClearValue(null)},"Set null"),react.createElement(components.nP,{onClick:()=>handleClearValue("")},"Set Empty String"),react.createElement(components.nP,{onClick:()=>handleClearValue(void 0)},"Set undefined")))},name:"With clearing value"},Playground={render:args=>react.createElement(src_components.We,{disabled:args.disabled,disableTimes:args.disableTimes,helperText:args.helperText,hideLabel:args.hideLabel,hideHelperText:args.hideHelperText,invalidTimeMessage:args.invalidTimeMessage,label:args.label,max:args.max,min:args.min,required:args.required,showClearButton:args.showClearButton,size:args.size,theme:args.theme,timeFormat:args.timeFormat,timePeriod:args.timePeriod,validationStatus:"no status"===args.validationStatus?"":args.validationStatus,validationText:args.validationText,value:args.value}),args:{disabled:!1,disableTimes:[],helperText:"Please enter a time in HH:MM:SS format.",hideLabel:!1,hideHelperText:!1,invalidTimeMessage:"Please enter a different time.",label:"What time would you like to collect your coffee?",max:"",min:"",required:!1,showClearButton:!0,size:"medium",theme:"inherit",timeFormat:"HH:MM:SS",timePeriod:"24",value:"",validationStatus:"no status",validationText:""},argTypes:{validationStatus:{options:["no status","error","success","warning"],control:{type:"inline-radio"}},size:{options:["small","medium","large"],control:{type:"inline-radio"}},theme:{options:["inherit","light","dark"],control:{type:"inline-radio"}},timeFormat:{options:["HH:MM:SS","HH:MM"],control:{type:"inline-radio"}},timePeriod:{options:["24","12"],control:{type:"inline-radio"}}},name:"Playground"},__namedExportsOrder=["Default","IcChangeEvent","WithValue","DateObject","ZuluTime","HideLabel","Required","Disabled","Sizes","CustomHelperText","HideHelperText","Validation","IcChangeEmitTimePartChanges","TimePeriod","HHMM","MinTime","MaxTime","DisableTimes","WithClearingValue","Playground"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput label="What time would you like to collect your coffee?" />,\n  name: "Default"\n}',...Default.parameters?.docs?.source},description:{story:"Use the time input component to manually type in a time in different formats.\n\nThe input `label` is the only required attribute for time input.\n\nClick the 'Component API' tab to view all the available attributes, events and slots for time input.\n\nTo use the time input component, import `@ukic/canary-web-components` into your application.\n\nTimes can be added by manually typing into the input or using the up and down arrow keys.\n\nTo move between hour, minute and second using the keyboard, provide the required values based on the placeholders or use `:`.\n\nBy default, the helper text displays the time format.",...Default.parameters?.docs?.description}}},IcChangeEvent.parameters={...IcChangeEvent.parameters,docs:{...IcChangeEvent.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput label="What time would you like to collect your coffee?" onIcChange={event => console.log("icChange", event.detail.value)} />,\n  name: "icChange event"\n}',...IcChangeEvent.parameters?.docs?.source},description:{story:"Retrieving the time input value via `icChange` returns the time as a Date object.\n\nThe event returns the Date object once hour, minute and second have been entered.",...IcChangeEvent.parameters?.docs?.description}}},WithValue.parameters={...WithValue.parameters,docs:{...WithValue.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput id="time-input-default-time-with-value" label="What time would you like to collect your coffee?" value="13:45:00" />,\n  name: "With value"\n}',...WithValue.parameters?.docs?.source},description:{story:"To set a value to the time input, pass the time value in the relevant time format.",...WithValue.parameters?.docs?.description}}},DateObject.parameters={...DateObject.parameters,docs:{...DateObject.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput id="time-input-default-time-date" label="What time would you like to collect your coffee?" value={new Date("2025-07-14T15:30:45")} />,\n  name: "Date object"\n}',...DateObject.parameters?.docs?.source},description:{story:"The time input also accepts a number of different time formats within the value attribute:\n- [Date object](#date-object)\n- [Zulu time](#zulu-time)",...DateObject.parameters?.docs?.description}}},ZuluTime.parameters={...ZuluTime.parameters,docs:{...ZuluTime.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput id="time-input-default-zulu-time" label="What time would you like to collect your coffee?" value="15:30:45Z" />,\n  name: "Zulu time"\n}',...ZuluTime.parameters?.docs?.source}}},HideLabel.parameters={...HideLabel.parameters,docs:{...HideLabel.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput label="What time would you like to collect your coffee?" hideLabel />,\n  name: "Hide label"\n}',...HideLabel.parameters?.docs?.source},description:{story:"To hide the label, set the `hideLabel` attribute to `true`. The required `label` will still be read out by screen readers.",...HideLabel.parameters?.docs?.description}}},Required.parameters={...Required.parameters,docs:{...Required.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput label="What time would you like to collect your coffee?" required="true" />,\n  name: "Required"\n}',...Required.parameters?.docs?.source},description:{story:"To set the time input as a required field, set the `required` attribute to `true`. This will add an asterisk at the end of the time input label.",...Required.parameters?.docs?.description}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput label="What time would you like to collect your coffee?" disabled />\n}',...Disabled.parameters?.docs?.source},description:{story:"Set the `disabled` attribute to `true` to prevent interaction with the time input.",...Disabled.parameters?.docs?.description}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n  <IcTimeInput label="What time would you like to collect your coffee?" size="small" />\n    <br />\n    <IcTimeInput label="What time would you like to collect your coffee?" />\n    <br />\n    <IcTimeInput label="What time would you like to collect your coffee?" size="large" />\n    </>,\n  name: "Sizes"\n}',...Sizes.parameters?.docs?.source},description:{story:"The time input is available in three different sizes:\n- `small`\n- `medium` (default)\n- `large`",...Sizes.parameters?.docs?.description}}},CustomHelperText.parameters={...CustomHelperText.parameters,docs:{...CustomHelperText.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n    <IcTimeInput label="What time would you like to collect your coffee?" helperText="We will have your order ready for you at this time" />\n    <br />\n    <IcTimeInput label="What time would you like to collect your coffee?">\n        <IcTypography variant="caption" slot="helper-text">\n        <span>\n          For special requests,\n          <IcLink href="#">contact us</IcLink> before choosing a time\n        </span>\n      </IcTypography>\n      </IcTimeInput>\n      </>,\n  name: "Custom helper text"\n}',...CustomHelperText.parameters?.docs?.source},description:{story:"Use the helper text to add additional detail for the time input. Display custom content using the `helper-text` slot.",...CustomHelperText.parameters?.docs?.description}}},HideHelperText.parameters={...HideHelperText.parameters,docs:{...HideHelperText.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput label="What time would you like to collect your coffee?" helperText="You cannot see me, but you can hear me" hideHelperText />,\n  name: "Hide helper text"\n}',...HideHelperText.parameters?.docs?.source}}},Validation.parameters={...Validation.parameters,docs:{...Validation.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n  <IcTimeInput label="What time would you like to collect your coffee?" validationStatus="error" validationText="There is a coffee shortage forecast for that time. Please choose a different time." />\n    <br />\n    <IcTimeInput label="What time would you like to collect your coffee?" validationStatus="warning" validationText="Please be aware that there may be a coffee shortage at that time." />\n    <br />\n    <IcTimeInput label="What time would you like to collect your coffee?" validationStatus="success" validationText="Your coffee will be available for you to collect at this time." />\n   </>,\n  name: "Custom validation"\n}',...Validation.parameters?.docs?.source},description:{story:"Validation on time input is set via `validationStatus` and `validationText`.\n\n`validationStatus` will set the style of the validation message. `validationStatus` accepts:\n- `error`\n- `warning`\n- `success`\n\n`validationStatus` is required for the `validationText` to appear.",...Validation.parameters?.docs?.description}}},IcChangeEmitTimePartChanges.parameters={...IcChangeEmitTimePartChanges.parameters,docs:{...IcChangeEmitTimePartChanges.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput emitTimePartChange label="What time would you like to collect your coffee?" onIcChange={event => console.log("icChange with time parts", event.detail)} />,\n  name: "IcChange with emitTimePartChange"\n}',...IcChangeEmitTimePartChanges.parameters?.docs?.source},description:{story:"The `IcChange` event is emitted by the time input every time an input field is changed.",...IcChangeEmitTimePartChanges.parameters?.docs?.description}}},TimePeriod.parameters={...TimePeriod.parameters,docs:{...TimePeriod.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput label="12-hour time" timePeriod="12" />,\n  name: "Time period"\n}',...TimePeriod.parameters?.docs?.source},description:{story:"Demonstrates the `timePeriod` prop for 12-hour selection.",...TimePeriod.parameters?.docs?.description}}},HHMM.parameters={...HHMM.parameters,docs:{...HHMM.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput label="What time would you like to collect your coffee?" timeFormat="HH:MM" />,\n  name: "Time format HH:MM"\n}',...HHMM.parameters?.docs?.source},description:{story:"Demonstrates the time format HH:MM.",...HHMM.parameters?.docs?.description}}},MinTime.parameters={...MinTime.parameters,docs:{...MinTime.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput label="What time would you like to collect your coffee?" min="08:00:00" />,\n  name: "Min time"\n}',...MinTime.parameters?.docs?.source},description:{story:"Setting min time allows you to restrict the earliest time that can be selected.\nThe value can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.",...MinTime.parameters?.docs?.description}}},MaxTime.parameters={...MaxTime.parameters,docs:{...MaxTime.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput label="What time would you like to collect your coffee?" max="16:00:00" />,\n  name: "Max time"\n}',...MaxTime.parameters?.docs?.source},description:{story:"Setting max time allows you to restrict the latest time that can be selected.\nThe value can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.",...MaxTime.parameters?.docs?.description}}},DisableTimes.parameters={...DisableTimes.parameters,docs:{...DisableTimes.parameters?.docs,source:{originalSource:'{\n  render: () => <IcTimeInput id="time-input-default-disable-time" label="What time would you like to collect your coffee?" disableTimes={[{\n    start: "08:00",\n    end: "10:00"\n  }, "13:20"]} />,\n  name: "Disable times"\n}',...DisableTimes.parameters?.docs?.source},description:{story:"To disable specific times in the time input, set the `disableTimes` prop.\nThe `disableTimes` prop accepts an array of time objects or strings.\nEach time object can have a `start` and `end` property to define a range of disabled times, or it can be a single time string to disable that specific time.\nThe time can be in any format supported as `timeFormat`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.",...DisableTimes.parameters?.docs?.description}}},WithClearingValue.parameters={...WithClearingValue.parameters,docs:{...WithClearingValue.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [value, setValue] = useState("08:30:00");\n    const handleUpdate = () => {\n      setValue("08:30:00");\n    };\n    const handleClearValue = value => {\n      setValue(value);\n    };\n    return <>\n        <IcTimeInput label="When would you like to collect your coffee?" value={value} />\n        <br />\n        <div style={{\n        display: "flex",\n        gap: "8px"\n      }}>\n          <IcButton onClick={() => handleUpdate()}>Update time</IcButton>\n          <IcButton onClick={() => handleClearValue(null)}>Set null</IcButton>\n          <IcButton onClick={() => handleClearValue("")}>\n            Set Empty String\n          </IcButton>\n          <IcButton onClick={() => handleClearValue(undefined)}>\n            Set undefined\n          </IcButton>\n        </div>\n      </>;\n  },\n  name: "With clearing value"\n}',...WithClearingValue.parameters?.docs?.source},description:{story:"The time input can be cleared by setting the the value attribute to one of the following:\n- empty string\n- `null`\n- `undefined`",...WithClearingValue.parameters?.docs?.description}}},Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:'{\n  render: args => {\n    return <IcTimeInput disabled={args.disabled} disableTimes={args.disableTimes} helperText={args.helperText} hideLabel={args.hideLabel} hideHelperText={args.hideHelperText} invalidTimeMessage={args.invalidTimeMessage} label={args.label} max={args.max} min={args.min} required={args.required} showClearButton={args.showClearButton} size={args.size} theme={args.theme} timeFormat={args.timeFormat} timePeriod={args.timePeriod} validationStatus={args.validationStatus === "no status" ? "" : args.validationStatus} validationText={args.validationText} value={args.value} />;\n  },\n  args: defaultArgs,\n  argTypes: {\n    validationStatus: {\n      options: ["no status", "error", "success", "warning"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    size: {\n      options: ["small", "medium", "large"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    theme: {\n      options: ["inherit", "light", "dark"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    timeFormat: {\n      options: ["HH:MM:SS", "HH:MM"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    timePeriod: {\n      options: ["24", "12"],\n      control: {\n        type: "inline-radio"\n      }\n    }\n  },\n  name: "Playground"\n}',...Playground.parameters?.docs?.source},description:{story:'Go to the <ic-link href="/?path=/story/react-components-time-input--playground">separate page for the playground example</ic-link> to view the prop controls.',...Playground.parameters?.docs?.description}}}}}]);