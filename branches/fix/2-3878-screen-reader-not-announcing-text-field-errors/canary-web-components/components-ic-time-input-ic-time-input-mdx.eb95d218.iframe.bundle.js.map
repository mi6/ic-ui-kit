{"version":3,"file":"components-ic-time-input-ic-time-input-mdx.eb95d218.iframe.bundle.js","mappings":";;;AAiCA;;;;;;;;AAkBA;;;;;AAaA;;;;;;;;;AAmBA;;;;;;;;;;;AAgBA;;;AAWA;;;AAWA;;;AAmBA;;;;;;;;;;;;AAcA;;;;;;;;;;;;AAoBA;;;;AASA;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;AAiBA;;AAUA;;;AAWA;;;AAYA;;;AAYA;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA","sources":["webpack://@ukic/canary-web-components/./src/components/ic-time-input/ic-time-input.stories.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { html } from \"lit-html\";\nimport readme from \"./readme.md\";\n\nexport default {\n  title: \"Web Components/Time Input\",\n  component: \"ic-time-input\",\n  parameters: {\n    componentAPI: {\n      data: readme,\n    },\n  },\n};\n\n/**\n * Use the time input component to manually type in a time in different formats.\n *\n * The input `label` is the only required attribute for time input.\n *\n * Click the 'Component API' tab to view all the available attributes, events and slots for time input.\n *\n * To use the time input component, import `@ukic/canary-web-components` into your application.\n *\n * Times can be added by manually typing into the input or using the up and down arrow keys.\n *\n * To move between hour, minute and second using the keyboard, provide the required values based on the placeholders or use `:`.\n *\n * By default, the helper text displays the time format.\n */\nexport const Default = {\n  render: () => html`<ic-time-input\n    label=\"What time would you like to collect your coffee?\"\n  ></ic-time-input>`,\n  name: \"Default\",\n};\n\n/**\n * Retrieving the time input value via `icChange` returns the time as a Date object.\n *\n * The event returns the Date object once hour, minute and second have been entered.\n */\nexport const IcChangeEvent = {\n  render: () => html`<ic-time-input\n      label=\"What time would you like to collect your coffee?\"\n    ></ic-time-input>\n    <script>\n      var timeInput = document.querySelector(\"ic-time-input\");\n      timeInput.addEventListener(\"icChange\", function (event) {\n        console.log(event.detail.value, event.detail.utcValue);\n      });\n    </script>`,\n  name: \"icChange event\",\n};\n\n/**\n * To set a value to the time input, pass the time value in the relevant time format.\n */\nexport const WithValue = {\n  render: () => html`<ic-time-input\n    id=\"time-input-default-time-with-value\"\n    label=\"What time would you like to collect your coffee?\"\n    time-format=\"HH:MM:SS\"\n    value=\"13:45:00\"\n  ></ic-time-input>`,\n  name: \"With value\",\n};\n\n/**\n * The time input also accepts a number of different time formats within the value attribute:\n * - [Date object](#date-object)\n * - [Zulu time](#zulu-time)\n */\nexport const DateObject = {\n  render: () => html`<ic-time-input\n      id=\"time-input-default-time-date\"\n      label=\"What time would you like to collect your coffee?\"\n    ></ic-time-input>\n    <script>\n      var timeInputDate = document.querySelector(\n        \"#time-input-default-time-date\"\n      );\n      timeInputDate.value = new Date(\"2025-07-14T15:30:45\");\n    </script>`,\n  name: \"Date object\",\n};\n\nexport const ZuluTime = {\n  render: () => html`<div>\n      <ic-time-input\n        id=\"time-input-default-zulu-time\"\n        label=\"What time would you like to collect your coffee?\"\n      ></ic-time-input>\n    </div>\n    <script>\n      var timeInputDate = document.querySelector(\n        \"#time-input-default-zulu-time\"\n      );\n      timeInputDate.value = \"15:30:45Z\";\n    </script>`,\n  name: \"Zulu time\",\n};\n\n/**\n * To set the time input as a required field, set the `required` attribute to `true`. This will add an asterisk at the end of the time input label.\n */\nexport const Required = {\n  render: () => html`<ic-time-input\n    label=\"What time would you like to collect your coffee?\"\n    required=\"true\"\n  ></ic-time-input>`,\n  name: \"Required\",\n};\n\n/**\n * To hide the label, set the `hide-label` attribute to `true`. The required `label` will still be read out by screen readers.\n */\nexport const HideLabel = {\n  render: () => html`<ic-time-input\n    label=\"What time would you like to collect your coffee?\"\n    hide-label=\"true\"\n  ></ic-time-input>`,\n  name: \"Hide label\",\n};\n\n/**\n * Set the `disabled` attribute to `true` to prevent interaction with the time input.\n */\nexport const Disabled = {\n  render: () => html`<ic-time-input\n    label=\"What time would you like to collect your coffee?\"\n    disabled=\"true\"\n  ></ic-time-input>`,\n};\n\n/**\n * The time input is available in three different sizes:\n * - `small`\n * - `medium` (default)\n * - `large`\n */\nexport const Sizes = {\n  render: () => html`<ic-time-input\n      label=\"What time would you like to collect your coffee?\"\n      size=\"small\"\n    ></ic-time-input>\n    <br />\n    <ic-time-input\n      label=\"What time would you like to collect your coffee?\"\n    ></ic-time-input>\n    <br />\n    <ic-time-input\n      label=\"What time would you like to collect your coffee?\"\n      size=\"large\"\n    ></ic-time-input>`,\n  name: \"Sizes\",\n};\n\n/**\n * Use the helper text to add additional detail for the time input. Display custom content using the `helper-text` slot.\n */\nexport const CustomHelperText = {\n  render: () => html`<ic-time-input\n      label=\"What time would you like to collect your coffee?\"\n      helper-text=\"We will have your order ready for you at this time\"\n    ></ic-time-input>\n    <br />\n    <ic-time-input label=\"What time would you like to collect your coffee?\"\n      ><ic-typography variant=\"caption\" slot=\"helper-text\">\n        <span>\n          For special requests,\n          <ic-link href=\"#\">contact us</ic-link> before choosing a time\n        </span>\n      </ic-typography></ic-time-input\n    >`,\n  name: \"Custom helper text\",\n};\n\nexport const HideHelperText = {\n  render: () => html`<ic-time-input\n    label=\"What time would you like to collect your coffee?\"\n    helper-text=\"You cannot see me, but you can hear me\"\n    hide-helper-text=\"true\"\n  ></ic-time-input>`,\n  name: \"Hide helper text\",\n};\n\n/**\n * Validation on time input is set via `validation-status` and `validation-text`.\n *\n * `validation-status` will set the style of the validation message. `validation-status` accepts:\n * - `error`\n * - `warning`\n * - `success`\n *\n * `validation-status` is required for the `validation-text` to appear.\n */\nexport const Validation = {\n  render: () => html`<ic-time-input\n      label=\"What time would you like to collect your coffee?\"\n      validation-status=\"error\"\n      validation-text=\"There is a coffee shortage forecast for that time. Please choose a different time.\"\n    ></ic-time-input>\n    <br />\n    <ic-time-input\n      label=\"What time would you like to collect your coffee?\"\n      validation-status=\"warning\"\n      validation-text=\"Please be aware that there may be a coffee shortage at that time.\"\n    ></ic-time-input>\n    <br />\n    <ic-time-input\n      label=\"What time would you like to collect your coffee?\"\n      validation-status=\"success\"\n      validation-text=\"Your coffee will be available for you to collect at this time.\"\n    ></ic-time-input>`,\n  name: \"Custom validation\",\n};\n\n/**\n * The `IcChange` event is emitted by the time input every time an input field is changed.\n */\nexport const IcChangeEmitTimePartChanges = {\n  render: () => html`<ic-time-input\n      emit-time-part-change=\"true\"\n      label=\"What time would you like to collect your coffee?\"\n    ></ic-time-input>\n    <script>\n      var timeInput = document.querySelector(\"ic-time-input\");\n      timeInput.addEventListener(\"icChange\", function (event) {\n        console.log(\"icChange\", event.detail);\n      });\n    </script>`,\n  name: \"IcChange with emitTimePartChange\",\n};\n\n/**\n * Demonstrates the `time-period` prop for 12-hour and 24-hour time selection.\n */\nexport const TimePeriod = {\n  render: () => html`\n    <ic-time-input label=\"12-hour time\" time-period=\"12\"></ic-time-input>\n  `,\n  name: \"Time period\",\n};\n\n/**\n * Demonstrates the time format HH:MM.\n */\nexport const HHMM = {\n  render: () => html`<ic-time-input\n    label=\"What time would you like to collect your coffee?\"\n    time-format=\"HH:MM\"\n  ></ic-time-input>`,\n  name: \"Time format HH:MM\",\n};\n\n/**\n * Setting min time allows you to restrict the earliest time that can be selected.\n * The value can be in any format supported as `time-format`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.\n */\nexport const MinTime = {\n  render: () => html`<ic-time-input\n    label=\"What time would you like to collect your coffee?\"\n    min=\"08:00:00\"\n  ></ic-time-input>`,\n  name: \"Min time\",\n};\n\n/**\n * Setting max time allows you to restrict the latest time that can be selected.\n * The value can be in any format supported as `time-format`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.\n */\nexport const MaxTime = {\n  render: () => html`<ic-time-input\n    label=\"What time would you like to collect your coffee?\"\n    max=\"16:00:00\"\n  ></ic-time-input>`,\n  name: \"Max time\",\n};\n\n/**\n * To disable specific times in the time input, set the `disable-times` prop.\n * The `disable-times` prop accepts an array of time objects or strings.\n * Each time object can have a `start` and `end` property to define a range of disabled times, or it can be a single time string to disable that specific time.\n * The time can be in any format supported as `time-format`, in ISO 8601 time string format (`HH:MM:SS`) or as a JavaScript `Date` object.\n */\nexport const DisableTimes = {\n  render: () => html`<div>\n      <ic-time-input\n        id=\"time-input-default-disable-time\"\n        label=\"What time would you like to collect your coffee?\"\n      ></ic-time-input>\n    </div>\n    <script>\n      var timeInputDate = document.querySelector(\n        \"#time-input-default-disable-time\"\n      );\n      timeInputDate.disableTimes = [{ start: \"08:00\", end: \"10:00\" }, \"13:20\"];\n    </script>`,\n  name: \"Disable times\",\n};\n\n/**\n * The time input can be cleared by setting the the value attribute to one of the following:\n * - empty string\n * - `null`\n * - `undefined`\n */\nexport const WithClearingValue = {\n  render: () => html`<ic-time-input\n      id=\"time-input-clear-value\"\n      label=\"When would you like to collect your coffee?\"\n      value=\"08:30:00\"\n    ></ic-time-input>\n    <br />\n    <ic-button id=\"update\">Update time</ic-button>\n    <ic-button id=\"null-btn\">set null</ic-button>\n    <ic-button id=\"empty-btn\">set empty string</ic-button>\n    <ic-button id=\"undef-btn\">set undefined</ic-button>\n    <script>\n      var input = document.querySelector(\"#time-input-clear-value\");\n      var btn = document.querySelector(\"#update\");\n      btn.addEventListener(\"click\", () => {\n        input.value = \"08:30:00\";\n      });\n      var btn2 = document.querySelector(\"#null-btn\");\n      btn2.addEventListener(\"click\", () => {\n        input.value = null;\n      });\n      var btn3 = document.querySelector(\"#empty-btn\");\n      btn3.addEventListener(\"click\", () => {\n        input.value = \"\";\n      });\n      var btn4 = document.querySelector(\"#undef-btn\");\n      btn4.addEventListener(\"click\", () => {\n        input.value = undefined;\n      });\n    </script>`,\n  name: \"With clearing value\",\n};\n"],"names":[],"sourceRoot":""}