{"version":3,"file":"components-ic-date-picker-ic-date-picker-stories.d63a0ff7.iframe.bundle.js","mappings":";;;AAoQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sources":["webpack://@ukic/canary-web-components/./src/components/ic-date-picker/ic-date-picker.stories.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport readme from \"./readme.md\";\nimport { html } from \"lit-html\";\nimport {\n  CustomHelperText,\n  DateFormats,\n  Default,\n  Disabled,\n  DisableFuture,\n  DisablePast,\n  HideButtons,\n  HideOutsideMonth,\n  IcChangeDate,\n  IcChangeDateEmitDatePartChanges,\n  JSDates,\n  MaxMin,\n  MaxWidth,\n  OpenAbove,\n  OpenAt,\n  Sizes,\n  Value,\n  WeekStart,\n  WorkingWeek,\n} from \"./story-data\";\n\nexport default {\n  title: \"Web Components/Date Picker\",\n  component: \"ic-date-picker\",\n  parameters: {\n    componentAPI: {\n      data: readme,\n    },\n  },\n};\n\nconst INLINE_RADIO = \"inline-radio\";\n\n/**\n * Use a date picker to select a single date where visualising that date could be useful.\n *\n * There is one required prop for a date picker:\n * - label: `string`\n *\n * Click the 'Component API' tab to view all the available props and events for date pickers.\n *\n * To use the date picker component, import `@ukic/canary-web-components` into your application.\n *\n * The default date picker uses the date format of `DD/MM/YYYY`.\n */\nexport const DefaultExample = {\n  render: () => Default(),\n  name: \"Default\",\n  height: \"540px\",\n};\n\n/**\n * Set the size of the date picker by using the `size` prop. This prop takes the values `small`, `medium` (default) or `large`. Depending on the chosen size, the prop will apply styling to increase or decrease the amount of spacing within the component.\n */\nexport const SizesExample = {\n  render: () => Sizes(),\n  name: \"Sizes\",\n  height: \"790px\",\n};\n\n/**\n * Set the size of the input field by using the `--input-width` CSS custom property. The picker will grow, but not exceed its maximum supported width.\n */\nexport const MaxWidthExample = {\n  render: () => MaxWidth(),\n  name: \"Max width\",\n  height: \"790px\",\n};\n\n/**\n * Use the helper text to add additional detail for the date input. Display custom content using the `helper-text` slot.\n */\nexport const CustomHelperTextExample = {\n  render: () => CustomHelperText(),\n  name: \"Custom helper text\",\n  height: \"790px\",\n};\n\n/**\n * Disable the date picker and prevent user interaction by using the `disabled` prop.\n */\nexport const DisabledExample = {\n  render: () => Disabled(),\n  name: \"Disabled\",\n  height: \"100px\",\n};\n\n/**\n * The `date-format` prop determines how dates are displayed. The supported formats are `DD/MM/YYYY`, `MM/DD/YYYY` or `YYYY/MM/DD`.\n */\nexport const DateFormatsExample = {\n  render: () => DateFormats(),\n  name: \"Date formats\",\n  height: \"750px\",\n};\n\n/**\n * The `value` prop sets the date in the input field. The value can be in any format supported by the `date-format` prop, in ISO 8601 date string format (yyyy-mm-dd) or as a JavaScript Date object.\n */\nexport const ValueExample = {\n  render: () => Value(),\n  name: \"Value\",\n  height: \"540px\",\n};\n\n/**\n * If no `value` is set, the `open-at-date` prop can be used to specify the date in view when the calendar view is opened. If not set to a value, the calendar will default to showing the current date.\n *\n * The supported formats are the same as for the `value` prop.\n */\nexport const OpenAtDate = {\n  render: () => OpenAt(),\n  name: \"Open at date\",\n  height: \"540px\",\n};\n\n/**\n * The first day of the week can be changed by setting the `start-of-week` prop. This is a numeric value where 0 = Sunday, 1 = Monday, etc up to 6 = Saturday.\n */\nexport const StartOfWeek = {\n  render: () => WeekStart(),\n  name: \"Start of week\",\n  height: \"540px\",\n};\n\n/**\n * Specific days of the week can be disabled from selection by setting the `disable-days` prop. The value can be set as an array of numeric values where where 0 = Sunday, 1 = Monday, etc up to 6 = Saturday.\n */\nexport const DisableDaysOfWeek = {\n  render: () => WorkingWeek(),\n  name: \"Disable days of week\",\n  height: \"540px\",\n};\n\n/**\n * The `max` and `min` props can be used to limit the range of dates available for selection. Values can be in any format supported by the `date-format` prop, in ISO 8601 date string format (yyyy-mm-dd) or as a JavaScript Date object.\n */\nexport const MinMax = {\n  render: () => MaxMin(),\n  name: \"Min and max\",\n  height: \"540px\",\n};\n\n/**\n * Dates before today can be disabled with the `disable-past` prop.\n */\nexport const DisablePastExample = {\n  render: () => DisablePast(),\n  name: \"Disable dates in past\",\n  height: \"540px\",\n};\n\n/**\n * Dates after today can be disabled with the `disable-future` prop.\n */\nexport const DisableFutureExample = {\n  render: () => DisableFuture(),\n  name: \"Disable dates in future\",\n  height: \"540px\",\n};\n\n/**\n * Days outside of the current month in view can be hidden by setting the `show-days-outside-month` prop to `false`.\n */\nexport const DaysOutsideMonthHidden = {\n  render: () => HideOutsideMonth(),\n  name: \"Days outside month hidden\",\n  height: \"540px\",\n};\n\n/**\n * The \"Go to today\" and \"Clear\" buttons can be hidden from the calendar view by setting the `show-picker-today-button` and `show-picker-clear-button` props to `false`.\n */\nexport const ButtonsHidden = {\n  render: () => HideButtons(),\n  name: \"Today & clear buttons hidden\",\n  height: \"480px\",\n};\n\n/**\n * Any prop that accepts a date value can be set to a Javascript Date object. The following example sets the `value`, `max` and `min` props.\n */\nexport const JavascriptDates = {\n  render: () => JSDates(),\n  name: \"JavaScript dates\",\n  height: \"500px\",\n};\n\n/**\n * The `IcChange` event is emitted by the date picker when the selected date changes.\n */\nexport const IcChangeEvent = {\n  render: () => IcChangeDate(),\n  name: \"IcChange event\",\n  height: \"540px\",\n};\n\n/**\n * The `IcChange` event is emitted by the date picker every time an input field is changed.\n */\nexport const IcChangeEventEmitDatePartChange = {\n  render: () => IcChangeDateEmitDatePartChanges(),\n  name: \"IcChange event with emitDatePartChange\",\n  height: \"540px\",\n};\n\n/**\n * Margin added so the calendar opens above the input\n */\nexport const CalendarOpensAboveInput = {\n  render: () => OpenAbove(),\n  name: \"Calendar opens above input\",\n  height: \"540px\",\n};\n\nconst defaultArgs = {\n  [\"date-format\"]: \"DD/MM/YYYY\",\n  disabled: false,\n  [\"disable-days\"]: [],\n  [\"disable-days-message\"]: \"This day is not available\",\n  [\"disable-future\"]: false,\n  [\"disable-future-message\"]: \"This date is in the future\",\n  [\"disable-past\"]: false,\n  [\"disable-past-message\"]: \"This date is in the past\",\n  [\"helper-text\"]: \"Choose a date\",\n  [\"hide-label\"]: false,\n  [\"invalid-date-message\"]: \"Invalid date\",\n  label: \"When would you like to collect your coffee?\",\n  max: \"\",\n  min: \"\",\n  required: false,\n  [\"show-days-outside-month\"]: true,\n  [\"show-picker-clear-button\"]: true,\n  [\"show-picker-today-button\"]: true,\n  size: \"medium\",\n  [\"start-of-week\"]: 1,\n  theme: \"inherit\",\n  [\"validation-status\"]: \"\",\n  [\"validation-text\"]: \"\",\n  value: \"\",\n};\n\nconst weekDays = {\n  Sunday: 0,\n  Monday: 1,\n  Tuesday: 2,\n  Wednesday: 3,\n  Thursday: 4,\n  Friday: 5,\n  Saturday: 6,\n};\n\nexport const Playground = {\n  render: (args) =>\n    html`<ic-date-picker\n      id=\"playground\"\n      date-format=${args[\"date-format\"]}\n      disabled=${args.disabled}\n      disable-days=${JSON.stringify(args[\"disable-days\"])}\n      disable-days-message=${args[\"disable-days-message\"]}\n      disable-future=${args[\"disable-future\"]}\n      disable-future-message=${args[\"disable-future-message\"]}\n      disable-past=${args[\"disable-past\"]}\n      disable-past-message=${args[\"disable-past-message\"]}\n      helper-text=${args[\"helper-text\"]}\n      hide-helper-text=${args[\"hide-helper-text\"]}\n      hide-label=${args[\"hide-label\"]}\n      invalid-date-message=${args[\"invalid-date-message\"]}\n      label=${args.label}\n      max=${args.max}\n      min=${args.min}\n      open-at-date=${args[\"open-at-date\"]}\n      required=${args.required}\n      show-days-outside-month=${args[\"show-days-outside-month\"]}\n      show-picker-clear-button=${args[\"show-picker-clear-button\"]}\n      show-picker-today-button=${args[\"show-picker-today-button\"]}\n      size=${args.size}\n      start-of-week=${args[\"start-of-week\"]}\n      theme=${args.theme}\n      validation-status=${args[\"validation-status\"]}\n      validation-text=${args[\"validation-text\"]}\n      value=${args.value}\n    ></ic-date-picker>`,\n  name: \"Playground\",\n  args: defaultArgs,\n  argTypes: {\n    [\"date-format\"]: {\n      options: [\"DD/MM/YYYY\", \"MM/DD/YYYY\", \"YYYY/MM/DD\"],\n      control: {\n        type: INLINE_RADIO,\n      },\n    },\n    size: {\n      control: INLINE_RADIO,\n      options: [\"small\", \"medium\", \"large\"],\n    },\n    [\"start-of-week\"]: {\n      options: Object.keys(weekDays),\n      mapping: weekDays,\n      control: {\n        type: INLINE_RADIO,\n        labels: {\n          Sunday: \"Sunday\",\n          Monday: \"Monday\",\n          Tuesday: \"Tuesday\",\n          Wednesday: \"Wednesday\",\n          Thursday: \"Thursday\",\n          Friday: \"Friday\",\n          Saturday: \"Saturday\",\n        },\n      },\n    },\n    theme: {\n      control: INLINE_RADIO,\n      options: [\"inherit\", \"light\", \"dark\"],\n    },\n    [\"validation-status\"]: {\n      options: [\"\", \"error\", \"success\", \"warning\"],\n      control: {\n        type: INLINE_RADIO,\n      },\n    },\n  },\n};\n"],"names":[],"sourceRoot":""}