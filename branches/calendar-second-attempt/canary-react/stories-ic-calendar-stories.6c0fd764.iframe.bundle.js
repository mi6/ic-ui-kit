"use strict";(self.webpackChunk_ukic_canary_react=self.webpackChunk_ukic_canary_react||[]).push([[8842],{"./src/stories/ic-calendar.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ButtonsHidden:()=>ButtonsHidden,DateFormats:()=>DateFormats,DaysOutsideMonthHidden:()=>DaysOutsideMonthHidden,Default:()=>Default,DisableDaysOfWeek:()=>DisableDaysOfWeek,DisableFuture:()=>DisableFuture,DisablePast:()=>DisablePast,IcChangeEvent:()=>IcChangeEvent,JavascriptDates:()=>JavascriptDates,MinMax:()=>MinMax,OpenAtDate:()=>OpenAtDate,Playground:()=>Playground,StartOfWeek:()=>StartOfWeek,Value:()=>Value,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ic_calendar_stories});var react=__webpack_require__("./node_modules/react/index.js"),components=__webpack_require__("./src/components.ts"),dist_components=__webpack_require__("../react/dist/components.js");const ic_calendar_stories={title:"React Components/Calendar",component:components.bQ,parameters:{componentAPI:{data:'# ic-calendar\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property               | Attribute                 | Description                                                                                                                                                                                                                                            | Type                                                                                                                                                      | Default             |\n| ---------------------- | ------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- |\n| `dateFormat`           | `date-format`             | The format in which the date will be displayed.                                                                                                                                                                                                        | `"DD/MM/YYYY" \\| "MM/DD/YYYY" \\| "YYYY/MM/DD"`                                                                                                            | `"DD/MM/YYYY"`      |\n| `disableDays`          | --                        | The days of the week to disable.                                                                                                                                                                                                                       | `IcWeekDays[] \\| undefined`                                                                                                                               | `[]`                |\n| `disableFuture`        | `disable-future`          | If `true`, dates in the future are not allowed.                                                                                                                                                                                                        | `boolean \\| undefined`                                                                                                                                    | `false`             |\n| `disablePast`          | `disable-past`            | If `true`, dates in the past are not allowed.                                                                                                                                                                                                          | `boolean \\| undefined`                                                                                                                                    | `false`             |\n| `disabled`             | `disabled`                | If `true`, the disabled state will be set.                                                                                                                                                                                                             | `boolean`                                                                                                                                                 | `false`             |\n| `max`                  | `max`                     | The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disableFuture` is set to `true`. | `Date \\| string`                                                                                                                                          | `""`                |\n| `min`                  | `min`                     | The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disablePast` is set to `true`. | `Date \\| string`                                                                                                                                          | `""`                |\n| `openAtDate`           | `open-at-date`            | The date visible when the calendar opens. Used if no date is currently selected. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.                             | `Date \\| string`                                                                                                                                          | `""`                |\n| `showClearButton`      | `show-clear-button`       | If `true`, the `Clear` button on the calendar will be visible.                                                                                                                                                                                         | `boolean \\| undefined`                                                                                                                                    | `true`              |\n| `showDaysOutsideMonth` | `show-days-outside-month` | If `true`, days outside the current month will be visible in the calendar.                                                                                                                                                                             | `boolean \\| undefined`                                                                                                                                    | `true`              |\n| `showTodayButton`      | `show-today-button`       | If `true`, the `Go to today` button on the calendar will be visible.                                                                                                                                                                                   | `boolean \\| undefined`                                                                                                                                    | `true`              |\n| `size`                 | `size`                    | The size of the calendar to be displayed.                                                                                                                                                                                                              | `"large" \\| "medium" \\| "small"`                                                                                                                          | `"medium"`          |\n| `startOfWeek`          | `start-of-week`           | The first day of the week. `0` for Sunday, `1` for Monday, etc. Default is Monday.                                                                                                                                                                     | `IcWeekDays.Friday \\| IcWeekDays.Monday \\| IcWeekDays.Saturday \\| IcWeekDays.Sunday \\| IcWeekDays.Thursday \\| IcWeekDays.Tuesday \\| IcWeekDays.Wednesday` | `IcWeekDays.Monday` |\n| `theme`                | `theme`                   | Sets the calendar to the dark or light theme colors. "inherit" will set the color based on the system settings or ic-theme component.                                                                                                                  | `"dark" \\| "inherit" \\| "light" \\| undefined`                                                                                                             | `"inherit"`         |\n| `value`                | `value`                   | The value of the calendar and the date visible when the calendar opens. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.                                      | `Date \\| null \\| string \\| undefined`                                                                                                                     | `""`                |\n\n\n## Events\n\n| Event                        | Description                         | Type                                                                                                                                               |\n| ---------------------------- | ----------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `icCalendarClearButtonClick` | Emitted when the value has changed. | `CustomEvent<void>`                                                                                                                                |\n| `icCalendarDaySelect`        | Emitted when a day is selected.     | `CustomEvent<void>`                                                                                                                                |\n| `icCalendarMonthSelect`      | Emitted when a month is selected.   | `CustomEvent<void>`                                                                                                                                |\n| `icCalendarYearSelect`       | Emitted when a year is selected.    | `CustomEvent<void>`                                                                                                                                |\n| `icChange`                   | Emitted when the value has changed. | `CustomEvent<{ value: Date \\| null; dateObject: { day: string \\| null; month: string \\| null; year: string \\| null; }; utcValue: Date \\| null; }>` |\n\n\n## CSS Custom Properties\n\n| Name                    | Description          |\n| ----------------------- | -------------------- |\n| `--ic-z-index-calendar` | z-index of calendar. |\n\n\n## Dependencies\n\n### Used by\n\n - [ic-date-picker](../ic-date-picker)\n\n### Depends on\n\n- ic-button\n- ic-typography\n\n### Graph\n```mermaid\ngraph TD;\n  ic-calendar --\x3e ic-button\n  ic-calendar --\x3e ic-typography\n  ic-button --\x3e ic-typography\n  ic-button --\x3e ic-loading-indicator\n  ic-button --\x3e ic-tooltip\n  ic-loading-indicator --\x3e ic-typography\n  ic-tooltip --\x3e ic-typography\n  ic-date-picker --\x3e ic-calendar\n  style ic-calendar fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n'}}},Default={render:()=>{const[selectedDate,setSelectedDate]=(0,react.useState)(null);return react.createElement(react.Fragment,null,react.createElement(components.bQ,{onIcChange:ev=>setSelectedDate(ev.detail.selectedDate)}),react.createElement("span",null,react.createElement(dist_components.Cu,{style:{top:"420px"}},selectedDate?`Selected date: ${selectedDate}`:"No date selected")))},name:"Default"},Value={render:()=>react.createElement(components.bQ,{id:"value",value:"01/01/2000"}),name:"Value"},OpenAtDate={render:()=>react.createElement(components.bQ,{id:"open-at-date",openAtDate:"31/12/1999"}),name:"Open at date"},MinMax={render:()=>react.createElement(components.bQ,{id:"min-max",min:"01/08/2008",max:"31/08/2008"}),name:"Min & max"},JavascriptDates={render:()=>react.createElement(components.bQ,{id:"js-dates",value:new Date(2024,6,1),min:new Date(2024,6,31),max:new Date(2024,6,31)}),name:"JavaScript dates"},DateFormats={render:()=>react.createElement(components.bQ,{id:"date-formats",dateFormat:"MM/DD/YYYY"}),name:"Date formats"},StartOfWeek={render:()=>react.createElement(components.bQ,{id:"start-of-week",startOfWeek:6}),name:"Start of week"},DisableDaysOfWeek={render:()=>react.createElement(components.bQ,{id:"disable-weekends",disableDays:[0,6]}),name:"Disable days of the week"},DisablePast={render:()=>react.createElement(components.bQ,{id:"disable-past",disablePast:!0}),name:"Disable dates in past"},DisableFuture={render:()=>react.createElement(components.bQ,{id:"disable-future",disableFuture:!0}),name:"Disable dates in future"},DaysOutsideMonthHidden={render:()=>react.createElement(components.bQ,{id:"days-outside-month-hidden",showDaysOutsideMonth:!1}),name:"Days outside month hidden"},ButtonsHidden={render:()=>react.createElement(components.bQ,{id:"buttons-hidden",showTodayButton:!1,showClearButton:!1}),name:"Today & clear buttons hidden"},IcChangeEvent={render:()=>(react.useEffect((()=>{const handler=event=>{event.detail.value?(document.getElementById("selected-date-display").textContent="Selected date: "+event.detail.value,document.getElementById("icchange-event-display").innerHTML=`icChange event emitted: {<br>\n            value: ${event.detail.value},<br>\n            utcValue: ${event.detail.utcValue},<br>\n            dateObject: {day: ${event.detail.dateObject.day}, month: ${event.detail.dateObject.month}, year: ${event.detail.dateObject.year}}<br>\n          }`):(document.getElementById("selected-date-display").textContent="No date selected",document.getElementById("icchange-event-display").textContent="No icChange event emitted")};return document.addEventListener("icChange",handler),()=>{document.removeEventListener("icChange",handler)}}),[]),react.createElement("div",{style:{display:"flex",flexDirection:"column"}},react.createElement(components.bQ,{id:"ic-change-event"}),react.createElement("span",null,react.createElement(dist_components.Cu,{id:"selected-date-display",style:{top:"420px"}},"No date selected"),react.createElement(dist_components.Cu,{id:"icchange-event-display",style:{top:"428px"}},"No icChange event emitted")))),name:"IcChange event"},weekDays={Sunday:0,Monday:1,Tuesday:2,Wednesday:3,Thursday:4,Friday:5,Saturday:6},Playground={render:args=>react.createElement(components.bQ,args),name:"Playground",args:{dateFormat:"DD/MM/YYYY",disabled:!1,disableDays:[],disableFuture:!1,disablePast:!1,max:"",min:"",openAtDate:"",showClearButton:!0,showDaysOutsideMonth:!0,showTodayButton:!0,size:"medium",startOfWeek:1,theme:"inherit",value:""},argTypes:{dateFormat:{options:["DD/MM/YYYY","MM/DD/YYYY","YYYY/MM/DD"],control:{type:"inline-radio"}},size:{options:["small","medium","large"],control:{type:"inline-radio"}},startOfWeek:{options:Object.keys(weekDays),mapping:weekDays,control:{type:"inline-radio",labels:{Sunday:"Sunday",Monday:"Monday",Tuesday:"Tuesday",Wednesday:"Wednesday",Thursday:"Thursday",Friday:"Friday",Saturday:"Saturday"}}},theme:{options:["inherit","light","dark"],control:{type:"inline-radio"}}}},__namedExportsOrder=["Default","Value","OpenAtDate","MinMax","JavascriptDates","DateFormats","StartOfWeek","DisableDaysOfWeek","DisablePast","DisableFuture","DaysOutsideMonthHidden","ButtonsHidden","IcChangeEvent","Playground"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [selectedDate, setSelectedDate] = useState(null);\n    return <>\n        <IcCalendar onIcChange={ev => setSelectedDate(ev.detail.selectedDate)} />\n        <span>\n          <IcTypography style={{\n          top: "420px"\n        }}>\n            {selectedDate ? `Selected date: ${selectedDate}` : "No date selected"}\n          </IcTypography>\n        </span>\n      </>;\n  },\n  name: "Default"\n}',...Default.parameters?.docs?.source},description:{story:"Use a calendar to select a single date where visualising that date could be useful.\n\nClick the 'Component API' tab to view all the available props and events for calendars.\n\nTo use the calendar component, import `@ukic/canary-web-components` into your application.\n\nThe default calendar uses the date format of `DD/MM/YYYY`.",...Default.parameters?.docs?.description}}},Value.parameters={...Value.parameters,docs:{...Value.parameters?.docs,source:{originalSource:'{\n  render: () => <IcCalendar id="value" value="01/01/2000" />,\n  name: "Value"\n}',...Value.parameters?.docs?.source},description:{story:"The `value` prop sets the selected date in the calendar. The value can be in any format supported by the `date-format` prop, in ISO 8601 date string format (yyyy-mm-dd) or as a JavaScript Date object.",...Value.parameters?.docs?.description}}},OpenAtDate.parameters={...OpenAtDate.parameters,docs:{...OpenAtDate.parameters?.docs,source:{originalSource:'{\n  render: () => <IcCalendar id="open-at-date" openAtDate="31/12/1999" />,\n  name: "Open at date"\n}',...OpenAtDate.parameters?.docs?.source},description:{story:"The `openAtDate` prop can be used to specify the date in view. This prop can be in any format supported by the `dateFormat` prop, in ISO 8601 date string format (yyyy-mm-dd) or as a JavaScript Date object.\n\nIf the `value` prop is set, the date set using the `value` prop will take precedence and the calendar will open to that date instead.",...OpenAtDate.parameters?.docs?.description}}},MinMax.parameters={...MinMax.parameters,docs:{...MinMax.parameters?.docs,source:{originalSource:'{\n  render: () => <IcCalendar id="min-max" min="01/08/2008" max="31/08/2008" />,\n  name: "Min & max"\n}',...MinMax.parameters?.docs?.source},description:{story:"The `min` and `max` props set the minimum and maximum selectable dates in the calendar. The values can be in any format supported by the `date-format` prop, in ISO 8601 date string format (yyyy-mm-dd) or as a JavaScript Date object.",...MinMax.parameters?.docs?.description}}},JavascriptDates.parameters={...JavascriptDates.parameters,docs:{...JavascriptDates.parameters?.docs,source:{originalSource:'{\n  render: () => <IcCalendar id="js-dates" value={new Date(2024, 6, 1)} min={new Date(2024, 6, 31)} max={new Date(2024, 6, 31)} />,\n  name: "JavaScript dates"\n}',...JavascriptDates.parameters?.docs?.source},description:{story:"Any prop that accepts a date value can be set to a Javascript Date object. The following example sets the `value`, `max` and `min` props.",...JavascriptDates.parameters?.docs?.description}}},DateFormats.parameters={...DateFormats.parameters,docs:{...DateFormats.parameters?.docs,source:{originalSource:'{\n  render: () => <IcCalendar id="date-formats" dateFormat="MM/DD/YYYY" />,\n  name: "Date formats"\n}',...DateFormats.parameters?.docs?.source},description:{story:"The `dateFormat` prop determines how dates are displayed. The supported formats are `DD/MM/YYYY`, `MM/DD/YYYY` or `YYYY/MM/DD`.",...DateFormats.parameters?.docs?.description}}},StartOfWeek.parameters={...StartOfWeek.parameters,docs:{...StartOfWeek.parameters?.docs,source:{originalSource:'{\n  render: () => <IcCalendar id="start-of-week" startOfWeek={6} />,\n  name: "Start of week"\n}',...StartOfWeek.parameters?.docs?.source},description:{story:"The `startOfWeek` prop sets the first day of the week in the calendar. This prop takes a number between 0 and 6, where 0 is Sunday and 6 is Saturday. By default, the first day of the week is set to Monday (1).",...StartOfWeek.parameters?.docs?.description}}},DisableDaysOfWeek.parameters={...DisableDaysOfWeek.parameters,docs:{...DisableDaysOfWeek.parameters?.docs,source:{originalSource:'{\n  render: () => <IcCalendar id="disable-weekends" disableDays={[0, 6]} />,\n  name: "Disable days of the week"\n}',...DisableDaysOfWeek.parameters?.docs?.source},description:{story:"Disable specific days of the week by using the `disableDays` prop. This prop takes an array of numbers between 0 and 6, where 0 is Sunday and 6 is Saturday.",...DisableDaysOfWeek.parameters?.docs?.description}}},DisablePast.parameters={...DisablePast.parameters,docs:{...DisablePast.parameters?.docs,source:{originalSource:'{\n  render: () => <IcCalendar id="disable-past" disablePast />,\n  name: "Disable dates in past"\n}',...DisablePast.parameters?.docs?.source},description:{story:"Dates before today can be disabled with the `disablePast` prop.",...DisablePast.parameters?.docs?.description}}},DisableFuture.parameters={...DisableFuture.parameters,docs:{...DisableFuture.parameters?.docs,source:{originalSource:'{\n  render: () => <IcCalendar id="disable-future" disableFuture />,\n  name: "Disable dates in future"\n}',...DisableFuture.parameters?.docs?.source},description:{story:"Dates after today can be disabled with the `disableFuture` prop.",...DisableFuture.parameters?.docs?.description}}},DaysOutsideMonthHidden.parameters={...DaysOutsideMonthHidden.parameters,docs:{...DaysOutsideMonthHidden.parameters?.docs,source:{originalSource:'{\n  render: () => <IcCalendar id="days-outside-month-hidden" showDaysOutsideMonth={false} />,\n  name: "Days outside month hidden"\n}',...DaysOutsideMonthHidden.parameters?.docs?.source},description:{story:"Days outside of the current month in view can be hidden by setting the `showDaysOutsideMonth` prop to `false`.",...DaysOutsideMonthHidden.parameters?.docs?.description}}},ButtonsHidden.parameters={...ButtonsHidden.parameters,docs:{...ButtonsHidden.parameters?.docs,source:{originalSource:'{\n  render: () => <IcCalendar id="buttons-hidden" showTodayButton={false} showClearButton={false} />,\n  name: "Today & clear buttons hidden"\n}',...ButtonsHidden.parameters?.docs?.source},description:{story:'The "Go to today" and "Clear" buttons can be hidden from the calendar view by setting the `showTodayButton` and `showClearButton` props to `false`.',...ButtonsHidden.parameters?.docs?.description}}},IcChangeEvent.parameters={...IcChangeEvent.parameters,docs:{...IcChangeEvent.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    React.useEffect(() => {\n      const handler = event => {\n        if (event.detail.value) {\n          document.getElementById("selected-date-display").textContent = "Selected date: " + event.detail.value;\n          document.getElementById("icchange-event-display").innerHTML = `icChange event emitted: {<br>\n            value: ${event.detail.value},<br>\n            utcValue: ${event.detail.utcValue},<br>\n            dateObject: {day: ${event.detail.dateObject.day}, month: ${event.detail.dateObject.month}, year: ${event.detail.dateObject.year}}<br>\n          }`;\n        } else {\n          document.getElementById("selected-date-display").textContent = "No date selected";\n          document.getElementById("icchange-event-display").textContent = "No icChange event emitted";\n        }\n      };\n      document.addEventListener("icChange", handler);\n      return () => {\n        document.removeEventListener("icChange", handler);\n      };\n    }, []);\n    return <div style={{\n      display: "flex",\n      flexDirection: "column"\n    }}>\n        <IcCalendar id="ic-change-event" />\n        <span>\n          <IcTypography id="selected-date-display" style={{\n          top: "420px"\n        }}>\n            No date selected\n          </IcTypography>\n          <IcTypography id="icchange-event-display" style={{\n          top: "428px"\n        }}>\n            No icChange event emitted\n          </IcTypography>\n        </span>\n      </div>;\n  },\n  name: "IcChange event"\n}',...IcChangeEvent.parameters?.docs?.source},description:{story:"The `onIcChange` event is emitted by the calendar when the selected date changes.",...IcChangeEvent.parameters?.docs?.description}}},Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:'{\n  render: args => <IcCalendar {...args} />,\n  name: "Playground",\n  args: defaultArgs,\n  argTypes: {\n    dateFormat: {\n      options: ["DD/MM/YYYY", "MM/DD/YYYY", "YYYY/MM/DD"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    size: {\n      options: ["small", "medium", "large"],\n      control: {\n        type: "inline-radio"\n      }\n    },\n    startOfWeek: {\n      options: Object.keys(weekDays),\n      mapping: weekDays,\n      control: {\n        type: "inline-radio",\n        labels: {\n          Sunday: "Sunday",\n          Monday: "Monday",\n          Tuesday: "Tuesday",\n          Wednesday: "Wednesday",\n          Thursday: "Thursday",\n          Friday: "Friday",\n          Saturday: "Saturday"\n        }\n      }\n    },\n    theme: {\n      options: ["inherit", "light", "dark"],\n      control: {\n        type: "inline-radio"\n      }\n    }\n  }\n}',...Playground.parameters?.docs?.source}}}}}]);