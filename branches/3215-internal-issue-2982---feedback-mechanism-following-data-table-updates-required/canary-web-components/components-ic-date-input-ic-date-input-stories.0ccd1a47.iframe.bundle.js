/*! For license information please see components-ic-date-input-ic-date-input-stories.0ccd1a47.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_ukic_canary_web_components=self.webpackChunk_ukic_canary_web_components||[]).push([[9735],{"./node_modules/lit-html/lit-html.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{qy:()=>x});const t=globalThis,i=t.trustedTypes,s=i?i.createPolicy("lit-html",{createHTML:t=>t}):void 0,e="$lit$",h=`lit$${Math.random().toFixed(9).slice(2)}$`,o="?"+h,n=`<${o}>`,r=document,l=()=>r.createComment(""),c=t=>null===t||"object"!=typeof t&&"function"!=typeof t,a=Array.isArray,u=t=>a(t)||"function"==typeof t?.[Symbol.iterator],d="[ \t\n\f\r]",f=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,v=/-->/g,_=/>/g,m=RegExp(`>|${d}(?:([^\\s"'>=/]+)(${d}*=${d}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),p=/'/g,g=/"/g,$=/^(?:script|style|textarea|title)$/i,y=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),x=y(1),T=(y(2),y(3),Symbol.for("lit-noChange")),E=Symbol.for("lit-nothing"),A=new WeakMap,C=r.createTreeWalker(r,129);function P(t,i){if(!a(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==s?s.createHTML(i):i}const V=(t,i)=>{const s=t.length-1,o=[];let r,l=2===i?"<svg>":3===i?"<math>":"",c=f;for(let i=0;i<s;i++){const s=t[i];let a,u,d=-1,y=0;for(;y<s.length&&(c.lastIndex=y,u=c.exec(s),null!==u);)y=c.lastIndex,c===f?"!--"===u[1]?c=v:void 0!==u[1]?c=_:void 0!==u[2]?($.test(u[2])&&(r=RegExp("</"+u[2],"g")),c=m):void 0!==u[3]&&(c=m):c===m?">"===u[0]?(c=r??f,d=-1):void 0===u[1]?d=-2:(d=c.lastIndex-u[2].length,a=u[1],c=void 0===u[3]?m:'"'===u[3]?g:p):c===g||c===p?c=m:c===v||c===_?c=f:(c=m,r=void 0);const x=c===m&&t[i+1].startsWith("/>")?" ":"";l+=c===f?s+n:d>=0?(o.push(a),s.slice(0,d)+e+s.slice(d)+h+x):s+h+(-2===d?i:x)}return[P(t,l+(t[s]||"<?>")+(2===i?"</svg>":3===i?"</math>":"")),o]};class N{constructor({strings:t,_$litType$:s},n){let r;this.parts=[];let c=0,a=0;const u=t.length-1,d=this.parts,[f,v]=V(t,s);if(this.el=N.createElement(f,n),C.currentNode=this.el.content,2===s||3===s){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes)}for(;null!==(r=C.nextNode())&&d.length<u;){if(1===r.nodeType){if(r.hasAttributes())for(const t of r.getAttributeNames())if(t.endsWith(e)){const i=v[a++],s=r.getAttribute(t).split(h),e=/([.?@])?(.*)/.exec(i);d.push({type:1,index:c,name:e[2],strings:s,ctor:"."===e[1]?H:"?"===e[1]?I:"@"===e[1]?L:k}),r.removeAttribute(t)}else t.startsWith(h)&&(d.push({type:6,index:c}),r.removeAttribute(t));if($.test(r.tagName)){const t=r.textContent.split(h),s=t.length-1;if(s>0){r.textContent=i?i.emptyScript:"";for(let i=0;i<s;i++)r.append(t[i],l()),C.nextNode(),d.push({type:2,index:++c});r.append(t[s],l())}}}else if(8===r.nodeType)if(r.data===o)d.push({type:2,index:c});else{let t=-1;for(;-1!==(t=r.data.indexOf(h,t+1));)d.push({type:7,index:c}),t+=h.length-1}c++}}static createElement(t,i){const s=r.createElement("template");return s.innerHTML=t,s}}function S(t,i,s=t,e){if(i===T)return i;let h=void 0!==e?s._$Co?.[e]:s._$Cl;const o=c(i)?void 0:i._$litDirective$;return h?.constructor!==o&&(h?._$AO?.(!1),void 0===o?h=void 0:(h=new o(t),h._$AT(t,s,e)),void 0!==e?(s._$Co??=[])[e]=h:s._$Cl=h),void 0!==h&&(i=S(t,h._$AS(t,i.values),h,e)),i}class M{constructor(t,i){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=i}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){const{el:{content:i},parts:s}=this._$AD,e=(t?.creationScope??r).importNode(i,!0);C.currentNode=e;let h=C.nextNode(),o=0,n=0,l=s[0];for(;void 0!==l;){if(o===l.index){let i;2===l.type?i=new R(h,h.nextSibling,this,t):1===l.type?i=new l.ctor(h,l.name,l.strings,this,t):6===l.type&&(i=new z(h,this,t)),this._$AV.push(i),l=s[++n]}o!==l?.index&&(h=C.nextNode(),o++)}return C.currentNode=r,e}p(t){let i=0;for(const s of this._$AV)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++}}class R{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(t,i,s,e){this.type=2,this._$AH=E,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cv=e?.isConnected??!0}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t?.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=S(this,t,i),c(t)?t===E||null==t||""===t?(this._$AH!==E&&this._$AR(),this._$AH=E):t!==this._$AH&&t!==T&&this._(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):u(t)?this.k(t):this._(t)}O(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}_(t){this._$AH!==E&&c(this._$AH)?this._$AA.nextSibling.data=t:this.T(r.createTextNode(t)),this._$AH=t}$(t){const{values:i,_$litType$:s}=t,e="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=N.createElement(P(s.h,s.h[0]),this.options)),s);if(this._$AH?._$AD===e)this._$AH.p(i);else{const t=new M(e,this),s=t.u(this.options);t.p(i),this.T(s),this._$AH=t}}_$AC(t){let i=A.get(t.strings);return void 0===i&&A.set(t.strings,i=new N(t)),i}k(t){a(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const h of t)e===i.length?i.push(s=new R(this.O(l()),this.O(l()),this,this.options)):s=i[e],s._$AI(h),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e)}_$AR(t=this._$AA.nextSibling,i){for(this._$AP?.(!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i}}setConnected(t){void 0===this._$AM&&(this._$Cv=t,this._$AP?.(t))}}class k{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(t,i,s,e,h){this.type=1,this._$AH=E,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=h,s.length>2||""!==s[0]||""!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=E}_$AI(t,i=this,s,e){const h=this.strings;let o=!1;if(void 0===h)t=S(this,t,i,0),o=!c(t)||t!==this._$AH&&t!==T,o&&(this._$AH=t);else{const e=t;let n,r;for(t=h[0],n=0;n<h.length-1;n++)r=S(this,e[s+n],i,n),r===T&&(r=this._$AH[n]),o||=!c(r)||r!==this._$AH[n],r===E?t=E:t!==E&&(t+=(r??"")+h[n+1]),this._$AH[n]=r}o&&!e&&this.j(t)}j(t){t===E?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,t??"")}}class H extends k{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===E?void 0:t}}class I extends k{constructor(){super(...arguments),this.type=4}j(t){this.element.toggleAttribute(this.name,!!t&&t!==E)}}class L extends k{constructor(t,i,s,e,h){super(t,i,s,e,h),this.type=5}_$AI(t,i=this){if((t=S(this,t,i,0)??E)===T)return;const s=this._$AH,e=t===E&&s!==E||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,h=t!==E&&(s===E||e);e&&this.element.removeEventListener(this.name,this,s),h&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){"function"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,t):this._$AH.handleEvent(t)}}class z{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s}get _$AU(){return this._$AM._$AU}_$AI(t){S(this,t)}}const j=t.litHtmlPolyfillSupport;j?.(N,R),(t.litHtmlVersions??=[]).push("3.2.1")},"./src/components/ic-date-input/ic-date-input.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomHelperText:()=>CustomHelperText,DateObject:()=>DateObject,Default:()=>Default,DisableFutureDates:()=>DisableFutureDates,DisablePastDates:()=>DisablePastDates,Disabled:()=>Disabled,EpochTime:()=>EpochTime,Form:()=>Form,HideHelperText:()=>HideHelperText,HideLabel:()=>HideLabel,IcChangeEmitDatePartChanges:()=>IcChangeEmitDatePartChanges,IcChangeEvent:()=>IcChangeEvent,MinMax:()=>MinMax,Required:()=>Required,Sizes:()=>Sizes,Validation:()=>Validation,WithClearingValue:()=>WithClearingValue,WithHyphens:()=>WithHyphens,WithValue:()=>WithValue,ZuluDatetime:()=>ZuluDatetime,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ic_date_input_stories});var lit_html=__webpack_require__("./node_modules/lit-html/lit-html.js");const ic_date_input_stories={title:"Web Components/Date Input",component:"ic-date-input",parameters:{componentAPI:{data:'# ic-date-input\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property               | Attribute                | Description                                                                                                                                                                                                                                            | Type                                           | Default                                                                                                 |\n| ---------------------- | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------- | ------------------------------------------------------------------------------------------------------- |\n| `dateFormat`           | `date-format`            | The format in which the date will be displayed.                                                                                                                                                                                                        | `"DD/MM/YYYY" \\| "MM/DD/YYYY" \\| "YYYY/MM/DD"` | `this.DEFAULT_DATE_FORMAT`                                                                              |\n| `disableDays`          | --                       | The days of the week to disable.                                                                                                                                                                                                                       | `IcWeekDays[]`                                 | `[]`                                                                                                    |\n| `disableDaysMessage`   | `disable-days-message`   | The text to display as the validation message when `disableDays` is set and a disabled date is entered.                                                                                                                                                | `string`                                       | `"The date you have selected is on a day of the week that is not allowed. Please select another date."` |\n| `disableFuture`        | `disable-future`         | If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.                                                                                                                                   | `boolean \\| undefined`                         | `false`                                                                                                 |\n| `disableFutureMessage` | `disable-future-message` | The text to display as the validation message when `disableFuture` is true and a date in the future is entered.                                                                                                                                        | `string`                                       | `"Dates in the future are not allowed. Please select a date in the past."`                              |\n| `disablePast`          | `disable-past`           | If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.                                                                                                                                       | `boolean \\| undefined`                         | `false`                                                                                                 |\n| `disablePastMessage`   | `disable-past-message`   | The text to display as the validation message when `disablePast` is true and a date in the past is entered.                                                                                                                                            | `string`                                       | `"Dates in the past are not allowed. Please select a date in the future."`                              |\n| `disabled`             | `disabled`               | If `true`, the disabled state will be set.                                                                                                                                                                                                             | `boolean`                                      | `false`                                                                                                 |\n| `emitDatePartChange`   | `emit-date-part-change`  | If `true`, every individual input field completed will emit an icChange event.                                                                                                                                                                         | `boolean \\| undefined`                         | `false`                                                                                                 |\n| `helperText`           | `helper-text`            | The helper text that will be displayed for additional field guidance. This will default to the text "Use format" along with the `dateFormat` value.                                                                                                    | `null \\| string`                               | `undefined`                                                                                             |\n| `hideHelperText`       | `hide-helper-text`       | If `true`, the helper text will be visually hidden, but still read out by screenreaders.                                                                                                                                                               | `boolean`                                      | `false`                                                                                                 |\n| `hideLabel`            | `hide-label`             | If `true`, the label will be visually hidden, but will still be read out by screen readers.                                                                                                                                                            | `boolean \\| undefined`                         | `false`                                                                                                 |\n| `inputId`              | `input-id`               | The ID for the input.                                                                                                                                                                                                                                  | `string`                                       | `` `ic-date-input-${inputIds++}` ``                                                                     |\n| `invalidDateMessage`   | `invalid-date-message`   | The text to display as the validation message when an invalid date is entered.                                                                                                                                                                         | `string`                                       | `"Please enter a valid date."`                                                                          |\n| `label` _(required)_   | `label`                  | The label for the date input.                                                                                                                                                                                                                          | `string`                                       | `undefined`                                                                                             |\n| `max`                  | `max`                    | The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disableFuture` is set to `true`. | `Date \\| string`                               | `""`                                                                                                    |\n| `min`                  | `min`                    | The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disablePast` is set to `true`. | `Date \\| string`                               | `""`                                                                                                    |\n| `name`                 | `name`                   | The name of the control, which is submitted with the form data.                                                                                                                                                                                        | `string`                                       | `this.inputId`                                                                                          |\n| `required`             | `required`               | If `true`, the input will require a value.                                                                                                                                                                                                             | `boolean`                                      | `false`                                                                                                 |\n| `showClearButton`      | `show-clear-button`      | If `true`, a button which clears the date input when clicked will be displayed.                                                                                                                                                                        | `boolean \\| undefined`                         | `true`                                                                                                  |\n| `size`                 | `size`                   | The size of the date input to be displayed.                                                                                                                                                                                                            | `"large" \\| "medium" \\| "small"`               | `"medium"`                                                                                              |\n| `theme`                | `theme`                  | Sets the date picker to the dark or light theme colors. "inherit" will set the color based on the system settings or ic-theme component.                                                                                                               | `"dark" \\| "inherit" \\| "light" \\| undefined`  | `"inherit"`                                                                                             |\n| `validationStatus`     | `validation-status`      | The validation status - e.g. \'error\' \\| \'warning\' \\| \'success\'. This will override the built-in date validation.                                                                                                                                       | `"" \\| "error" \\| "success" \\| "warning"`      | `""`                                                                                                    |\n| `validationText`       | `validation-text`        | The text to display as the validation message. This will override the built-in date validation.                                                                                                                                                        | `string \\| undefined`                          | `""`                                                                                                    |\n| `value`                | `value`                  | The value of the date input. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.                                                                                 | `Date \\| null \\| string \\| undefined`          | `""`                                                                                                    |\n\n\n## Events\n\n| Event      | Description                         | Type                                                                                                                                               |\n| ---------- | ----------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `icBlur`   | Emitted when the input loses focus. | `CustomEvent<{ value: Date \\| null; }>`                                                                                                            |\n| `icChange` | Emitted when the value has changed. | `CustomEvent<{ value: Date \\| null; dateObject: { day: string \\| null; month: string \\| null; year: string \\| null; }; utcValue: Date \\| null; }>` |\n| `icFocus`  | Emitted when the input gains focus. | `CustomEvent<{ value: Date \\| null; }>`                                                                                                            |\n\n\n## Methods\n\n### `getDate() => Promise<Date | null>`\n\nReturns the value as a Date object\n\n#### Returns\n\nType: `Promise<Date | null>`\n\nDate\n\n\n## Dependencies\n\n### Used by\n\n - [ic-date-picker](../ic-date-picker)\n\n### Depends on\n\n- ic-input-container\n- ic-input-label\n- ic-input-component-container\n- ic-button\n- ic-input-validation\n\n### Graph\n```mermaid\ngraph TD;\n  ic-date-input --\x3e ic-input-container\n  ic-date-input --\x3e ic-input-label\n  ic-date-input --\x3e ic-input-component-container\n  ic-date-input --\x3e ic-button\n  ic-date-input --\x3e ic-input-validation\n  ic-input-label --\x3e ic-typography\n  ic-button --\x3e ic-typography\n  ic-button --\x3e ic-loading-indicator\n  ic-button --\x3e ic-tooltip\n  ic-loading-indicator --\x3e ic-typography\n  ic-tooltip --\x3e ic-typography\n  ic-input-validation --\x3e ic-typography\n  ic-date-picker --\x3e ic-date-input\n  style ic-date-input fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n'}}},Default={render:()=>lit_html.qy`<ic-date-input
      label="When would you like to collect your coffee?"
    ></ic-date-input>
    <script>
      var dateInput = document.querySelector("ic-date-input");
      {
        dateInput.addEventListener("icChange", function (event) {
          console.log("icChange", event.detail.value);
        });
      }
    </script>
    <br />
    <br />
    <ic-date-input
      label="When would you like to collect your coffee?"
      date-format="MM/DD/YYYY"
    ></ic-date-input>
    <br />
    <br />
    <ic-date-input
      label="When would you like to collect your coffee?"
      date-format="YYYY/MM/DD"
    ></ic-date-input>`,name:"Default"},IcChangeEvent={render:()=>lit_html.qy`<ic-date-input
      label="When would you like to collect your coffee?"
    ></ic-date-input>
    <script>
      var dateInput = document.querySelector("ic-date-input");
      dateInput.addEventListener("icChange", function (event) {
        console.log(event.detail.value, event.detail.utcValue);
      });
    </script>`,name:"icChange event"},WithValue={render:()=>lit_html.qy`<ic-date-input
    id="date-input-default-date-with-value"
    label="When would you like to collect your coffee?"
    date-format="DD/MM/YYYY"
    value="21/01/2001"
  ></ic-date-input>`,name:"With value"},DateObject={render:()=>lit_html.qy`<ic-date-input
      id="date-input-default-date-date"
      label="When would you like to collect your coffee?"
    ></ic-date-input>
    <script>
      var dateInputDate = document.querySelector(
        "#date-input-default-date-date"
      );
      dateInputDate.value = new Date("28 November 2021");
    </script>`,name:"Date object"},ZuluDatetime={render:()=>lit_html.qy`<div>
      <ic-date-input
        id="date-input-default-zulu-date"
        label="When would you like to collect your coffee?"
      ></ic-date-input>
    </div>
    <script>
      var dateInputDate = document.querySelector(
        "#date-input-default-zulu-date"
      );
      dateInputDate.value = new Date("1 May 1990").toISOString();
    </script>`,name:"Zulu datetime"},WithHyphens={render:()=>lit_html.qy`<ic-date-input
      id="date-input-default-date-string"
      label="When would you like to collect your coffee?"
    ></ic-date-input>
    <script>
      var dateInputString = document.querySelector(
        "#date-input-default-date-string"
      );
      dateInputString.value = "25-05-2005";
    </script>`,name:"With hyphens"},EpochTime={render:()=>lit_html.qy`<ic-date-input
      id="date-input-default-date-epoch"
      label="When would you like to collect your coffee?"
    ></ic-date-input>
    <script>
      var dateInputString = document.querySelector(
        "#date-input-default-date-epoch"
      );
      dateInputString.value = Date.now();
    </script>`,name:"Epoch time"},Required={render:()=>lit_html.qy`<ic-date-input
    label="When would you like to collect your coffee?"
    required="true"
  ></ic-date-input>`,name:"Required"},HideLabel={render:()=>lit_html.qy`<ic-date-input
    label="When would you like to collect your coffee?"
    hide-label="true"
  ></ic-date-input>`,name:"Hide label"},Disabled={render:()=>lit_html.qy`<ic-date-input
    label="When would you like to collect your coffee?"
    disabled="true"
  ></ic-date-input>`},Sizes={render:()=>lit_html.qy`<ic-date-input
      label="When would you like to collect your coffee?"
      size="small"
    ></ic-date-input>
    <br />
    <br />
    <ic-date-input
      label="When would you like to collect your coffee?"
    ></ic-date-input>
    <br />
    <br />
    <ic-date-input
      label="When would you like to collect your coffee?"
      size="large"
    ></ic-date-input>`,name:"Sizes"},CustomHelperText={render:()=>lit_html.qy`<ic-date-input
    label="When would you like to collect your coffee?"
    helper-text="We will have your order ready for you on this date"
  ></ic-date-input>`,name:"Custom helper text"},HideHelperText={render:()=>lit_html.qy`<ic-date-input
    label="When would you like to collect your coffee?"
    helper-text="You cannot see me, but you can hear me"
    hide-helper-text="true"
  ></ic-date-input>`,name:"Hide helper text"},Validation={render:()=>lit_html.qy`<ic-date-input
      label="When would you like to collect your coffee?"
      validation-status="error"
      validation-text="There is a coffee shortage forecast for that day. Please choose a different date."
    ></ic-date-input>
    <br />
    <br />
    <ic-date-input
      label="When would you like to collect your coffee?"
      validation-status="warning"
      validation-text="Please be aware that there may be a coffee shortage on that day."
    ></ic-date-input>
    <br />
    <br />
    <ic-date-input
      label="When would you like to collect your coffee?"
      validation-status="success"
      validation-text="Your coffee will be available for you to collect on this day."
    ></ic-date-input>`,name:"Custom validation"},DisablePastDates={render:()=>lit_html.qy`<ic-date-input
    label="When would you like to collect your coffee?"
    disable-past="true"
  ></ic-date-input>`,name:"Disable past dates"},DisableFutureDates={render:()=>lit_html.qy`<ic-date-input
    label="When would you like to collect your coffee?"
    disable-future="true"
  ></ic-date-input>`,name:"Disable future dates"},MinMax={render:()=>lit_html.qy`<ic-date-input
    label="When would you like to collect your coffee?"
    min="02/01/2023"
    max="20-07-2023"
  ></ic-date-input>`,name:"Min and max"},Form={render:()=>(()=>{const form=document.createElement("form"),dateInput=document.createElement("ic-date-input"),submitBtn=document.createElement("ic-button"),resetBtn=document.createElement("ic-button"),formActions=document.createElement("div");return formActions.style.display="flex",formActions.style.gap="var(--ic-space-xs)",formActions.style.marginTop="var(--ic-space-xs)",submitBtn.type="submit",submitBtn.textContent="Submit",resetBtn.type="reset",resetBtn.textContent="Reset",form.id="date-input-form",dateInput.value="13/03/1951",dateInput.label="When would you like to collect your coffee?",form.appendChild(dateInput),form.appendChild(formActions),formActions.appendChild(submitBtn),formActions.appendChild(resetBtn),form.addEventListener("submit",(ev=>{ev.preventDefault(),console.log(dateInput.querySelector('input[name^="ic-date-input-"]')?.value)})),form})(),name:"Form"},WithClearingValue={render:()=>lit_html.qy`<ic-date-input
      id="date-input-clear-value"
      label="When would you like to collect your coffee?"
      date-format="DD/MM/YYYY"
      value="21/01/2001"
    ></ic-date-input>
    <br />
    <ic-button id="update">Update date</ic-button>
    <ic-button id="null-btn">set null</ic-button>
    <ic-button id="empty-btn">set empty string</ic-button>
    <ic-button id="undef-btn">set undefined</ic-button>
    <script>
      var input = document.querySelector("#date-input-clear-value");
      var btn = document.querySelector("#update");
      btn.addEventListener("click", () => {
        input.value = new Date("05 May 2005");
      });
      var btn2 = document.querySelector("#null-btn");
      btn2.addEventListener("click", () => {
        input.value = null;
      });
      var btn3 = document.querySelector("#empty-btn");
      btn3.addEventListener("click", () => {
        input.value = "";
      });
      var btn4 = document.querySelector("#undef-btn");
      btn4.addEventListener("click", () => {
        input.value = undefined;
      });
    </script>`,name:"With clearing value"},IcChangeEmitDatePartChanges={render:()=>lit_html.qy`<ic-date-input
      emit-date-part-change="true"
      label="When would you like to collect your coffee?"
    ></ic-date-input>
    <script>
      var dateInput = document.querySelector("ic-date-input");
      {
        dateInput.addEventListener("icChange", function (event) {
          console.log("icChange", event.detail);
        });
      }
    </script>`,name:"IcChange with emitDatePartChange"},__namedExportsOrder=["Default","IcChangeEvent","WithValue","DateObject","ZuluDatetime","WithHyphens","EpochTime","Required","HideLabel","Disabled","Sizes","CustomHelperText","HideHelperText","Validation","DisablePastDates","DisableFutureDates","MinMax","Form","WithClearingValue","IcChangeEmitDatePartChanges"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n      label="When would you like to collect your coffee?"\n    ></ic-date-input>\n    <script>\n      var dateInput = document.querySelector("ic-date-input");\n      {\n        dateInput.addEventListener("icChange", function (event) {\n          console.log("icChange", event.detail.value);\n        });\n      }\n    <\/script>\n    <br />\n    <br />\n    <ic-date-input\n      label="When would you like to collect your coffee?"\n      date-format="MM/DD/YYYY"\n    ></ic-date-input>\n    <br />\n    <br />\n    <ic-date-input\n      label="When would you like to collect your coffee?"\n      date-format="YYYY/MM/DD"\n    ></ic-date-input>`,\n  name: "Default"\n}',...Default.parameters?.docs?.source},description:{story:"Use the date input component to manually type in a date in different formats.\n\nThe input `label` is the only required attribute for date input.\n\nClick the 'Component API' tab to view all the available attributes, events and slots for date input.\n\nTo use the date input component, import `@ukic/canary-web-components` into your application.\n\nEach example below demonstrates the date input in three different date formats:\n- DD/MM/YYYY (Default date format)\n- MM/DD/YYYY\n- YYYY/MM/DD\n\nDates can be added by manually typing into the input or using the up and down arrow keys.\n\nTo move between day, month and year using the keyboard, provide the required values based on the placeholders or use `/` or `-`.\n\nBy default, the helper text displays the date format.",...Default.parameters?.docs?.description}}},IcChangeEvent.parameters={...IcChangeEvent.parameters,docs:{...IcChangeEvent.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n      label="When would you like to collect your coffee?"\n    ></ic-date-input>\n    <script>\n      var dateInput = document.querySelector("ic-date-input");\n      dateInput.addEventListener("icChange", function (event) {\n        console.log(event.detail.value, event.detail.utcValue);\n      });\n    <\/script>`,\n  name: "icChange event"\n}',...IcChangeEvent.parameters?.docs?.source},description:{story:"Retrieving the date input value via `icChange` returns the date as a Date object.\n\nThe event returns the Date object once day, month and year have been entered.",...IcChangeEvent.parameters?.docs?.description}}},WithValue.parameters={...WithValue.parameters,docs:{...WithValue.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n    id="date-input-default-date-with-value"\n    label="When would you like to collect your coffee?"\n    date-format="DD/MM/YYYY"\n    value="21/01/2001"\n  ></ic-date-input>`,\n  name: "With value"\n}',...WithValue.parameters?.docs?.source},description:{story:"To set a value to the date input, pass the date value in the relevant date format.",...WithValue.parameters?.docs?.description}}},DateObject.parameters={...DateObject.parameters,docs:{...DateObject.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n      id="date-input-default-date-date"\n      label="When would you like to collect your coffee?"\n    ></ic-date-input>\n    <script>\n      var dateInputDate = document.querySelector(\n        "#date-input-default-date-date"\n      );\n      dateInputDate.value = new Date("28 November 2021");\n    <\/script>`,\n  name: "Date object"\n}',...DateObject.parameters?.docs?.source},description:{story:"The date input also accepts a number of different date formats within the value attribute:\n- Date object\n- [Zulu datetime](#zulu-datetime)\n- [With hyphens (DD-MM-YYYY)](#with-hyphens)\n- [Epoch time](#epoch-time)",...DateObject.parameters?.docs?.description}}},ZuluDatetime.parameters={...ZuluDatetime.parameters,docs:{...ZuluDatetime.parameters?.docs,source:{originalSource:'{\n  render: () => html`<div>\n      <ic-date-input\n        id="date-input-default-zulu-date"\n        label="When would you like to collect your coffee?"\n      ></ic-date-input>\n    </div>\n    <script>\n      var dateInputDate = document.querySelector(\n        "#date-input-default-zulu-date"\n      );\n      dateInputDate.value = new Date("1 May 1990").toISOString();\n    <\/script>`,\n  name: "Zulu datetime"\n}',...ZuluDatetime.parameters?.docs?.source}}},WithHyphens.parameters={...WithHyphens.parameters,docs:{...WithHyphens.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n      id="date-input-default-date-string"\n      label="When would you like to collect your coffee?"\n    ></ic-date-input>\n    <script>\n      var dateInputString = document.querySelector(\n        "#date-input-default-date-string"\n      );\n      dateInputString.value = "25-05-2005";\n    <\/script>`,\n  name: "With hyphens"\n}',...WithHyphens.parameters?.docs?.source}}},EpochTime.parameters={...EpochTime.parameters,docs:{...EpochTime.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n      id="date-input-default-date-epoch"\n      label="When would you like to collect your coffee?"\n    ></ic-date-input>\n    <script>\n      var dateInputString = document.querySelector(\n        "#date-input-default-date-epoch"\n      );\n      dateInputString.value = Date.now();\n    <\/script>`,\n  name: "Epoch time"\n}',...EpochTime.parameters?.docs?.source}}},Required.parameters={...Required.parameters,docs:{...Required.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n    label="When would you like to collect your coffee?"\n    required="true"\n  ></ic-date-input>`,\n  name: "Required"\n}',...Required.parameters?.docs?.source},description:{story:"To set the date input as a required field, set the `required` attribute to `true`. This will add an asterisk at the end of the date input label.",...Required.parameters?.docs?.description}}},HideLabel.parameters={...HideLabel.parameters,docs:{...HideLabel.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n    label="When would you like to collect your coffee?"\n    hide-label="true"\n  ></ic-date-input>`,\n  name: "Hide label"\n}',...HideLabel.parameters?.docs?.source},description:{story:"To hide the label, set the `hide-label` attribute to `true`. The required `label` will still be read out by screen readers.",...HideLabel.parameters?.docs?.description}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n    label="When would you like to collect your coffee?"\n    disabled="true"\n  ></ic-date-input>`\n}',...Disabled.parameters?.docs?.source},description:{story:"Set the `disabled` attribute to `true` to prevent interaction with the date input.",...Disabled.parameters?.docs?.description}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n      label="When would you like to collect your coffee?"\n      size="small"\n    ></ic-date-input>\n    <br />\n    <br />\n    <ic-date-input\n      label="When would you like to collect your coffee?"\n    ></ic-date-input>\n    <br />\n    <br />\n    <ic-date-input\n      label="When would you like to collect your coffee?"\n      size="large"\n    ></ic-date-input>`,\n  name: "Sizes"\n}',...Sizes.parameters?.docs?.source},description:{story:"The date input is available in three different sizes:\n- `small`\n- `medium` (default)\n- `large`",...Sizes.parameters?.docs?.description}}},CustomHelperText.parameters={...CustomHelperText.parameters,docs:{...CustomHelperText.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n    label="When would you like to collect your coffee?"\n    helper-text="We will have your order ready for you on this date"\n  ></ic-date-input>`,\n  name: "Custom helper text"\n}',...CustomHelperText.parameters?.docs?.source},description:{story:"Use the helper text to add additional detail for the date input.",...CustomHelperText.parameters?.docs?.description}}},HideHelperText.parameters={...HideHelperText.parameters,docs:{...HideHelperText.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n    label="When would you like to collect your coffee?"\n    helper-text="You cannot see me, but you can hear me"\n    hide-helper-text="true"\n  ></ic-date-input>`,\n  name: "Hide helper text"\n}',...HideHelperText.parameters?.docs?.source}}},Validation.parameters={...Validation.parameters,docs:{...Validation.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n      label="When would you like to collect your coffee?"\n      validation-status="error"\n      validation-text="There is a coffee shortage forecast for that day. Please choose a different date."\n    ></ic-date-input>\n    <br />\n    <br />\n    <ic-date-input\n      label="When would you like to collect your coffee?"\n      validation-status="warning"\n      validation-text="Please be aware that there may be a coffee shortage on that day."\n    ></ic-date-input>\n    <br />\n    <br />\n    <ic-date-input\n      label="When would you like to collect your coffee?"\n      validation-status="success"\n      validation-text="Your coffee will be available for you to collect on this day."\n    ></ic-date-input>`,\n  name: "Custom validation"\n}',...Validation.parameters?.docs?.source},description:{story:"Validation on date input is set via `validation-status` and `validation-text`.\n\n`validation-status` will set the style of the validation message. `validation-status` accepts:\n- `error`\n- `warning`\n- `success`\n\n`validation-status` is required for the `validation-text` to appear.",...Validation.parameters?.docs?.description}}},DisablePastDates.parameters={...DisablePastDates.parameters,docs:{...DisablePastDates.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n    label="When would you like to collect your coffee?"\n    disable-past="true"\n  ></ic-date-input>`,\n  name: "Disable past dates"\n}',...DisablePastDates.parameters?.docs?.source},description:{story:"Validation can be set on the date input if a date in the past has been set by setting the `disable-past` attribute to `true`.\n\nEnter a date in the past to view the validation message.",...DisablePastDates.parameters?.docs?.description}}},DisableFutureDates.parameters={...DisableFutureDates.parameters,docs:{...DisableFutureDates.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n    label="When would you like to collect your coffee?"\n    disable-future="true"\n  ></ic-date-input>`,\n  name: "Disable future dates"\n}',...DisableFutureDates.parameters?.docs?.source},description:{story:"Validation can be set on the date input if a date in the future has been set by setting the `disable-future` attribute to `true`.\n\nEnter a date in the future to view the validation message.",...DisableFutureDates.parameters?.docs?.description}}},MinMax.parameters={...MinMax.parameters,docs:{...MinMax.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n    label="When would you like to collect your coffee?"\n    min="02/01/2023"\n    max="20-07-2023"\n  ></ic-date-input>`,\n  name: "Min and max"\n}',...MinMax.parameters?.docs?.source},description:{story:"It is possible to set a min and max date range. If a date is set and it is before the min or after the max date, a validation error will appear.\n\nThe min or max dates accept the following date formats:\n- [Date string](#with-value) (with slashes i.e. DD/MM/YYYY)\n- [Date string with hyphens](#with-hyphens) (i.e. DD-MM-YYYY)\n- [Date object](#date-object)\n- [Zulu time](#zulu-datetime)\n\nEnter a date after 2nd Jan 2023 and before 20th July to view the validation message.\n\nIn this code snippet, the min and max have been set using two different date formats to demonstrate its flexibility.",...MinMax.parameters?.docs?.description}}},Form.parameters={...Form.parameters,docs:{...Form.parameters?.docs,source:{originalSource:'{\n  render: () => createDateInputForm(),\n  name: "Form"\n}',...Form.parameters?.docs?.source},description:{story:"When the date input component is used within a form, the date value is returned as an ISO string.\n\nThe value is console logged to the browser dev tools.",...Form.parameters?.docs?.description}}},WithClearingValue.parameters={...WithClearingValue.parameters,docs:{...WithClearingValue.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n      id="date-input-clear-value"\n      label="When would you like to collect your coffee?"\n      date-format="DD/MM/YYYY"\n      value="21/01/2001"\n    ></ic-date-input>\n    <br />\n    <ic-button id="update">Update date</ic-button>\n    <ic-button id="null-btn">set null</ic-button>\n    <ic-button id="empty-btn">set empty string</ic-button>\n    <ic-button id="undef-btn">set undefined</ic-button>\n    <script>\n      var input = document.querySelector("#date-input-clear-value");\n      var btn = document.querySelector("#update");\n      btn.addEventListener("click", () => {\n        input.value = new Date("05 May 2005");\n      });\n      var btn2 = document.querySelector("#null-btn");\n      btn2.addEventListener("click", () => {\n        input.value = null;\n      });\n      var btn3 = document.querySelector("#empty-btn");\n      btn3.addEventListener("click", () => {\n        input.value = "";\n      });\n      var btn4 = document.querySelector("#undef-btn");\n      btn4.addEventListener("click", () => {\n        input.value = undefined;\n      });\n    <\/script>`,\n  name: "With clearing value"\n}',...WithClearingValue.parameters?.docs?.source},description:{story:"The date input can be cleared by setting the the value attribute to one of the following:\n- empty string\n- `null`\n- `undefined`",...WithClearingValue.parameters?.docs?.description}}},IcChangeEmitDatePartChanges.parameters={...IcChangeEmitDatePartChanges.parameters,docs:{...IcChangeEmitDatePartChanges.parameters?.docs,source:{originalSource:'{\n  render: () => html`<ic-date-input\n      emit-date-part-change="true"\n      label="When would you like to collect your coffee?"\n    ></ic-date-input>\n    <script>\n      var dateInput = document.querySelector("ic-date-input");\n      {\n        dateInput.addEventListener("icChange", function (event) {\n          console.log("icChange", event.detail);\n        });\n      }\n    <\/script>`,\n  name: "IcChange with emitDatePartChange"\n}',...IcChangeEmitDatePartChanges.parameters?.docs?.source},description:{story:"The `IcChange` event is emitted by the date input every time an input field is changed.",...IcChangeEmitDatePartChanges.parameters?.docs?.description}}}}}]);
//# sourceMappingURL=components-ic-date-input-ic-date-input-stories.0ccd1a47.iframe.bundle.js.map