{"version":3,"file":"components-ic-data-table-ic-data-table-stories.33343d0f.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAs0EA;;;;;;;;;;;AAeA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;ACn2DA","sources":["webpack://@ukic/canary-web-components/./src/components/ic-data-table/story-data.ts","webpack://@ukic/canary-web-components/./src/components/ic-data-table/ic-data-table.stories.js"],"sourcesContent":["/* istanbul ignore file */\nimport { html } from \"lit-html\";\n\nimport {\n  IcDataTableColumnObject,\n  IcSortEventDetail,\n} from \"./ic-data-table.types\";\n\n/* eslint-disable */\nconst name1 = \"John Smith\";\nconst name2 = \"Sally Jones\";\nconst name3 = \"Luke Fisher\";\nconst name4 = \"Jane Lock\";\nconst name5 = \"Margaret Hale\";\n\nconst ROW_HEADER_TITLES = [\n  \"Employee\",\n  \"Employee\",\n  \"Manager\",\n  \"Employee\",\n  \"Apprentice\",\n];\n\nconst imageIconSVG =\n  '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 -960 960 960\" width=\"24\"><path d=\"M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h600q24 0 42 18t18 42v600q0 24-18 42t-42 18H180Zm0-60h600v-600H180v600Zm56-97h489L578-473 446-302l-93-127-117 152Zm-56 97v-600 600Z\"/></svg>';\nconst userIconSVG =\n  '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 -960 960 960\" width=\"24\"><path d=\"M480-481q-66 0-108-42t-42-108q0-66 42-108t108-42q66 0 108 42t42 108q0 66-42 108t-108 42ZM160-160v-94q0-38 19-65t49-41q67-30 128.5-45T480-420q62 0 123 15.5t127.921 44.694q31.301 14.126 50.19 40.966Q800-292 800-254v94H160Zm60-60h520v-34q0-16-9.5-30.5T707-306q-64-31-117-42.5T480-360q-57 0-111 11.5T252-306q-14 7-23 21.5t-9 30.5v34Zm260-321q39 0 64.5-25.5T570-631q0-39-25.5-64.5T480-721q-39 0-64.5 25.5T390-631q0 39 25.5 64.5T480-541Zm0-90Zm0 411Z\"/></svg>';\nconst alertIconSVG =\n  '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"18\" width=\"18\" viewBox=\"0 0 24 24\" fill=\"#000000\"><path d=\"M11,15H13V17H11V15M11,7H13V13H11V7M12,2C6.47,2 2,6.5 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20Z\"/></svg>';\nconst copyIconSVG =\n  '<svg xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"#000000\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"/></svg>';\nconst cellphoneIconSVG =\n  '<svg xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"#000000\"><path d=\"M17,19H7V5H17M17,1H7C5.89,1 5,1.89 5,3V21A2,2 0 0,0 7,23H17A2,2 0 0,0 19,21V3C19,1.89 18.1,1 17,1Z\"/></svg>';\nconst downloadIconSVG =\n  '<svg xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"#000000\"><path d=\"M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z\"/></svg>';\n\n// TODO: Add columnOptions\nexport const COLS: IcDataTableColumnObject[] = [\n  {\n    key: \"firstName\",\n    title: \"First name\",\n    dataType: \"string\",\n  },\n  {\n    key: \"lastName\",\n    title: \"Last name\",\n    dataType: \"string\",\n  },\n  {\n    key: \"age\",\n    title: \"Age\",\n    dataType: \"number\",\n  },\n  {\n    key: \"jobTitle\",\n    title: \"Job title\",\n    dataType: \"string\",\n  },\n  {\n    key: \"address\",\n    title: \"Address\",\n    dataType: \"address\",\n  },\n];\n\nexport const COLS_WIDTH: IcDataTableColumnObject[] = [\n  {\n    key: \"firstName\",\n    title: \"First name\",\n    dataType: \"string\",\n    columnWidth: \"15%\",\n  },\n  {\n    key: \"lastName\",\n    title: \"Last name\",\n    dataType: \"string\",\n    columnWidth: \"300px\",\n  },\n  {\n    key: \"age\",\n    title: \"Age\",\n    dataType: \"number\",\n    columnWidth: {\n      maxWidth: \"100px\",\n    },\n  },\n  {\n    key: \"jobTitle\",\n    title: \"Job title\",\n    dataType: \"string\",\n  },\n  {\n    key: \"address\",\n    title: \"Address\",\n    dataType: \"address\",\n  },\n];\n\nexport const COLS_DISABLE_AUTO_SORT: IcDataTableColumnObject[] = [\n  {\n    key: \"firstName\",\n    title: \"First name\",\n    dataType: \"string\",\n    disableAutoSort: true,\n  },\n  {\n    key: \"lastName\",\n    title: \"Last name\",\n    dataType: \"string\",\n  },\n  {\n    key: \"age\",\n    title: \"Age\",\n    dataType: \"number\",\n  },\n  {\n    key: \"jobTitle\",\n    title: \"Job title\",\n    dataType: \"string\",\n    excludeColumnFromSort: true,\n  },\n  {\n    key: \"address\",\n    title: \"Address\",\n    dataType: \"address\",\n    excludeColumnFromSort: true,\n  },\n];\n\nexport const COLS_EXCLUDE_SORT: IcDataTableColumnObject[] = [\n  {\n    key: \"firstName\",\n    title: \"First name\",\n    dataType: \"string\",\n    excludeColumnFromSort: true,\n  },\n  {\n    key: \"lastName\",\n    title: \"Last name\",\n    dataType: \"string\",\n  },\n  {\n    key: \"age\",\n    title: \"Age\",\n    dataType: \"number\",\n  },\n  {\n    key: \"jobTitle\",\n    title: \"Job title\",\n    dataType: \"string\",\n    excludeColumnFromSort: true,\n  },\n  {\n    key: \"address\",\n    title: \"Address\",\n    dataType: \"address\",\n    excludeColumnFromSort: true,\n  },\n];\n\nexport const COLS_HIDDEN: IcDataTableColumnObject[] = [\n  {\n    key: \"firstName\",\n    title: \"First name\",\n    dataType: \"string\",\n  },\n  {\n    key: \"lastName\",\n    title: \"Last name\",\n    dataType: \"string\",\n  },\n  {\n    key: \"age\",\n    title: \"Age\",\n    dataType: \"number\",\n    hidden: true,\n  },\n  {\n    key: \"jobTitle\",\n    title: \"Job title\",\n    dataType: \"string\",\n  },\n  {\n    key: \"address\",\n    title: \"Address\",\n    dataType: \"address\",\n  },\n];\n\nexport const VERY_LONG_DATA = (rows: number = 100) => {\n  const nextData = [];\n  for (let i = 0; i < rows; i++) {\n    const obj = {\n      firstName: `firstName-${i}`,\n      lastName: `lastName-${i}`,\n      age: i,\n      jobTitle: `jobTitle-${i}`,\n      address: `${i} Main Street, Town, County, Postcode AA${i}${i} BB${i}${i}`,\n      rowOptions: {\n        textWrap: i % 2 === 0,\n      },\n    };\n    nextData.push(obj);\n  }\n\n  return nextData;\n};\n\nexport const textWrapColumns = () => {\n  return COLUMNS_NO_TEXT_WRAP.map((col) => {\n    if (col.key === \"jobTitle\") {\n      return {\n        ...col,\n        textWrap: true,\n      };\n    }\n    return col;\n  });\n};\n\nexport const textWrapRow = () => {\n  return LONG_DATA_VALUES.map((data) => {\n    if (data.name === \"Luke Fisher\" || data.name === \"John Smith\") {\n      return {\n        ...data,\n        rowOptions: {\n          textWrap: true,\n        },\n      };\n    }\n\n    return data;\n  });\n};\n\nexport const textWrapCell = () => {\n  return LONG_DATA_VALUES.map((data) => {\n    if (data.jobTitle === \"Senior Financial Operations and Reporting Analyst\") {\n      return {\n        ...data,\n        jobTitle: {\n          data: data.jobTitle,\n          textWrap: true,\n        },\n      };\n    }\n\n    return data;\n  });\n};\n\nexport const COLS_ALIGNMENT: IcDataTableColumnObject[] = [\n  {\n    key: \"firstName\",\n    title: \"First name\",\n    dataType: \"string\",\n    columnAlignment: { horizontal: \"center\", vertical: \"middle\" },\n  },\n  {\n    key: \"lastName\",\n    title: \"Last name\",\n    dataType: \"string\",\n  },\n  {\n    key: \"age\",\n    title: \"Age\",\n    dataType: \"number\",\n  },\n  {\n    key: \"jobTitle\",\n    title: \"Job title\",\n    dataType: \"string\",\n  },\n  {\n    key: \"address\",\n    title: \"Address\",\n    dataType: \"address\",\n  },\n];\n\n// data is deliberately in different order for some elements to show this can be handled\nexport const DATA = [\n  {\n    age: 30,\n    jobTitle: \"Developer\",\n    address: \"1 Main Street, Town, County, Postcode\",\n    firstName: \"Joe\",\n    lastName: \"Bartholomew Christoper Augustine Zacchaeus Ashford\", // cspell:disable-line\n  },\n  {\n    address: \"2 Main Street, Town, Country, Postcode\",\n    age: 28,\n    firstName: \"Sarah\",\n    lastName: \"Smith\",\n    jobTitle: \"Senior Software Developer, Site Reliability Engineering\",\n  },\n  {\n    firstName: \"Mark\",\n    lastName: \"Owens\",\n    age: 45,\n    jobTitle: \"Team Lead\",\n    address: \"12 Key Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Naomi\",\n    lastName: \"Thomas\",\n    age: 32,\n    jobTitle: \"Analyst\",\n    address: \"8 Side Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Luke\",\n    lastName: \"Ashford\",\n    age: 18,\n    jobTitle: \"Junior Developer\",\n    address: \"5 New Street, Town, Country, Postcode\",\n  },\n];\nexport const LONG_TEXT = [\n  {\n    firstName: \"Joehasaverylongnamewhichneedstruncating\", // cspell:disable-line\n    lastName: \"BartholomewChristoperAugustineZacchaeus Ashford\", // cspell:disable-line\n    age: 30,\n    jobTitle: \"Developer\",\n    address: \"1 Main Street, Town, County, Postcode\",\n  },\n  {\n    firstName: \"Sarahalsohasaverylongname\", // cspell:disable-line\n    lastName: \"Smithisnotaverylongname\", // cspell:disable-line\n    age: 28,\n    jobTitle: \"Senior Software Developer, Site Reliability Engineering\",\n    address: \"2 Main Street, Town, Country, Postcode\",\n  },\n];\n\nexport const TEXT_WRAP_LONG_DATA = [\n  {\n    name: name1,\n    age: 36,\n    department: \"Accounts & Finance\",\n    employeeNumber: 1,\n    jobTitle: {\n      data: \"Senior Financial Operations and Reporting Analyst\",\n      textWrap: true,\n    },\n  },\n  {\n    name: name2,\n    age: 32,\n    department: \"Engineering\",\n    employeeNumber: 2,\n    jobTitle:\n      \"Senior Software Engineer, Site Reliability Engineering (Microsoft Azure)\",\n  },\n  {\n    name: \"Tim Rayes\",\n    age: 41,\n    department: \"Sales and Marketing\",\n    employeeNumber: 3,\n    jobTitle:\n      \"Regional Sales and Marketing Strategy Director (Europe, the Middle East, and Africa)\",\n    rowOptions: {\n      textWrap: true,\n    },\n  },\n  {\n    name: name3,\n    age: \"23\",\n    department: \"Engineering (Mobile App Development)\",\n    employeeNumber: 4,\n    jobTitle: \"Junior Tester\",\n  },\n  {\n    name: name4,\n    age: 34,\n    department: \"Engineering\",\n    employeeNumber: 5,\n    jobTitle: \"Junior Product Manager\",\n  },\n  {\n    name: name5,\n    age: 45,\n    department: \"HR\",\n    employeeNumber: 6,\n    jobTitle: \"Junior Human Resource Information Specialist\",\n  },\n];\n\nexport const COLUMNS_NO_TEXT_WRAP: IcDataTableColumnObject[] = [\n  { key: \"name\", title: \"Name\", dataType: \"string\" },\n  { key: \"age\", title: \"Age\", dataType: \"number\" },\n  { key: \"department\", title: \"Department\", dataType: \"string\" },\n  { key: \"employeeNumber\", title: \"Employee Number\", dataType: \"number\" },\n  { key: \"jobTitle\", title: \"Job Title\", dataType: \"string\" },\n];\n\nexport const COLUMNS_TEXT_WRAP: IcDataTableColumnObject[] = [\n  { key: \"name\", title: \"Name\", dataType: \"string\" },\n  { key: \"age\", title: \"Age\", dataType: \"number\" },\n  {\n    key: \"department\",\n    title: \"Department\",\n    dataType: \"string\",\n    textWrap: true,\n  },\n  { key: \"employeeNumber\", title: \"Employee Number\", dataType: \"number\" },\n  { key: \"jobTitle\", title: \"Job Title\", dataType: \"string\" },\n];\nexport const LONG_DATA_VALUES = [\n  {\n    name: name1,\n    age: 36,\n    department: \"Accounts & Finance\",\n    employeeNumber: 1,\n    jobTitle: \"Senior Financial Operations and Reporting Analyst\",\n  },\n  {\n    name: name2,\n    age: 32,\n    department: \"Engineering\",\n    employeeNumber: 2,\n    jobTitle:\n      \"Senior Software Engineer, Site Reliability Engineering (Microsoft Azure)\",\n  },\n  {\n    name: \"Tim Rayes\",\n    age: 41,\n    department: \"Sales and Marketing\",\n    employeeNumber: 3,\n    jobTitle:\n      \"Regional Sales and Marketing Strategy Director (Europe, the Middle East, and Africa)\",\n  },\n  {\n    name: name3,\n    age: \"23\",\n    department: \"Engineering (Mobile App Development)\",\n    employeeNumber: 4,\n    jobTitle: \"Junior Tester\",\n  },\n  {\n    name: name4,\n    age: 34,\n    department: \"Engineering\",\n    employeeNumber: 5,\n    jobTitle: \"Junior Product Manager\",\n  },\n  {\n    name: name5,\n    age: 45,\n    department: \"HR\",\n    employeeNumber: 6,\n    jobTitle: \"Junior Human Resource Information Specialist\",\n  },\n];\n\nexport const LONG_DATA_VALUES_UPDATE = [\n  {\n    name: \"Michael Phelps\",\n    age: 23,\n    department: \"United States\",\n    employeeNumber: 1,\n    jobTitle: \"Swimmer\",\n  },\n  {\n    name: \"Natalie Coughlin\",\n    age: 25,\n    department: \"United States\",\n    employeeNumber: 2,\n    jobTitle: \"Swimmer\",\n  },\n  {\n    name: \"Debbie Flood\",\n    age: 28,\n    department: \"Great Britain\",\n    employeeNumber: 3,\n    jobTitle: \"7 time Olympic and Commonwealth Champion for Rowing\",\n  },\n  {\n    name: \"Gillian Charleton\",\n    age: \"22\",\n    department: \"Canada\",\n    employeeNumber: 4,\n    jobTitle: \"Cycling\",\n  },\n];\n\nexport const DATA_CELL_ALIGNMENT = [\n  {\n    firstName: {\n      data: \"Joe\",\n      cellAlignment: { horizontal: \"center\", vertical: \"middle\" },\n      emphasis: \"high\",\n    },\n    lastName: \"Bloggs\",\n    age: 30,\n    jobTitle: \"Developer\",\n    address: \"1 Main Street, Town, County, Postcode\",\n  },\n  {\n    firstName: \"Sarah\",\n    lastName: \"Smith\",\n    age: 28,\n    jobTitle: \"Senior Software Developer, Site Reliability Engineering\",\n    address: \"2 Main Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Mark\",\n    lastName: \"Owens\",\n    age: 45,\n    jobTitle: \"Team Lead\",\n    address: \"12 Key Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Naomi\",\n    lastName: \"Thomas\",\n    age: 32,\n    jobTitle: \"Analyst\",\n    address: \"8 Side Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Luke\",\n    lastName: \"Ashford\",\n    age: 18,\n    jobTitle: \"Junior Developer\",\n    address: \"5 New Street, Town, Country, Postcode\",\n  },\n];\n\nexport const DATA_EMPHASIS = [\n  {\n    firstName: {\n      data: \"Joe\",\n      emphasis: \"high\",\n    },\n    lastName: \"Bloggs\",\n    age: 30,\n    jobTitle: \"Developer\",\n    address: \"1 Main Street, Town, County, Postcode\",\n  },\n  {\n    firstName: \"Sarah\",\n    lastName: {\n      data: \"Smith\",\n      emphasis: \"low\",\n    },\n    age: 28,\n    jobTitle: \"Senior Software Developer, Site Reliability Engineering\",\n    address: \"2 Main Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Mark\",\n    lastName: \"Owens\",\n    age: 45,\n    jobTitle: \"Team Lead\",\n    address: \"12 Key Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Naomi\",\n    lastName: \"Thomas\",\n    age: 32,\n    jobTitle: \"Analyst\",\n    address: \"8 Side Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Luke\",\n    lastName: \"Ashford\",\n    age: 18,\n    jobTitle: \"Junior Developer\",\n    address: \"5 New Street, Town, Country, Postcode\",\n  },\n];\n\nexport const ROW_ALIGNMENT = DATA.map((row, index) => ({\n  ...row,\n  rowOptions: {\n    header: ROW_HEADER_TITLES[index],\n    ...(index === 0 && {\n      rowAlignment: { vertical: \"middle\" },\n      emphasis: \"high\",\n    }),\n  },\n}));\n\nexport const LONG_COLS: IcDataTableColumnObject[] = [\n  {\n    key: \"employeeNumber\",\n    title: \"Employee number\",\n    dataType: \"number\",\n    columnAlignment: { horizontal: \"left\" },\n  },\n  {\n    key: \"name\",\n    title: \"Name\",\n    dataType: \"string\",\n  },\n  {\n    key: \"age\",\n    title: \"Age\",\n    dataType: \"number\",\n  },\n  {\n    key: \"jobTitle\",\n    title: \"Job title\",\n    dataType: \"string\",\n  },\n  {\n    key: \"address\",\n    title: \"Address\",\n    dataType: \"address\",\n  },\n];\n\nexport const ICON_COLS: IcDataTableColumnObject[] = [\n  {\n    key: \"firstName\",\n    title: \"First name\",\n    dataType: \"string\",\n    cellAlignment: \"right\",\n    columnAlignment: { horizontal: \"right\", vertical: \"middle\" },\n    icon: {\n      icon: imageIconSVG,\n      onAllCells: true,\n      hideOnHeader: true,\n    },\n  },\n  {\n    key: \"lastName\",\n    title: \"Last name\",\n    dataType: \"string\",\n    cellAlignment: \"center\",\n    columnAlignment: { horizontal: \"center\", vertical: \"bottom\" },\n    icon: {\n      icon: imageIconSVG,\n      onAllCells: true,\n    },\n  },\n  {\n    key: \"age\",\n    title: \"Age\",\n    dataType: \"number\",\n  },\n  {\n    key: \"jobTitle\",\n    title: \"Job title\",\n    dataType: \"string\",\n  },\n  {\n    key: \"address\",\n    title: \"Address\",\n    dataType: \"address\",\n    icon: {\n      icon: imageIconSVG,\n    },\n  },\n];\nexport const ICON_DATA_LONG_VALUES = [\n  {\n    firstName: {\n      data: \"Joe with a very long first name\",\n      icon: userIconSVG,\n    },\n    lastName: \"Bloggs\",\n    age: 30,\n    jobTitle: \"Developer\",\n    address: \"1 Main Street, Town, County, Postcode\",\n  },\n  {\n    firstName: \"Sarah\",\n    lastName: {\n      data: \"Smith\",\n      icon: userIconSVG,\n    },\n    age: 28,\n    jobTitle: \"Analyst\",\n    address: \"2 Main Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Mark\",\n    lastName: \"Owens\",\n    age: 45,\n    jobTitle: \"Team Lead\",\n    address: \"12 Key Street, Town, Country, Postcode\",\n  },\n];\n\nexport const ICON_DATA = [\n  {\n    firstName: {\n      data: \"Joe\",\n      icon: userIconSVG,\n    },\n    lastName: \"Bloggs\",\n    age: 30,\n    jobTitle: \"Developer\",\n    address: \"1 Main Street, Town, County, Postcode\",\n  },\n  {\n    firstName: \"Sarah\",\n    lastName: {\n      data: \"Smith\",\n      icon: userIconSVG,\n    },\n    age: 28,\n    jobTitle: \"Analyst\",\n    address: \"2 Main Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Mark\",\n    lastName: \"Owens\",\n    age: 45,\n    jobTitle: \"Team Lead\",\n    address: \"12 Key Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Naomi\",\n    lastName: \"Thomas\",\n    age: 32,\n    jobTitle: {\n      data: \"Developer\",\n      icon: userIconSVG,\n    },\n    address: \"8 Side Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Luke\",\n    lastName: \"Ashford\",\n    age: 18,\n    jobTitle: \"Junior Developer\",\n    address: \"5 New Street, Town, Country, Postcode\",\n  },\n];\n\nexport const LONG_DATA = [\n  {\n    employeeNumber: 1,\n    name: \"Joe Bloggs\",\n    age: 30,\n    jobTitle: \"Developer\",\n    address: \"1 Main Street, Town, County, Postcode\",\n  },\n  {\n    employeeNumber: 2,\n    name: \"Sarah Jones\",\n    age: 28,\n    jobTitle: \"Developer\",\n    address: \"2 Main Street, Town, Country, Postcode\",\n  },\n  {\n    employeeNumber: 3,\n    name: \"Mark Owens\",\n    age: 45,\n    jobTitle: \"Team Lead\",\n    address: \"12 Key Street, Town, County, Postcode\",\n  },\n  {\n    employeeNumber: 4,\n    name: \"Naomi Thomas\",\n    age: 32,\n    jobTitle: \"Developer\",\n    address: \"8 Side Street, Town, Country, Postcode\",\n  },\n  {\n    employeeNumber: 5,\n    name: \"Bartholomew Christoper Augustine Zacchaeus Ashford\", // cspell:disable-line\n    age: 18,\n    jobTitle: \"Junior Developer\",\n    address: \"5 New Street, Town, Country, Postcode\",\n  },\n  {\n    employeeNumber: 6,\n    name: \"Dave Smith\",\n    age: 33,\n    jobTitle: \"Analyst\",\n    address: \"4 Extra Street, Town, County, Postcode\",\n  },\n  {\n    employeeNumber: 7,\n    name: \"Amy Fox\",\n    age: 27,\n    jobTitle: \"Analyst\",\n    address: \"3 Main Street, Town, Country, Postcode\",\n  },\n  {\n    employeeNumber: 8,\n    name: \"Mary Cooper\",\n    age: 31,\n    jobTitle: \"Developer\",\n    address: \"8 Main Street, Town, County, Postcode\",\n  },\n  {\n    employeeNumber: 9,\n    name: \"Alice Cole\",\n    age: 38,\n    jobTitle: \"Team Lead\",\n    address: \"10 High Street, Town, Country, Postcode\",\n  },\n  {\n    employeeNumber: 10,\n    name: \"Ben Fields\",\n    age: 40,\n    jobTitle: \"Team Lead\",\n    address: \"14 High Street, Town, Country, Postcode\",\n  },\n  {\n    employeeNumber: 11,\n    name: \"Chrysanthemum Finnleigh Carrington Savannah Norton\", // cspell:disable-line\n    age: 32,\n    jobTitle: \"Analyst\",\n    address: \"6 Key Street, Town, County, Postcode\",\n  },\n  {\n    employeeNumber: 12,\n    name: \"Ashley Langford\",\n    age: 29,\n    jobTitle: \"Developer\",\n    address: \"7 Long Street, Town, Country, Postcode\",\n  },\n  {\n    employeeNumber: 13,\n    name: \"Michael Hall\",\n    age: 35,\n    jobTitle: \"Team Lead\",\n    address: \"5 Long Street, Town, County, Postcode\",\n  },\n  {\n    employeeNumber: 14,\n    name: \"David Frank\",\n    age: 28,\n    jobTitle: \"Developer\",\n    address: \"3 Side Street, Town, Country, Postcode\",\n  },\n  {\n    employeeNumber: 15,\n    name: \"Bernadette Mariah Genevieve Maddison Lincoln\", // cspell:disable-line\n    age: 23,\n    jobTitle: \"Developer\",\n    address: \"10 Main Street, Town, Country, Postcode\",\n  },\n  {\n    employeeNumber: 16,\n    name: \"Will Barns\",\n    age: 36,\n    jobTitle: \"Analyst\",\n    address: \"1 New Street, Town, County, Postcode\",\n  },\n  {\n    employeeNumber: 17,\n    name: \"Elizabeth Long\",\n    age: 43,\n    jobTitle: \"Analyst\",\n    address: \"9 Short Street, Town, Country, Postcode\",\n  },\n  {\n    employeeNumber: 18,\n    name: \"Keith Jones\",\n    age: 37,\n    jobTitle: \"Developer\",\n    address: \"11 Main Street, Town, County, Postcode\",\n  },\n  {\n    employeeNumber: 19,\n    name: \"Olivia Brown\",\n    age: 19,\n    jobTitle: \"Trainee Analyst\",\n    address: \"4 Side Street, Town, Country, Postcode\",\n  },\n  {\n    employeeNumber: 20,\n    name: \"Tim Green\",\n    age: 50,\n    jobTitle: \"Developer\",\n    address: \"2 Long Street, Town, Country, Postcode\",\n  },\n];\n\nexport const ROW_HEADER_COLS: IcDataTableColumnObject[] = [\n  {\n    key: \"header\",\n    title: \"Job type\",\n    dataType: \"string\",\n  },\n  {\n    key: \"firstName\",\n    title: \"First name\",\n    dataType: \"string\",\n  },\n  {\n    key: \"lastName\",\n    title: \"Last name\",\n    dataType: \"string\",\n  },\n  {\n    key: \"age\",\n    title: \"Age\",\n    dataType: \"number\",\n  },\n  {\n    key: \"jobTitle\",\n    title: \"Job title\",\n    dataType: \"string\",\n  },\n  {\n    key: \"address\",\n    title: \"Address\",\n    dataType: \"address\",\n  },\n];\nexport const ROW_HEADER_DATA = DATA.map((data, index) => ({\n  ...data,\n  rowOptions: {\n    header: ROW_HEADER_TITLES[index],\n  },\n}));\n\nexport const COLS_ELEMENTS: IcDataTableColumnObject[] = [\n  {\n    key: \"actions\",\n    title: \"Actions\",\n    dataType: \"element\",\n    columnAlignment: { horizontal: \"center\" },\n  },\n  {\n    key: \"firstName\",\n    title: \"First name\",\n    dataType: \"string\",\n  },\n  {\n    key: \"actions2\",\n    title: \"Actions2\",\n    dataType: \"element\",\n    columnAlignment: { horizontal: \"center\" },\n  },\n  {\n    key: \"age\",\n    title: \"Age\",\n    dataType: \"number\",\n  },\n  {\n    key: \"jobTitle\",\n    title: \"Job title\",\n    dataType: \"string\",\n  },\n  {\n    key: \"address\",\n    title: \"Address\",\n    dataType: \"address\",\n  },\n];\n\nexport const COLS_ELEMENTS_SINGLE_ACTION: IcDataTableColumnObject[] = [\n  {\n    key: \"actions\",\n    title: \"Actions\",\n    dataType: \"element\",\n    columnAlignment: { horizontal: \"center\" },\n  },\n  {\n    key: \"firstName\",\n    title: \"First name\",\n    dataType: \"string\",\n  },\n  {\n    key: \"age\",\n    title: \"Age\",\n    dataType: \"number\",\n  },\n  {\n    key: \"jobTitle\",\n    title: \"Job title\",\n    dataType: \"string\",\n  },\n  {\n    key: \"address\",\n    title: \"Address\",\n    dataType: \"address\",\n  },\n];\n\nexport const DATA_ELEMENTS = [\n  {\n    firstName: {\n      data: \"Joe\",\n      href: \"https://www.example.com\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n    },\n    age: 30,\n    jobTitle: \"Developer\",\n    address: \"1 Main Street, Town, County, Postcode\",\n  },\n  {\n    firstName: {\n      data: \"Sarah\",\n      href: \"https://www.example.org\",\n    },\n    age: 28,\n    jobTitle: \"Senior Software Developer, Site Reliability Engineering\",\n    address: \"2 Main Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Mark\",\n    age: 45,\n    jobTitle: \"Team Lead\",\n    address: \"12 Key Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Naomi\",\n    age: 32,\n    jobTitle: \"Analyst\",\n    address: \"8 Side Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Luke\",\n    age: 18,\n    jobTitle: \"Junior Developer\",\n    address: \"5 New Street, Town, Country, Postcode\",\n  },\n];\n\nexport const DATA_ELEMENTS_PAGINATION = [\n  {\n    firstName: {\n      data: \"Joe\",\n      href: \"https://www.example.com\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n    },\n    age: 30,\n    jobTitle: \"Developer\",\n    address: \"1 Main Street, Town, County, Postcode\",\n  },\n  {\n    firstName: {\n      data: \"Sarah\",\n      href: \"https://www.example.org\",\n    },\n    age: 28,\n    jobTitle: \"Senior Software Developer, Site Reliability Engineering\",\n    address: \"2 Main Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Mark\",\n    age: 45,\n    jobTitle: \"Team Lead\",\n    address: \"12 Key Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Naomi\",\n    age: 32,\n    jobTitle: \"Analyst\",\n    address: \"8 Side Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Luke\",\n    age: 18,\n    jobTitle: \"Junior Developer\",\n    address: \"5 New Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Dave\",\n    age: 33,\n    jobTitle: \"Analyst\",\n    address: \"4 Extra Street, Town, County, Postcode\",\n  },\n  {\n    firstName: \"Amy\",\n    age: 27,\n    jobTitle: \"Analyst\",\n    address: \"3 Main Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Mary\",\n    age: 31,\n    jobTitle: \"Developer\",\n    address: \"8 Main Street, Town, County, Postcode\",\n  },\n  {\n    firstName: \"Alice\",\n    age: 38,\n    jobTitle: \"Team Lead\",\n    address: \"10 High Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Ben\",\n    age: 40,\n    jobTitle: \"Team Lead\",\n    address: \"14 High Street, Town, Country, Postcode\",\n  },\n];\n\nexport const DATA_REACT_ELEMENTS = [\n  {\n    firstName: {\n      data: \"Joe\",\n      href: \"https://www.example.com\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n    },\n    age: 30,\n    jobTitle: \"Developer\",\n    address: \"1 Main Street, Town, County, Postcode\",\n  },\n  {\n    firstName: {\n      data: \"Sarah\",\n      href: \"https://www.example.org/\",\n    },\n    age: 28,\n    jobTitle: \"Senior Software Developer, Site Reliability Engineering\",\n    address: \"2 Main Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Mark\",\n    age: 45,\n    jobTitle: \"Team Lead\",\n    address: \"12 Key Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Naomi\",\n    age: 32,\n    jobTitle: \"Analyst\",\n    address: \"8 Side Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Luke\",\n    age: 18,\n    jobTitle: \"Junior Developer\",\n    address: \"5 New Street, Town, Country, Postcode\",\n  },\n];\n\nexport const DATA_REACT_ELEMENTS_PAGINATION = [\n  ...DATA_REACT_ELEMENTS,\n  {\n    firstName: \"Dave\",\n    age: 33,\n    jobTitle: \"Analyst\",\n    address: \"4 Extra Street, Town, County, Postcode\",\n  },\n  {\n    firstName: \"Amy\",\n    age: 27,\n    jobTitle: \"Analyst\",\n    address: \"3 Main Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Mary\",\n    age: 31,\n    jobTitle: \"Developer\",\n    address: \"8 Main Street, Town, County, Postcode\",\n  },\n  {\n    firstName: \"Alice\",\n    age: 38,\n    jobTitle: \"Team Lead\",\n    address: \"10 High Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Ben\",\n    age: 40,\n    jobTitle: \"Team Lead\",\n    address: \"14 High Street, Town, Country, Postcode\",\n  },\n];\n\nexport const DATA_REACT_ELEMENTS_WITH_ICONS = [\n  {\n    firstName: {\n      data: \"Joe\",\n      href: \"https://www.example.com\",\n      icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 -960 960 960\" width=\"24\"><path d=\"M480-481q-66 0-108-42t-42-108q0-66 42-108t108-42q66 0 108 42t42 108q0 66-42 108t-108 42ZM160-160v-94q0-38 19-65t49-41q67-30 128.5-45T480-420q62 0 123 15.5t127.921 44.694q31.301 14.126 50.19 40.966Q800-292 800-254v94H160Zm60-60h520v-34q0-16-9.5-30.5T707-306q-64-31-117-42.5T480-360q-57 0-111 11.5T252-306q-14 7-23 21.5t-9 30.5v34Zm260-321q39 0 64.5-25.5T570-631q0-39-25.5-64.5T480-721q-39 0-64.5 25.5T390-631q0 39 25.5 64.5T480-541Zm0-90Zm0 411Z\"/></svg>',\n    },\n    age: 30,\n    jobTitle: \"Developer\",\n    address: \"1 Main Street, Town, County, Postcode\",\n  },\n  {\n    firstName: {\n      data: \"Sarah\",\n      href: \"https://www.example.com\",\n      icon: \"\",\n    },\n    age: 28,\n    jobTitle: \"Senior Software Developer, Site Reliability Engineering\",\n    address: \"2 Main Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Mark\",\n    age: 45,\n    jobTitle: \"Team Lead\",\n    address: \"12 Key Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Naomi\",\n    age: 32,\n    jobTitle: \"Analyst\",\n    address: \"8 Side Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Luke\",\n    age: 18,\n    jobTitle: \"Junior Developer\",\n    address: \"5 New Street, Town, Country, Postcode\",\n  },\n];\n\nexport const DATA_WITH_EMPTY_VALUES = [\n  {\n    firstName: \"Nigel\",\n    lastName: null,\n    age: 62,\n    jobTitle: \"Developer\",\n    address: \"1 Main Street, Town, County, Postcode\",\n  },\n  {\n    firstName: \"Sarah\",\n    lastName: \"Smith\",\n    age: 28,\n    jobTitle: undefined,\n    address: \"2 Main Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Mark\",\n    lastName: \"Owens\",\n    age: 45,\n    jobTitle: \"Team Lead\",\n    address: \"\",\n  },\n];\n\nexport const LONG_DATA_ELEMENTS_WITH_DESCRIPTIONS = [\n  {\n    firstName: {\n      data: \"Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe\",\n      description: {\n        data: \"Alias: JB\",\n        icon: imageIconSVG,\n      },\n      icon: userIconSVG,\n    },\n    lastName: \"Bloggs\",\n    age: 30,\n    jobTitle:\n      \"Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer\",\n    address: \"N/A\",\n  },\n  {\n    firstName: {\n      data: \"Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe Joe\",\n    },\n    lastName: \"Bloggs\",\n    age: 30,\n    jobTitle:\n      \"Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer Developer\",\n    address: \"N/A\",\n  },\n  {\n    firstName: {\n      data: \"Joey\",\n      description: {\n        data: \"Unverified\",\n        icon: alertIconSVG,\n      },\n    },\n    lastName: \"Bloggy\",\n    age: 31,\n    jobTitle: \"Developer\",\n    address: \"N/A\",\n  },\n  {\n    firstName: {\n      description: \"Alias: The Ghost\",\n    },\n    lastName: \"Blogger\",\n    age: 32,\n    jobTitle: \"Writer\",\n    address: \"N/A\",\n  },\n];\n\nexport const DATA_ELEMENTS_WITH_DESCRIPTIONS = [\n  {\n    firstName: {\n      data: \"Joe\",\n      description: {\n        data: \"The name of Joe\",\n        icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" viewBox=\"0 -960 960 960\" width=\"20\"><path d=\"M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h600q24 0 42 18t18 42v600q0 24-18 42t-42 18H180Zm0-60h600v-600H180v600Zm56-97h489L578-473 446-302l-93-127-117 152Zm-56 97v-600 600Z\"/></svg>',\n      },\n    },\n    lastName: \"Bloggs\",\n    age: 30,\n    jobTitle: \"Developer\",\n    address: \"1 Main Street, Town, County, Postcode\",\n  },\n  {\n    firstName: {\n      data: \"Sarah\",\n      description: {\n        data: \"The name of Sarah\",\n        icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" viewBox=\"0 -960 960 960\" width=\"20\"><path d=\"M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h600q24 0 42 18t18 42v600q0 24-18 42t-42 18H180Zm0-60h600v-600H180v600Zm56-97h489L578-473 446-302l-93-127-117 152Zm-56 97v-600 600Z\"/></svg>',\n      },\n    },\n    lastName: \"Smith\",\n    age: 28,\n    jobTitle: \"Senior Software Developer, Site Reliability Engineering\",\n    address: \"2 Main Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: {\n      data: \"Mark\",\n      description: {\n        data: \"The name of Mark\",\n        icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" viewBox=\"0 -960 960 960\" width=\"20\"><path d=\"M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h600q24 0 42 18t18 42v600q0 24-18 42t-42 18H180Zm0-60h600v-600H180v600Zm56-97h489L578-473 446-302l-93-127-117 152Zm-56 97v-600 600Z\"/></svg>',\n      },\n    },\n    lastName: \"Owens\",\n    age: 45,\n    jobTitle: \"Team Lead\",\n    address: \"12 Key Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: {\n      data: \"Naomi\",\n      description: {\n        data: \"The name of Naomi\",\n        icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" viewBox=\"0 -960 960 960\" width=\"20\"><path d=\"M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h600q24 0 42 18t18 42v600q0 24-18 42t-42 18H180Zm0-60h600v-600H180v600Zm56-97h489L578-473 446-302l-93-127-117 152Zm-56 97v-600 600Z\"/></svg>',\n      },\n    },\n    lastName: \"Thomas\",\n    age: 32,\n    jobTitle: \"Analyst\",\n    address: \"8 Side Street, Town, Country, Postcode\",\n  },\n  {\n    firstName: \"Luke\",\n    lastName: \"Ashford\",\n    age: {\n      data: 18,\n      description: {\n        data: \"The age of Luke\",\n        icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" viewBox=\"0 -960 960 960\" width=\"20\"><path d=\"M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h600q24 0 42 18t18 42v600q0 24-18 42t-42 18H180Zm0-60h600v-600H180v600Zm56-97h489L578-473 446-302l-93-127-117 152Zm-56 97v-600 600Z\"/></svg>',\n      },\n    },\n    jobTitle: {\n      data: \"Junior Developer\",\n      description: {\n        data: \"The job title of Luke\",\n        icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" viewBox=\"0 -960 960 960\" width=\"20\"><path d=\"M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h600q24 0 42 18t18 42v600q0 24-18 42t-42 18H180Zm0-60h600v-600H180v600Zm56-97h489L578-473 446-302l-93-127-117 152Zm-56 97v-600 600Z\"/></svg>',\n      },\n    },\n    address: \"5 New Street, Town, Country, Postcode\",\n  },\n];\n\nexport const createDataTableElement = (\n  id: string,\n  caption: string,\n  columns: IcDataTableColumnObject[] = [],\n  data: object[] = []\n): HTMLIcDataTableElement => {\n  const existingTable = document.querySelector(`ic-data-table#${id}`);\n  if (existingTable) existingTable.parentElement?.removeChild(existingTable);\n  const dataTable = document.createElement(\"ic-data-table\");\n  dataTable.setAttribute(\"id\", id);\n  dataTable.setAttribute(\"caption\", caption);\n  dataTable.columns = columns;\n  dataTable.data = data;\n  return dataTable;\n};\n\nexport const Basic = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\"basic\", \"Basic Table\", COLS, DATA);\n  dataTable.setAttribute(\"sortable\", \"true\");\n  return dataTable;\n};\n\nexport const DataTableSizing = (): HTMLElement => {\n  const dataTable = createDataTableElement(\n    \"data-table-sizing\",\n    \"Basic Table\",\n    COLS_WIDTH,\n    DATA\n  );\n  dataTable.setAttribute(\"width\", \"800px\");\n  dataTable.setAttribute(\"table-layout\", \"auto\");\n  return dataTable;\n};\n\nexport const HiddenCol = (): HTMLElement => {\n  const dataTable = createDataTableElement(\n    \"hidden-col\",\n    \"Basic Table\",\n    COLS_HIDDEN,\n    DATA\n  );\n  const setColumnVisible = (visible: boolean) => {\n    const cols = [...COLS_HIDDEN];\n    cols[2].hidden = !visible;\n    dataTable.columns = cols;\n  };\n  const showButton = document.createElement(\"ic-button\");\n  const hideButton = document.createElement(\"ic-button\");\n  showButton.innerHTML = \"Show Age\";\n  hideButton.innerHTML = \"Hide Age\";\n  showButton.addEventListener(\"click\", () => setColumnVisible(true));\n  hideButton.addEventListener(\"click\", () => setColumnVisible(false));\n\n  const buttonWrapper = document.createElement(\"div\");\n  buttonWrapper.style[\"display\"] = \"flex\";\n  buttonWrapper.style[\"paddingTop\"] = \"10px\";\n  buttonWrapper.style[\"gap\"] = \"8px\";\n  buttonWrapper.insertAdjacentElement(\"afterbegin\", showButton);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", hideButton);\n\n  const wrapper = document.createElement(\"div\");\n  wrapper.insertAdjacentElement(\"afterbegin\", dataTable);\n  dataTable.insertAdjacentElement(\"afterend\", buttonWrapper);\n\n  return wrapper;\n};\n\n// Used for table overflow testing\n// export const TableOverflow = (): HTMLElement => {\n//   const wrapper = document.createElement('div');\n//   const dataTable = createDataTableElement(\"Basic Table\", COLS_WIDTH, DATA);\n\n//   wrapper.style.maxWidth = '500px'\n//   wrapper.style.overflow = 'auto';\n//   dataTable.setAttribute(\"width\", \"1000px\");\n//   wrapper.insertAdjacentElement('afterbegin', dataTable);\n//   return wrapper;\n// }\n\nexport const LargeDataSet = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\n    \"large-data-set\",\n    \"Basic Table\",\n    LONG_COLS,\n    LONG_DATA\n  );\n  dataTable.setAttribute(\"sortable\", \"true\");\n  return dataTable;\n};\n\nexport const Embedded = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\n    \"embedded\",\n    \"Embedded Table\",\n    COLS,\n    DATA\n  );\n  dataTable.setAttribute(\"embedded\", \"true\");\n  return dataTable;\n};\n\nexport const Dense = (): HTMLElement => {\n  const dataTableDense = createDataTableElement(\n    \"dense\",\n    \"Dense Table\",\n    COLS,\n    DATA\n  );\n  dataTableDense.setAttribute(\"density\", \"dense\");\n  return dataTableDense;\n};\n\nexport const Spacious = (): HTMLElement => {\n  const dataTableSpacious = createDataTableElement(\n    \"spacious\",\n    \"Spacious Table\",\n    COLS,\n    DATA\n  );\n  dataTableSpacious.setAttribute(\"density\", \"spacious\");\n  return dataTableSpacious;\n};\n\nexport const Scrollable = (): HTMLElement => {\n  const dataTable = createDataTableElement(\n    \"scrollable\",\n    \"Scrollable Table\",\n    LONG_COLS,\n    LONG_DATA\n  );\n  dataTable.setAttribute(\"embedded\", \"true\");\n  dataTable.style[\"height\"] = \"366px\";\n\n  const setStickyHeaders = (sticky: boolean) => {\n    dataTable.setAttribute(\"sticky-column-headers\", `${sticky}`);\n  };\n  const stickButton = document.createElement(\"ic-button\");\n  const unstickButton = document.createElement(\"ic-button\");\n  stickButton.innerHTML = \"Stick Header\";\n  unstickButton.innerHTML = \"Unstick Header\";\n  stickButton.addEventListener(\"click\", () => setStickyHeaders(true));\n  unstickButton.addEventListener(\"click\", () => setStickyHeaders(false));\n\n  const buttonWrapper = document.createElement(\"div\");\n  buttonWrapper.style[\"display\"] = \"flex\";\n  buttonWrapper.style[\"paddingTop\"] = \"10px\";\n  buttonWrapper.style[\"gap\"] = \"8px\";\n  buttonWrapper.insertAdjacentElement(\"afterbegin\", stickButton);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", unstickButton);\n\n  const wrapper = document.createElement(\"div\");\n  wrapper.insertAdjacentElement(\"afterbegin\", dataTable);\n  dataTable.insertAdjacentElement(\"afterend\", buttonWrapper);\n\n  return wrapper;\n};\n\nexport const HeaderTruncation = (): HTMLElement => {\n  const dataTable = createDataTableElement(\n    \"header-truncation\",\n    \"Column Header Truncation\",\n    COLS,\n    DATA\n  );\n  dataTable.setAttribute(\"column-header-truncation\", \"true\");\n  dataTable.style[\"height\"] = \"400px\";\n  dataTable.style[\"width\"] = \"500px\";\n\n  return dataTable;\n};\n\nexport const RowHeaders = (): HTMLIcDataTableElement =>\n  createDataTableElement(\n    \"row-headers\",\n    \"Row Header Table\",\n    ROW_HEADER_COLS,\n    ROW_HEADER_DATA\n  );\n\nexport const Sort = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\"sort\", \"Sort\", COLS, DATA);\n  dataTable.setAttribute(\"sortable\", \"true\");\n  dataTable.addEventListener(\"icSortChange\", (event: CustomEvent) => {\n    console.log(\"Sort changed\", event.detail);\n  });\n  return dataTable;\n};\n\nexport const SortOptions = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\n    \"sort-options\",\n    \"Sort Order\",\n    COLS,\n    DATA\n  );\n  dataTable.setAttribute(\"sortable\", \"true\");\n  dataTable.sortOptions = {\n    sortOrders: [\"descending\", \"unsorted\"],\n    defaultColumn: \"firstName\",\n  };\n  dataTable.addEventListener(\"icSortChange\", (event: CustomEvent) => {\n    console.log(\"Sort changed\", event.detail);\n  });\n  return dataTable;\n};\n\nexport const DisableSort = (): HTMLIcDataTableElement => {\n  const originalData = [...DATA];\n  const dataTable = createDataTableElement(\"disable-sort\", \"Sort\", COLS, DATA);\n  dataTable.setAttribute(\"sortable\", \"true\");\n  dataTable.setAttribute(\"disable-auto-sort\", \"true\");\n  dataTable.addEventListener(\"icSortChange\", (event: CustomEvent) => {\n    console.log(\"Sort changed\", event.detail);\n    if (event.detail.sorted === \"ascending\") {\n      DATA.sort((a, b) => {\n        const column = event.detail.columnName as keyof typeof DATA[0];\n        if (a[column] < b[column]) return -1;\n        if (a[column] > b[column]) return 1;\n        return 0;\n      });\n    } else if (event.detail.sorted === \"descending\") {\n      DATA.sort((a, b) => {\n        const column = event.detail.columnName as keyof typeof DATA[0];\n        if (a[column] < b[column]) return 1;\n        if (a[column] > b[column]) return -1;\n        return 0;\n      });\n    } else {\n      DATA.splice(0, DATA.length, ...originalData);\n    }\n    dataTable.data = [...DATA];\n  });\n  return dataTable;\n};\n\nexport const DisableAutoSortColumns = () => {\n  const originalData = [...DATA];\n  const dataTable = createDataTableElement(\n    \"disable-auto-sort-columns\",\n    \"Disable sort on columns\",\n    COLS_DISABLE_AUTO_SORT,\n    DATA\n  );\n  dataTable.setAttribute(\"sortable\", \"true\");\n  dataTable.addEventListener(\n    \"icSortChange\",\n    (event: CustomEvent<IcSortEventDetail>) => {\n      const { columnName, sorted } = event.detail;\n      console.log(\"Sort changed\", columnName, sorted);\n      if (columnName !== \"firstName\") return;\n\n      if (sorted === \"unsorted\") {\n        DATA.splice(0, DATA.length, ...originalData);\n      } else {\n        const sortedAscending = sorted === \"ascending\";\n        DATA.sort((a, b) => {\n          if (a[columnName] < b[columnName]) return sortedAscending ? -1 : 1;\n          if (a[columnName] > b[columnName]) return sortedAscending ? 1 : -1;\n          return 0;\n        });\n      }\n      dataTable.data = [...DATA];\n      console.log(\"Custom sort applied\");\n    }\n  );\n\n  return dataTable;\n};\n\nexport const ExcludeColumnsFromSort = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\n    \"exclude-sort\",\n    \"Sort\",\n    COLS_EXCLUDE_SORT,\n    DATA\n  );\n  dataTable.setAttribute(\"sortable\", \"true\");\n  return dataTable;\n};\n\nexport const Pagination = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\n    \"pagination\",\n    \"Pagination\",\n    LONG_COLS,\n    LONG_DATA\n  );\n  dataTable.setAttribute(\"show-pagination\", \"true\");\n  dataTable.paginationBarOptions = {\n    itemsPerPageOptions: [\n      { label: \"5\", value: \"5\" },\n      { label: \"10\", value: \"10\" },\n      { label: \"15\", value: \"15\" },\n    ],\n    showItemsPerPageControl: true,\n    showGoToPageControl: true,\n  };\n  return dataTable;\n};\n\nexport const ColumnOverrides = (): HTMLIcDataTableElement =>\n  createDataTableElement(\n    \"column-overrides\",\n    \"Column Overrides\",\n    COLS_ALIGNMENT,\n    DATA\n  );\n\nexport const RowOverrides = (): HTMLIcDataTableElement =>\n  createDataTableElement(\n    \"row-overrides\",\n    \"Row Overrides\",\n    ROW_HEADER_COLS,\n    ROW_ALIGNMENT\n  );\n\nexport const CellOverrides = (): HTMLIcDataTableElement =>\n  createDataTableElement(\n    \"cell-overrides\",\n    \"Cell Overrides\",\n    COLS,\n    DATA_CELL_ALIGNMENT\n  );\n\nexport const LinksHTMLElements = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\n    \"links-html-elements\",\n    \"Links and HTML Elements Overrides\",\n    COLS_ELEMENTS,\n    DATA_ELEMENTS\n  );\n\n  DATA_ELEMENTS.map((_, index) => {\n    const button1 = document.createElement(\"ic-button\");\n    button1.setAttribute(\"slot\", \"actions-\" + index);\n    button1.setAttribute(\"variant\", \"destructive\");\n    button1.innerHTML = \"Delete\";\n    dataTable.appendChild(button1);\n    button1.addEventListener(\"click\", (e: Event) => {\n      const btn = e.target as HTMLIcButtonElement;\n      btn.assignedSlot!.closest(\"tr\")!.remove();\n    });\n    const button2 = document.createElement(\"ic-button\");\n    button2.setAttribute(\"slot\", \"actions2-\" + index);\n    button2.setAttribute(\"variant\", \"icon-tertiary\");\n    button2.setAttribute(\"aria-label\", \"Delete row\");\n    button2.innerHTML = `<svg\n        viewBox=\"0 0 24 24\"\n        role=\"presentation\"\n        style=\"width: 1.5rem; height: 1.5rem;\"\n      >\n        <path\n          d=\"M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z\"\n          style=\"fill: currentcolor;\"\n        ></path>\n      </svg>`;\n    dataTable.appendChild(button2);\n    button2.addEventListener(\"click\", (e: Event) => {\n      const btn = e.target as HTMLIcButtonElement;\n      btn.assignedSlot!.closest(\"tr\")!.remove();\n    });\n  });\n\n  dataTable.setAttribute(\"row-selection\", \"true\");\n  dataTable.addEventListener(\"icSelectedRowChange\", (event: CustomEvent) => {\n    console.log(\"Selected row changed\", event.detail);\n  });\n  dataTable.addEventListener(\"icSelectAllRows\", (event: CustomEvent) => {\n    console.log(\"Selected all rows\", event.detail);\n  });\n\n  return dataTable;\n};\n\nexport const SlottedElementsWithPagination = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\n    \"slotted-els-with-pagination\",\n    \"Slotted elements with pagination\",\n    COLS_ELEMENTS_SINGLE_ACTION,\n    DATA_ELEMENTS_PAGINATION\n  );\n  dataTable.setAttribute(\"show-pagination\", \"true\");\n  dataTable.paginationBarOptions = {\n    itemsPerPageOptions: [\n      { label: \"5\", value: \"5\" },\n      { label: \"10\", value: \"10\" },\n    ],\n    showItemsPerPageControl: true,\n    showGoToPageControl: true,\n    selectedItemsPerPage: 5,\n  };\n\n  DATA_ELEMENTS_PAGINATION.map((_, index) => {\n    if (index === 4 || index === 9) {\n      const select = document.createElement(\"ic-select\");\n      select.setAttribute(\"slot\", \"actions-\" + index);\n      select.setAttribute(\"placeholder\", \"Placeholder goes here\");\n      dataTable.appendChild(select);\n    } else {\n      const button = document.createElement(\"ic-button\");\n      button.setAttribute(\"slot\", \"actions-\" + index);\n      button.innerHTML = String(index);\n      dataTable.appendChild(button);\n      button.addEventListener(\"click\", (e: Event) => {\n        const btn = e.target as HTMLIcButtonElement;\n        console.log(btn.innerText);\n      });\n    }\n  });\n\n  return dataTable;\n};\n\nexport const Empty = (): HTMLIcDataTableElement =>\n  createDataTableElement(\"empty-state\", \"Empty State\", COLS);\n\nexport const EmptySlotted = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\n    \"empty-slotted\",\n    \"Empty State\",\n    COLS\n  );\n\n  const emptyState = document.createElement(\"ic-empty-state\");\n  emptyState.setAttribute(\"aligned\", \"left\");\n  emptyState.setAttribute(\"heading\", \"Data source error\");\n  emptyState.setAttribute(\"body\", \"Error loading new data\");\n  emptyState.setAttribute(\"slot\", \"empty-state\");\n\n  const button = document.createElement(\"ic-button\");\n  button.innerHTML = \"Retry\";\n  button.setAttribute(\"slot\", \"actions\");\n\n  emptyState.appendChild(button);\n  dataTable.appendChild(emptyState);\n  return dataTable;\n};\n\nexport const Loading = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\n    \"loading\",\n    \"Loading State\",\n    COLS,\n    DATA\n  );\n\n  dataTable.setAttribute(\"loading\", \"true\");\n  return dataTable;\n};\n\nexport const EmptyLoading = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\n    \"empty-loading\",\n    \"Empty and Loading State\",\n    COLS\n  );\n\n  setTimeout(() => {\n    dataTable.setAttribute(\"loading\", \"true\");\n    setTimeout(() => (dataTable.data = DATA), 10);\n  }, 5000);\n  return dataTable;\n};\n\nexport const Updating = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\n    \"updating\",\n    \"Updating State\",\n    COLS,\n    DATA\n  );\n  dataTable.updatingOptions = { progress: 30 };\n  dataTable.setAttribute(\"updating\", \"true\");\n  return dataTable;\n};\n\nexport const CustomIcons = (): HTMLIcDataTableElement =>\n  createDataTableElement(\"custom-icons\", \"Custom icons\", ICON_COLS, ICON_DATA);\n\nexport const CustomRowHeights = (id: string): HTMLElement => {\n  const existing = document.querySelector(`div#${id}`);\n  if (existing) existing.parentElement?.removeChild(existing);\n\n  const dataTable = createDataTableElement(\n    id,\n    \"Custom Row Heights\",\n    COLUMNS_NO_TEXT_WRAP,\n    LONG_DATA_VALUES\n  );\n  dataTable.globalRowHeight = 80;\n  dataTable.variableRowHeight = ({ name, age }) =>\n    name === \"John Smith\" || age === 41 ? 200 : null;\n\n  const resetButton = document.createElement(\"ic-button\");\n  resetButton.addEventListener(\"click\", () => dataTable.resetRowHeights(80));\n  resetButton.innerHTML = \"Reset rowHeight to 80\";\n\n  const setButton = document.createElement(\"ic-button\");\n  setButton.addEventListener(\"click\", () => {\n    dataTable.globalRowHeight = 80;\n    dataTable.variableRowHeight = ({ name, age }) =>\n      name === \"John Smith\" || age === 41 ? 200 : null;\n  });\n  setButton.innerHTML = \"Set global row height\";\n\n  const buttonWrapper = document.createElement(\"div\");\n  buttonWrapper.style[\"display\"] = \"flex\";\n  buttonWrapper.style[\"paddingTop\"] = \"10px\";\n  buttonWrapper.style[\"gap\"] = \"8px\";\n  buttonWrapper.insertAdjacentElement(\"afterbegin\", setButton);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", resetButton);\n\n  const wrapper = document.createElement(\"div\");\n  wrapper.setAttribute(\"id\", id);\n  wrapper.insertAdjacentElement(\"afterbegin\", dataTable);\n  wrapper.insertAdjacentElement(\"beforeend\", buttonWrapper);\n  return wrapper;\n};\n\nexport const TruncationShowHide = (): HTMLElement => {\n  const existing = document.querySelector(`div#truncation-show-hide-wrapper`);\n  if (existing) existing.parentElement?.removeChild(existing);\n\n  const dataTable = CustomRowHeights(\"truncation-show-hide\").querySelector(\n    \"ic-data-table\"\n  )!;\n  dataTable.globalRowHeight = 40;\n  dataTable.variableRowHeight = undefined;\n  dataTable.truncationPattern = \"show-hide\";\n\n  const resetButton = document.createElement(\"ic-button\");\n  resetButton.addEventListener(\"click\", () => dataTable.resetRowHeights(40));\n  resetButton.innerHTML = \"Reset rowHeight to 40\";\n\n  const setButton = document.createElement(\"ic-button\");\n  setButton.addEventListener(\"click\", () => {\n    dataTable.globalRowHeight = 80;\n  });\n  setButton.innerHTML = \"Set globalRowHeight to 80\";\n\n  const updateDataButton = document.createElement(\"ic-button\");\n  updateDataButton.addEventListener(\"click\", () => {\n    setTimeout(() => {\n      dataTable.data = LONG_DATA_VALUES_UPDATE;\n    }, 500);\n  });\n  updateDataButton.innerHTML = \"Update data\";\n\n  const buttonWrapper = document.createElement(\"div\");\n  buttonWrapper.style[\"display\"] = \"flex\";\n  buttonWrapper.style[\"paddingTop\"] = \"10px\";\n  buttonWrapper.style[\"gap\"] = \"8px\";\n  buttonWrapper.insertAdjacentElement(\"afterbegin\", setButton);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", resetButton);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", updateDataButton);\n\n  const wrapper = document.createElement(\"div\");\n  wrapper.setAttribute(\"id\", \"truncation-show-hide-wrapper\");\n  wrapper.insertAdjacentElement(\"afterbegin\", dataTable);\n  wrapper.insertAdjacentElement(\"beforeend\", buttonWrapper);\n  return wrapper;\n};\n\nexport const TruncationTextWrap = (): HTMLElement => {\n  const dataTable = createDataTableElement(\n    \"text-wrap\",\n    \"Text Wrap\",\n    COLUMNS_TEXT_WRAP,\n    TEXT_WRAP_LONG_DATA\n  );\n  dataTable.globalRowHeight = 40;\n  dataTable.variableRowHeight = undefined;\n\n  return dataTable;\n};\n\nexport const TruncationTooltip = (): HTMLElement => {\n  const existing = document.querySelector(`div#truncation-tooltip-wrapper`);\n  if (existing) existing.parentElement?.removeChild(existing);\n  const dataTable =\n    CustomRowHeights(\"truncation-tooltip\").querySelector(\"ic-data-table\")!;\n  dataTable.globalRowHeight = 40;\n  dataTable.variableRowHeight = undefined;\n  dataTable.setAttribute(\"truncation-pattern\", \"tooltip\");\n  dataTable.setAttribute(\"sortable\", \"true\");\n\n  const resetButton = document.createElement(\"ic-button\");\n  resetButton.addEventListener(\"click\", () => dataTable.resetRowHeights(40));\n  resetButton.innerHTML = \"Reset rowHeight to 40\";\n\n  const setButton = document.createElement(\"ic-button\");\n  setButton.addEventListener(\"click\", () => {\n    dataTable.globalRowHeight = 80;\n  });\n  setButton.innerHTML = \"Set global row heights to 80\";\n\n  const buttonWrapper = document.createElement(\"div\");\n  buttonWrapper.style[\"display\"] = \"flex\";\n  buttonWrapper.style[\"paddingTop\"] = \"10px\";\n  buttonWrapper.style[\"gap\"] = \"8px\";\n  buttonWrapper.insertAdjacentElement(\"afterbegin\", setButton);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", resetButton);\n\n  const wrapper = document.createElement(\"div\");\n  wrapper.setAttribute(\"id\", \"truncation-tooltip-wrapper\");\n  wrapper.insertAdjacentElement(\"afterbegin\", dataTable);\n  wrapper.insertAdjacentElement(\"beforeend\", buttonWrapper);\n  return wrapper;\n};\n\nexport const CustomTitleBar = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\n    \"custom-title-bar\",\n    \"Custom Title Bar\",\n    COLS,\n    DATA\n  );\n\n  const titleBar = document.createElement(\"ic-data-table-title-bar\");\n  titleBar.setAttribute(\n    \"description\",\n    \"Data table description that describes the purpose of the table.\"\n  );\n  titleBar.setAttribute(\"metadata\", \"128 items | 32gb | Updated: 01/02/03\");\n  titleBar.setAttribute(\"slot\", \"title-bar\");\n\n  const customDescription = document.createElement(\"ic-typography\");\n  customDescription.setAttribute(\"variant\", \"body\");\n  customDescription.setAttribute(\"slot\", \"description\");\n  customDescription.innerHTML =\n    '<p>This is some text and <ic-link href=\"/\" inline=\"\">this is an inline link</ic-link> within the text.</p>';\n\n  const primaryButton = document.createElement(\"ic-button\");\n  primaryButton.setAttribute(\"slot\", \"primary-action\");\n  primaryButton.setAttribute(\"size\", \"small\");\n  primaryButton.innerHTML = \"Primary\";\n\n  const customButtons = [1, 2, 3].map((x) => {\n    const customButton = document.createElement(\"ic-button\");\n    customButton.setAttribute(\"slot\", \"custom-actions\");\n    customButton.setAttribute(\"variant\", \"icon\");\n    customButton.setAttribute(\"aria-label\", `Icon ${x}`);\n    customButton.innerHTML =\n      '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 -960 960 960\" width=\"24\"><path d=\"M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h600q24 0 42 18t18 42v600q0 24-18 42t-42 18H180Zm0-60h600v-600H180v600Zm56-97h489L578-473 446-302l-93-127-117 152Zm-56 97v-600 600Z\" /></svg>';\n    return customButton;\n  });\n\n  titleBar.append(primaryButton, customDescription);\n  customButtons.forEach((button) => titleBar.append(button));\n  dataTable.appendChild(titleBar);\n\n  return dataTable;\n};\n\nexport const UpdatingData = (): HTMLElement => {\n  const existing = document.querySelector(`div#updating-data-wrapper`);\n  if (existing) existing.parentElement?.removeChild(existing);\n  const dataTable = createDataTableElement(\n    \"updating-data\",\n    \"Updating Data\",\n    LONG_COLS,\n    []\n  );\n  const pageOptions = [{ label: \"5\", value: \"5\" }];\n\n  dataTable.showPagination = true;\n  dataTable.paginationBarOptions = {\n    itemsPerPageOptions: pageOptions,\n    showItemsPerPageControl: true,\n    showGoToPageControl: true,\n    rangeLabelType: \"page\",\n  };\n\n  const updateDataButton = document.createElement(\"ic-button\");\n  updateDataButton.addEventListener(\"click\", () => {\n    dataTable.data = [...dataTable.data!, ...LONG_DATA];\n  });\n  updateDataButton.innerHTML = \"Update data\";\n\n  const clearDataButton = document.createElement(\"ic-button\");\n  clearDataButton.addEventListener(\"click\", () => {\n    dataTable.data = [];\n  });\n  clearDataButton.innerHTML = \"Clear data\";\n\n  const updatePaginationButton = document.createElement(\"ic-button\");\n  updatePaginationButton.addEventListener(\"click\", () => {\n    dataTable.paginationBarOptions = {\n      ...dataTable.paginationBarOptions,\n      itemsPerPageOptions: [\n        { label: \"10\", value: \"10\" },\n        { label: \"20\", value: \"20\" },\n        { label: \"50\", value: \"50\" },\n      ],\n    };\n  });\n  updatePaginationButton.innerHTML = \"Update page lengths\";\n\n  const resetPaginationButton = document.createElement(\"ic-button\");\n  resetPaginationButton.addEventListener(\"click\", () => {\n    dataTable.paginationBarOptions = {\n      ...dataTable.paginationBarOptions,\n      itemsPerPageOptions: pageOptions,\n    };\n  });\n  resetPaginationButton.innerHTML = \"Reset page lengths\";\n\n  const buttonWrapper = document.createElement(\"div\");\n  buttonWrapper.style[\"display\"] = \"flex\";\n  buttonWrapper.style[\"paddingTop\"] = \"10px\";\n  buttonWrapper.style[\"gap\"] = \"8px\";\n  buttonWrapper.insertAdjacentElement(\"afterbegin\", updateDataButton);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", clearDataButton);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", updatePaginationButton);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", resetPaginationButton);\n\n  const wrapper = document.createElement(\"div\");\n  wrapper.setAttribute(\"id\", \"updating-data-wrapper\");\n  wrapper.insertAdjacentElement(\"afterbegin\", dataTable);\n  wrapper.insertAdjacentElement(\"beforeend\", buttonWrapper);\n  return wrapper;\n};\n\nexport const SlottedPagination = (): HTMLIcDataTableElement => {\n  let itemsPerPage = 5;\n  const dataTable = createDataTableElement(\n    \"slotted-pagination\",\n    \"slotted-pagination\",\n    LONG_COLS,\n    LONG_DATA\n  );\n  const paginationBar = document.createElement(\"ic-pagination-bar\");\n  paginationBar.setAttribute(\"total-items\", `${LONG_DATA.length}`);\n  paginationBar.setAttribute(\"show-items-per-page-control\", \"true\");\n  paginationBar.itemsPerPageOptions = [\n    { label: \"5\", value: \"5\" },\n    { label: \"10\", value: \"10\" },\n  ];\n  paginationBar.setAttribute(\"slot\", \"pagination-bar\");\n  paginationBar.addEventListener(\"icItemsPerPageChange\", (ev) => {\n    itemsPerPage = ev.detail.value;\n    dataTable.data = LONG_DATA.slice(0, itemsPerPage);\n  });\n  paginationBar.addEventListener(\"icPageChange\", (ev) => {\n    const fromRow = (ev.detail.value - 1) * itemsPerPage;\n    dataTable.data = LONG_DATA.slice(fromRow, fromRow + itemsPerPage);\n  });\n  dataTable.appendChild(paginationBar);\n  return dataTable;\n};\n\nexport const ActionElement = (): HTMLElement => {\n  const dataTable = createDataTableElement(\n    \"action-element\",\n    \"Action Element\",\n    COLS,\n    DATA\n  );\n\n  const actionElement = document.createElement(\"div\");\n  actionElement.setAttribute(\"slot\", \"firstName-0-action-element\");\n  actionElement.setAttribute(\"style\", \"display: flex\");\n\n  const downloadButtonEl = document.createElement(\"ic-button\");\n  downloadButtonEl.setAttribute(\"variant\", \"icon\");\n  downloadButtonEl.setAttribute(\"size\", \"small\");\n  downloadButtonEl.addEventListener(\"click\", () =>\n    alert(\"Download button clicked\")\n  );\n  downloadButtonEl.innerHTML = downloadIconSVG;\n  downloadButtonEl.setAttribute(\"aria-label\", \"Download data\");\n  actionElement.appendChild(downloadButtonEl);\n\n  const cellphoneButtonEl = document.createElement(\"ic-button\");\n  cellphoneButtonEl.setAttribute(\"variant\", \"icon\");\n  cellphoneButtonEl.setAttribute(\"size\", \"small\");\n  cellphoneButtonEl.addEventListener(\"click\", () =>\n    alert(\"Cellphone button clicked\")\n  );\n  cellphoneButtonEl.innerHTML = cellphoneIconSVG;\n  cellphoneButtonEl.setAttribute(\"aria-label\", \"Call phone\");\n  actionElement.appendChild(cellphoneButtonEl);\n\n  const copyButtonEl = document.createElement(\"ic-button\");\n  copyButtonEl.setAttribute(\"variant\", \"icon\");\n  copyButtonEl.setAttribute(\"size\", \"small\");\n  copyButtonEl.addEventListener(\"click\", () => alert(\"Copy button clicked\"));\n  copyButtonEl.innerHTML = copyIconSVG;\n  copyButtonEl.setAttribute(\"aria-label\", \"Copy data\");\n  actionElement.appendChild(copyButtonEl);\n\n  dataTable.appendChild(actionElement);\n\n  return dataTable;\n};\n\nexport const MissingCellData = (): HTMLElement =>\n  createDataTableElement(\n    \"missing-cell-data\",\n    \"Missing Cell Data\",\n    COLS,\n    DATA_WITH_EMPTY_VALUES\n  );\n\nexport const SelectWithCheckbox = (): HTMLElement => {\n  const dataTable = createDataTableElement(\n    \"select-using-checkboxes\",\n    \"Select using checkboxes\",\n    COLS,\n    DATA\n  );\n\n  dataTable.setAttribute(\"row-selection\", \"true\");\n  dataTable.addEventListener(\"icSelectedRowChange\", (event: CustomEvent) => {\n    console.log(\"Selected row changed\", event.detail);\n  });\n  dataTable.addEventListener(\"icSelectAllRows\", (event: CustomEvent) => {\n    console.log(\"Selected all rows\", event.detail);\n  });\n\n  return dataTable;\n};\n\nexport const DevArea = (): HTMLElement => {\n  const existing = document.querySelector(`div#dev-area-wrapper`);\n  if (existing) existing.parentElement?.removeChild(existing);\n  const dataTable = createDataTableElement(\n    \"dev-area\",\n    \"Basic Table\",\n    COLS,\n    VERY_LONG_DATA(5)\n  );\n  dataTable.sortable = true;\n  dataTable.variableRowHeight = undefined;\n  dataTable.showPagination = true;\n  dataTable.addEventListener(\"icDataLoaded\", () => {\n    console.log(\"Data loaded\");\n  });\n  dataTable.addEventListener(\"icColumnsLoaded\", () => {\n    console.log(\"Columns loaded\");\n  });\n\n  const description = document.createElement(\"ic-typography\");\n  description.innerHTML = `\n  Use the buttons to change the state of the Data Tables component.<br /><br />\n  By default, the global row height is set to <b>'auto'</b>. This means the row height will be dictated by the cell with the most lines.<br />\n  In order to view the truncated data, the truncation pattern must first be set and then the row height. The reason for this is, the data will know how to behave if the cell space is reduced.<br />\n  Setting the truncation pattern while the row height is set to auto will not display the truncated data as the table cells\n  will have enough space to show all table cell data.<br /><br />\n  In this demo, the even rows have <b>'textWrap'</b> applied.\n  `;\n\n  const resetButton = document.createElement(\"ic-button\");\n  resetButton.addEventListener(\"click\", () => dataTable.resetRowHeights());\n  resetButton.innerHTML = \"Reset row height: auto\";\n\n  const rowHeight40Btn = document.createElement(\"ic-button\");\n  rowHeight40Btn.addEventListener(\"click\", () => {\n    dataTable.globalRowHeight = 40;\n  });\n  rowHeight40Btn.innerHTML = \"Set global row height: 40\";\n\n  const rowHeight80Btn = document.createElement(\"ic-button\");\n  rowHeight80Btn.addEventListener(\"click\", () => {\n    dataTable.globalRowHeight = 80;\n  });\n  rowHeight80Btn.innerHTML = \"Set global row height: 80\";\n\n  const rowHeight150Btn = document.createElement(\"ic-button\");\n  rowHeight150Btn.addEventListener(\"click\", () => {\n    dataTable.globalRowHeight = 150;\n  });\n  rowHeight150Btn.innerHTML = \"Set global row height: 150\";\n\n  const updateRows200Btn = document.createElement(\"ic-button\");\n  updateRows200Btn.addEventListener(\"click\", () => {\n    setTimeout(() => {\n      dataTable.data = VERY_LONG_DATA(200);\n    }, 500);\n  });\n  updateRows200Btn.innerHTML = \"Update data rows: 200\";\n\n  const tooltipTruncationBtn = document.createElement(\"ic-button\");\n  tooltipTruncationBtn.textContent = \"truncationPattern: tooltip\";\n  tooltipTruncationBtn.addEventListener(\"click\", () => {\n    dataTable.truncationPattern = \"tooltip\";\n  });\n\n  const showHideTruncationBtn = document.createElement(\"ic-button\");\n  showHideTruncationBtn.textContent = \"truncationPattern: show-hide\";\n  showHideTruncationBtn.addEventListener(\"click\", () => {\n    dataTable.truncationPattern = \"show-hide\";\n  });\n\n  const buttonWrapper = document.createElement(\"div\");\n  buttonWrapper.className = \"wrapper\";\n  buttonWrapper.style[\"display\"] = \"flex\";\n  buttonWrapper.style[\"flexWrap\"] = \"wrap\";\n  buttonWrapper.style[\"paddingBlock\"] = \"10px\";\n  buttonWrapper.style[\"gap\"] = \"8px\";\n\n  buttonWrapper.insertAdjacentElement(\"beforeend\", tooltipTruncationBtn);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", showHideTruncationBtn);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", rowHeight40Btn);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", rowHeight80Btn);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", rowHeight150Btn);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", resetButton);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", updateRows200Btn);\n\n  const wrapper = document.createElement(\"div\");\n  wrapper.setAttribute(\"id\", \"dev-area-wrapper\");\n  wrapper.insertAdjacentElement(\"beforeend\", description);\n  wrapper.insertAdjacentElement(\"beforeend\", buttonWrapper);\n  wrapper.insertAdjacentElement(\"beforeend\", dataTable);\n  return wrapper;\n};\n\nexport const CellDescriptions = (): HTMLIcDataTableElement => {\n  const dataTable = createDataTableElement(\n    \"cell-descriptions\",\n    \"Cell descriptions data table\",\n    COLS,\n    DATA_ELEMENTS_WITH_DESCRIPTIONS\n  );\n  dataTable.setAttribute(\"sortable\", \"true\");\n  return dataTable;\n};\n\nexport const LongCellDescriptions = (): HTMLElement => {\n  const dataTable = createDataTableElement(\n    \"long-cell-descriptions\",\n    \"Cell descriptions data table auto with tooltip\",\n    COLS,\n    LONG_DATA_ELEMENTS_WITH_DESCRIPTIONS\n  );\n\n  const tooltipTruncationBtn = document.createElement(\"ic-button\");\n  tooltipTruncationBtn.textContent = \"truncationPattern: tooltip\";\n  tooltipTruncationBtn.addEventListener(\"click\", () => {\n    dataTable.truncationPattern = \"tooltip\";\n  });\n\n  const showHideTruncationBtn = document.createElement(\"ic-button\");\n  showHideTruncationBtn.textContent = \"truncationPattern: show-hide\";\n  showHideTruncationBtn.addEventListener(\"click\", () => {\n    dataTable.truncationPattern = \"show-hide\";\n  });\n\n  const buttonWrapper = document.createElement(\"div\");\n  buttonWrapper.className = \"wrapper\";\n  buttonWrapper.style[\"display\"] = \"flex\";\n  buttonWrapper.style[\"flexWrap\"] = \"wrap\";\n  buttonWrapper.style[\"paddingBlock\"] = \"10px\";\n  buttonWrapper.style[\"gap\"] = \"8px\";\n  const resetButton = document.createElement(\"ic-button\");\n  resetButton.addEventListener(\"click\", () => dataTable.resetRowHeights());\n  resetButton.innerHTML = \"Reset row height: auto\";\n\n  const rowHeight40Btn = document.createElement(\"ic-button\");\n  rowHeight40Btn.addEventListener(\"click\", () => {\n    dataTable.globalRowHeight = 40;\n  });\n  rowHeight40Btn.innerHTML = \"Set global row height: 40\";\n\n  const rowHeight80Btn = document.createElement(\"ic-button\");\n  rowHeight80Btn.addEventListener(\"click\", () => {\n    dataTable.globalRowHeight = 80;\n  });\n  rowHeight80Btn.innerHTML = \"Set global row height: 80\";\n\n  const rowHeight150Btn = document.createElement(\"ic-button\");\n  rowHeight150Btn.addEventListener(\"click\", () => {\n    dataTable.globalRowHeight = 150;\n  });\n  rowHeight150Btn.innerHTML = \"Set global row height: 150\";\n\n  buttonWrapper.insertAdjacentElement(\"beforeend\", tooltipTruncationBtn);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", showHideTruncationBtn);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", rowHeight40Btn);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", rowHeight80Btn);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", rowHeight150Btn);\n  buttonWrapper.insertAdjacentElement(\"beforeend\", resetButton);\n\n  const wrapper = document.createElement(\"div\");\n  wrapper.insertAdjacentElement(\"beforeend\", buttonWrapper);\n  wrapper.insertAdjacentElement(\"beforeend\", dataTable);\n  return wrapper;\n};\n\nconst TableContent = (classToApply: string) => {\n  const strClass = \"ic-table \" + \"ic-table-\" + classToApply;\n  return html`<table class=\"${strClass}\">\n    <thead>\n      <tr>\n        <th>First name</th>\n        <th>Last name</th>\n        <th>Age</th>\n        <th>Job title</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Joe</td>\n        <td>Ashford</td>\n        <td>30</td>\n        <td>Developer</td>\n      </tr>\n      <tr>\n        <td>Sarah</td>\n        <td>Smith</td>\n        <td>28</td>\n        <td>Senior Software Developer</td>\n      </tr>\n      <tr>\n        <td>Mark</td>\n        <td>Owens</td>\n        <td>45</td>\n        <td>Team Lead</td>\n      </tr>\n    </tbody>\n  </table>`;\n};\n\nexport const NativeTable = () => {\n  return html`<style>\n      .content {\n        color: var(--ic-color-text-primary);\n      }\n    </style>\n    <div class=\"content\">\n      <h4>Styled native &lt;table&gt;</h4>\n      <br />\n      <code>&lt;table class=\"ic-table\"&gt;</code>\n      <br />\n      <br />\n      ${TableContent(\"\")}\n      <br />\n      <br />\n      <h4>Dense native &lt;table&gt;</h4>\n      <br />\n      <code>&lt;table class=\"ic-table ic-table-dense\"&gt;</code>\n      <br />\n      <br />\n      ${TableContent(\"dense\")}\n      <br />\n      <br />\n      <h4>Spacious native &lt;table&gt;</h4>\n      <br />\n      <code>&lt;table class=\"ic-table ic-table-spacious\"&gt;</code>\n      <br />\n      <br />\n      ${TableContent(\"spacious\")}\n      <br />\n      <br />\n      <h4>Embedded native &lt;table&gt;</h4>\n      <br />\n      <code>&lt;table class=\"ic-table ic-table-embedded\"&gt;</code>\n      <br />\n      <br />\n      ${TableContent(\"embedded\")}\n    </div>`;\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport readme from \"./readme.md\";\nimport {\n  ActionElement,\n  Basic,\n  CellDescriptions,\n  CellOverrides,\n  ColumnOverrides,\n  CustomIcons,\n  CustomRowHeights,\n  CustomTitleBar,\n  DataTableSizing,\n  Dense,\n  DevArea,\n  DisableAutoSortColumns,\n  DisableSort,\n  Embedded,\n  Empty,\n  EmptySlotted,\n  ExcludeColumnsFromSort,\n  HeaderTruncation,\n  HiddenCol,\n  LargeDataSet,\n  LinksHTMLElements,\n  Loading,\n  LongCellDescriptions,\n  MissingCellData,\n  Pagination,\n  RowHeaders,\n  RowOverrides,\n  Scrollable,\n  SlottedElementsWithPagination,\n  SlottedPagination,\n  Sort,\n  SortOptions,\n  Spacious,\n  TruncationShowHide,\n  TruncationTextWrap,\n  TruncationTooltip,\n  Updating,\n  UpdatingData,\n  SelectWithCheckbox,\n  NativeTable,\n} from \"./story-data\";\n\nexport default {\n  title: \"Web Components/Data Table\",\n  component: \"ic-data-table\",\n  parameters: {\n    componentAPI: {\n      data: readme,\n    },\n  },\n};\n\n/**\n * Use the data table component to display data in a tabular form.\n *\n * There are two required props for data table:\n * - Caption: `string`\n * - Columns: `IcDataTableColumnObject[]`\n *\n * Click the 'Component API' tab to view all the available props, events and slots for data tables.\n *\n * To use the data table component, import `@ukic/canary-web-components` into your application.\n */\nexport const Default = {\n  render: () => Basic(),\n  name: \"Basic\",\n};\n\nexport const LargeDataSetExample = {\n  render: () => LargeDataSet(),\n  name: \"Large data set\",\n};\n\n/**\n * The `embedded` boolean adds a border around the table so it can be added as a standalone table and is not required to stretch the full width of its parent container.\n */\nexport const EmbeddedExample = {\n  render: () => Embedded(),\n  name: \"Embedded\",\n};\n\n/**\n * The `density` variant provides three different styles for the data table:\n * - `dense` reduces the padding and font size of the table cells to give the data a more dense style.\n * - `default` provides a padding of `8px` which is the default spacing. This variant is seen in the [first](#basic) example.\n * - `spacious` gives the data table a more spacious look and feel by increasing the vertical padding as well as the font size.\n */\nexport const DenseExample = {\n  render: () => Dense(),\n  name: \"Dense\",\n};\n\nexport const SpaciousExample = {\n  render: () => Spacious(),\n  name: \"Spacious\",\n};\n\n/**\n * When a height for the data table is set, the scroll bar will appear to the right. However, by default, the column headers will move up and out of view making it difficult to understand what the data means.\n * This can be mitigated by using the `sticky-column-headers` prop which takes a boolean. This can be toggled within the example below.\n */\nexport const StickyColumnHeaders = {\n  render: () => Scrollable(),\n  name: \"Sticky column headers\",\n};\n\n/**\n * By default, column header labels will wrap when they exceed the column width. To keep the column header height constant, the `columnHeaderTruncation` can be used. When set to `true`, the label will appear truncated and will display a tooltip with the full text when hovered over.\n */\nexport const ColumnHeaderTruncation = {\n  render: () => HeaderTruncation(),\n  name: \"Column header truncation\",\n};\n\n/**\n * Row headers allow headings to be added to individual rows and styles them as column headings. The column collection includes an additional `header` key which aligns with the row headers. The structure of the `header` column is the same as the columns (i.e. key, title, dataType).\n * The data array includes an additional `header` key within the `rowOptions` which takes a string intended to be the title of the row header.\n */\nexport const RowHeadersExample = {\n  render: () => RowHeaders(),\n  name: \"Row headers\",\n};\n\n/**\n * Set `sortable` to `true` to set the sort functionality on all columns. Sorting can be set to `unsorted`, `ascending` and `descending` by press the sort buttons next to the column heading.\n */\nexport const Sortable = {\n  render: () => Sort(),\n  name: \"Sortable\",\n};\n\n/**\n * It is possible to change the sort options for the sort buttons. The `sortOptions` prop takes an object with `sortOrders` and `defaultColumn`. `sortOrders` allows the sort order to be amended as we all as remove a sort type. Such as changing the order to `descending`, `unsorted` and remove `ascending`. `defaultColumn` sets which column is ordered by default. This is set by padding the column key as the `defaultColumn` value.\n */\nexport const SortOptionsExample = {\n  render: () => SortOptions(),\n  name: \"Sort options\",\n};\n\n/**\n * Set `sortable` to `true` and set `disable-auto-sort` to `true` to enable external sorting functionality.\n */\nexport const DisableSortExample = {\n  render: () => DisableSort(),\n  name: \"Disable sort\",\n};\n\n/**\n * Alternatively, set `disable-auto-sort` to `true` within the column object to have it apply only to certain columns that may require special custom sorting.\n */\nexport const DisableAutoSortOnColumns = {\n  render: () => DisableAutoSortColumns(),\n  name: \"Disable sort on columns\",\n};\n\n/**\n * Adding 'excludeColumnFromSort: true` to the column object excludes that column from displaying the sort button.\n */\nexport const ExcludeColumnsFromSortExample = {\n  render: () => ExcludeColumnsFromSort(),\n  name: \"Exclude columns from sort\",\n};\n\n/**\n * Adding 'hidden: true` to the column object hides that column. In this example, the Age column is hidden.\n */\nexport const HideColumnExample = {\n  render: () => HiddenCol(),\n  name: \"Column visibility\",\n};\n\n/**\n * Pagination allows large data sets to be split into pages in order to make the data easier to digest. Setting `show-pagination` to `true` will add the `ic-pagination` component to the bottom of the table. There a several sub components within pagination which are set via the `paginationBarOptions` prop:\n * - `itemsPerPage` allows customization on the number of items on each page. This requires a collection with `label` and `value` key pairs.\n * - `showItemsPerPageControl` shows or hides the `itemsPerPage` component using `true` or `false`.\n * - `showGoToPageControl` displays controls which allows jumping between pages in a non-linear approach.\n */\nexport const PaginationExample = {\n  render: () => Pagination(),\n  name: \"Pagination\",\n};\n\n/**\n * There may be a requirement to style a column differently to the rest of the data to add emphasis. For example, centre align data within the 'first name' column. To do this, add `columnAlignment` to the column. `columnAlignment` takes an object which sets the `horizontal` and `vertical` property:\n * - `horizontal` accepts `left`, `right` or `center`.\n * - `vertical` accepts `top`, `middle`, `bottom`.\n *\n * `emphasis` can be added to the column by setting `high` or `low`.\n */\nexport const ColumnOverridesExample = {\n  render: () => ColumnOverrides(),\n  name: \"Column overrides\",\n};\n\n/**\n * Row overrides allow styling to be applied at a row level and is set within the `rowOptions` object. The following row overrides options apply:\n * - `rowAlignment` accepts `left`, `right` and `center`.\n * - `emphasis` accepts `high` or `low`.\n * - `textWrap` accepts `true` or `false`.\n */\nexport const RowOverridesExample = {\n  render: () => RowOverrides(),\n  name: \"Row overrides\",\n};\n\n/**\n * Cell overrides allows styling to be applied at a cell level. The cell which requires an override accepts an object which requires `data` and can contain `cellAlignment` and/or `emphasis`:\n * - `data` is the cell value.\n * - `emphasis` accepts `high` or `low`.\n * - `cellAlignment` accepts an object with the following key pairs:\n *  - `horizontal` accepts `left`, `right` or `center`.\n *  - `vertical` accepts `top`, `middle`, `bottom`.\n */\nexport const CellOverridesExample = {\n  render: () => CellOverrides(),\n  name: \"Cell overrides\",\n};\n\n/**\n * When the table receives no data (either `null` or an empty array) it will automatically show an `ic-empty-state` below the headers.\n */\nexport const DefaultEmptyState = {\n  render: () => Empty(),\n  name: \"Empty state\",\n};\n\n/**\n * You can customise your own `ic-empty-state` component and slot it into the data table using the `empty-state` slot, to reflect different scenarios.\n */\nexport const SlottedEmptyState = {\n  render: () => EmptySlotted(),\n  name: \"Slotted empty state\",\n};\n\n/**\n * When a user wants to fetch their data asynchronously, a `loading` prop can be set to `true`, which then renders a circular variant of the `ic-loading-indicator`.\n * The loading indicator can be customised using the `loadingOptions` prop:\n * - `description` sets the aria-label of the component\n * - `label` sets the visual message\n * - `labelDuration` is the number of milliseconds before the label changes\n * - `overlay` renders a dark overlay over the previous data set while new data is loaded\n *\n * If it needs to be determinate, use `max`, `min` and `progress`.\n */\nexport const LoadingState = {\n  render: () => Loading(),\n  name: \"Loading state\",\n  height: \"720px\",\n};\n\n/**\n * If data in the table has changed, an `updating` prop has been supplied to show a linear `ic-loading-indicator` just above the data rows.\n *\n * This prop is also accompanied by an `updatingOptions` prop, which contains similar options to `loadingOptions`, minus `label` and `labelDuration` since the linear version is displayed.\n */\nexport const UpdatingState = {\n  render: () => Updating(),\n  name: \"Updating state\",\n};\n\n/**\n * Custom HTML elements can be slotted or passed via the `data` prop to display in certain cells. When using the slotted method, the slot name follows the format of `{COLUMN_TAG}-{ROW_INDEX}`.\n */\nexport const LinksAndElementsInData = {\n  render: () => LinksHTMLElements(),\n  name: \"Links and elements in data\",\n};\n\nexport const SlottedElementsWithPaginationExample = {\n  render: () => SlottedElementsWithPagination(),\n  name: \"Slotted elements with pagination\",\n};\n\n/**\n * Custom icons can be added to cells, columns and headers in the data table. To add it to headers, set the icon via the `columns` prop:\n * ```\n * icon: {\n *  icon: //ICON_STRING_GOES_HERE,\n *  onAllCells: //Boolean to determine whether column header icon should be replicated on all cells in the column,\n *  hideOnHeader: //Boolean for whether this icon should only be shown on cells and not on the header,\n * }\n * ```\n *\n * To add icons to individual cells, they can be added through the `data` prop, in a similar method to overriding the cell. Cell icons take priority over the `onAllCells` prop, meaning specific cells can be made to stand out.\n *\n * Both cells and headers can also have icons slotted in. Cells use the slot format: `{COLUMN_KEY}-{ROW_INDEX}-icon`, and headers use the format: `{COLUMN_KEY}-column-icon`. Slotted icons take priority over icons inserted via the `columns` and `data` props.\n */\nexport const CustomIconsExample = {\n  render: () => CustomIcons(),\n  name: \"Custom icons\",\n};\n\n/**\n * A data table can have its rows use custom heights, to help display more data per row. This involves using the `globalRowHeight` prop, which applies this custom height to all rows.\n *\n * For a more granular approach, `variableRowHeight` exists. This is passed through the data object for each row of data, as well as that row's `index`. Using these properties, you can write a custom function that will return a number for that row's height based on your criteria.\n * Returning `null` from this function means that the row will use the `globalRowHeight` property value.\n *\n * **_NOTE:_** If the data table uses the `density` prop, then your custom value will be scaled depending on the density, in order to keep content readable as the text size changes:\n * - `Dense` = 80% of `globalRowHeight` or `variableRowHeight`\n * - `Spacious` = 120% of `globalRowHeight` or `variableRowHeight`\n *\n * E.G: If `globalRowHeight` = 100, a dense table will set the height to be **_80_**.\n *\n * **_NOTE:_** If a cell has a description (see \"Description and icons within cells\"), then the row height for that individual row will be increased by the description height in order to fully display it.\n *\n * E.G: If `globalRowHeight` = 100 and a cell has a description with a height of 20, then the row height for that cell's row will be set to **_120_**.\n *\n * To quickly reset all row heights to the default, you can run the `resetRowHeights` method.\n *\n * If you'd rather let the row calculate its own height based on its content, either set `globalRowHeight` to `auto`, or return `auto` from `variableRowHeight`.\n */\nexport const CustomRowHeightsExample = {\n  render: () => CustomRowHeights(\"custom-row-heights-example\"),\n  name: \"Custom row heights\",\n};\n\n/**\n * To add additional information about the data held in your data table, you can use the `title-bar` slot to add an `ic-data-table-title-bar`, which will appear above the column headers.\n *\n * The title bar can have a description and metadata added, to provide supporting information to display some context about the data to the user. Primary and custom action slots also exist to allow for actions to be performed that are related to the data, which can be prominently displayed.\n *\n * The `ic-data-table-title-bar` has a built-in density selector, which allows a user to quickly change the size and padding of cells to make it more readable. This can also be hidden if preferred.\n *\n * More details on `ic-data-table-title-bar` can be found in the <ic-link href=\"/?path=/story/web-components-data-table-title-bar--basic\" inline=\"\">data table title bar documentation</ic-link>.\n */\nexport const CustomTitleBarExample = {\n  render: () => CustomTitleBar(),\n  name: \"Custom title bar\",\n};\n\n/**\n * The example below demonstrates how the pagination bar responds to changes within the data.\n *\n * More details on `ic-pagination-bar` can be found in the <ic-link href=\"/?path=/story/web-components-pagination-bar--docs\" inline=\"\">pagination bar documentation</ic-link>.\n */\nexport const UpdatingDataExample = {\n  render: () => UpdatingData(),\n  name: \"Updating data\",\n};\n\n/**\n * There may be scenarios when using `ic-data-table` when pagination and data fetching is done using a backend API.\n *\n * To enable this behaviour, the `pagination-bar` slot can be utilised to provide a custom `ic-pagination-bar` component, allowing the user to have more control over how their data is displayed & interacted with.\n */\nexport const SlottedPaginationBar = {\n  render: () => SlottedPagination(),\n  name: \"Slotted pagination bar\",\n};\n\n/**\n * When a row is given a set height, and has content that no longer fits into the cell area, the content becomes truncated. There are two types of truncation:\n * - `tooltip`: Adds a line-clamp to the cell and displays the message in a tooltip.\n * - `show-hide`: Adds a `See more/See less` button underneath the cell text, allowing the user to display the full content should they wish.\n *\n * These values are set using the `truncation-pattern` attribute.\n *\n * By default, `global-row-height` is set to `auto`. If the `truncation-pattern` attribute is set to `tooltip` or `show-hide` while `global-row-height` is `auto`, the data will not appear truncated due to the row height being set to the data which has the most height.\n *\n * To see the data truncated, the `global-row-height` or `variable-row-height` needs to be explicitly set to a height which is shorter than data which has the most lines.\n *\n * **_NOTE:_** `truncation-pattern` only applies to a cell's main data value. If a cell has a description (see \"Description and icons within cells\") then this will not be truncated and will still be visible beyond the truncation.\n */\nexport const DataTruncationTooltip = {\n  render: () => TruncationTooltip(),\n  name: \"Data truncation tooltip\",\n};\n\nexport const TruncationShowHideExample = {\n  render: () => TruncationShowHide(),\n  name: \"Data truncation see more / see less\",\n};\n\n/**\n * Text can be set to wrap in a particular column, row or cell. Any column, row or cell that text wrap is applied to will ignore the custom height if the custom height is too small and the full content will be shown.\n *\n * To set text to wrap in a column, add `textWrap: true` as a key value:\n * ```\n * const column = [\n *  { key: \"name\", title: \"Name\", dataType: \"string\" },\n *  ...\n * ]\n * ```\n *\n * To set text to wrap in a row, add `rowOptions: { textWrap: true }` to an object within the data array:\n * ```\n * const data = [\n *  {\n *    name: \"Tim Rayes\",\n *    age: 41,\n *    department: \"Sales and Marketing\",\n *    employeeNumber: 3,\n *    jobTitle:\n *      \"Regional Sales and Marketing Strategy Director (Europe, the Middle East, and Africa)\",\n *    rowOptions: {\n *      textWrap: true\n *    }\n *  },\n *  ...\n * ]\n * ```\n *\n * To set text wrap in a cell, add `textWrap` to a data key within an object:\n * ```\n * const data = [\n *  {\n *    name: {\n *      data:\"Tim Rayes\",\n *      textWrap: true\n *    },\n *    age: 41,\n *    department: \"Sales and Marketing\",\n *    employeeNumber: 3,\n *    jobTitle:\n *      \"Regional Sales and Marketing Strategy Director (Europe, the Middle East, and Africa)\",\n *  },\n *  ...\n * ]\n * ```\n */\nexport const TextWrap = {\n  render: () => TruncationTextWrap(),\n  name: \"Text wrap\",\n};\n\n/**\n * The dimensions of the data table can be set using the `width` and `height` attributes. The attribute accepts dimensions in `px`, `%`, `rem` and `auto`.\n *\n * By default, the width is set to `100%` so the table spans across the viewport or parent container.\n *\n * To set the column widths, the `columnWidth` property should be added to the relevant column within the column array.\n *\n * The [table layout](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout) attribute is vital to how the table resizing and column widths behave. By default, the table layout is set to `fixed`. If no column width is set, the columns widths will be equally set within the viewport or parent container.\n *\n * A table with a `fixed` layout will force the table column widths to take precedence over the data with the table cells.\n *\n * For the column widths to be dictated by the content inside, set the `table-layout` attribute to `auto` and set the table `width` to `auto`.\n *\n * To set the min and max width of a table cell, set the `table-layout` attribute to `auto` and set a `minWidth` or `maxWidth` value into `columnWidth`. The min and max width accepts dimensions in `px`, `%`, `rem`.\n */\nexport const TableSizingAndColumnWidth = {\n  render: () => DataTableSizing(),\n  name: \"Table sizing and column width\",\n};\n\n/**\n * The cells can contain a slotted `actionElement`. The `actionElement` will be displayed to the right of the cell data.\n */\nexport const ActionElements = {\n  render: () => ActionElement(),\n  name: \"Action element\",\n};\n\n/**\n * Descriptions and icons can be included in the cells by proving a `description` field in the data. This will populate the cell with an icon (if provided) and a text string underneath the cell data. This can be applied to any cell.\n *\n * You can provide a `description` object with or without an icon:\n * ```\n * // With an icon\n * firstName: {\n *  data: \"Joe\",\n *  description: {\n *    data: \"The name of Joe\",\n *    icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" viewBox=\"0 -960 960 960\" width=\"20\"><path d=\"M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h600q24 0 42 18t18 42v600q0 24-18 42t-42 18H180Zm0-60h600v-600H180v600Zm56-97h489L578-473 446-302l-93-127-117 152Zm-56 97v-600 600Z\"/></svg>',\n *  },\n * }\n * ```\n *\n * ```\n * // Without an icon\n * firstName: {\n *  data: \"Joe\",\n *  description: \"The name of Joe\"\n * }\n * ```\n */\nexport const CellDescriptionsAndIcons = {\n  render: () => CellDescriptions(),\n  name: \"Description and icons within cells\",\n};\n\nexport const CellDescriptionsLongText = {\n  render: () => LongCellDescriptions(),\n  name: \"Description and icons within cells with long text\",\n};\n\n/**\n * The example below demonstrates the table being able to handle empty cell values (null, undefined or empty string).\n */\nexport const MissingCellDataExample = {\n  render: () => MissingCellData(),\n  name: \"Missing cell data\",\n};\n\n/**\n * By setting `row-selection` to `true`, `ic-checkbox` elements will appear in the leftmost column, with one in the header.\n * When checked, the corresponding row will be selected, with the `icSelectedRowChange` containing the selected row and an array of all the currently selected rows.\n *\n * When checking the header checkbox, all rows will be selected, with the `icSelectAllRows` event being emitted with an array of all the rows. When using pagination, only the rows on the current page will be selected.\n */\nexport const SelectRowsUsingCheckboxExample = {\n  render: () => SelectWithCheckbox(),\n  name: \"Select rows with checkbox\",\n};\n\nexport const DevAreaExample = {\n  render: () => DevArea(),\n  name: \"Dev area\",\n};\n\n/**\n * A native HTML `<table>` element can easily be styled to look like an `ic-data-table`. Simply import `icds-table-style.css` from the `@ukic/web-components` package (`import \"@ukic/web-components/dist/core/icds-table-style.css\"`) and then add the `ic-table` class name to the `<table>` element.\n *\n * Additional styling can be applied using other class names on the `<table>` element\n *\n */\nexport const StyledNativeTables = {\n  render: () => NativeTable(),\n  name: \"Styled native tables\",\n};\n"],"names":[],"sourceRoot":""}