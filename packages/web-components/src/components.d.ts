/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IcAlertVariants } from "./components/ic-alert/ic-alert.types";
import { IcButtonSizes, IcButtonTooltipPlacement, IcButtonTypes, IcButtonVariants } from "./components/ic-button/ic-button.types";
import { IcActivationTypes, IcAdditionalFieldTypes, IcAlignment, IcAutocompleteTypes, IcAutocorrectStates, IcInformationStatusOrEmpty, IcMenuOption, IcSearchMatchPositions, IcTheme, IcThemeForeground, IcThemeForegroundNoDefault, IcTypographyVariants } from "./utils/types";
import { IcChangeEventDetail } from "./components/ic-checkbox-group/ic-checkbox-group.types";
import { IcProtectiveMarkings } from "./components/ic-classification-banner/ic-classification-banner.types";
import { IcFooterBreakpoints } from "./components/ic-footer/ic-footer.types";
import { IcHeroContentAlignments } from "./components/ic-hero/ic-hero.types";
import { IcAriaLiveModeVariants } from "./components/ic-input-validation/ic-input-validation.types";
import { IcLoadingSizes, IcLoadingTypes } from "./components/ic-loading-indicator/ic-loading-indicator.types";
import { IcMenuChangeEventDetail, IcMenuOptionIdEventDetail, IcOptionSelectEventDetail } from "./components/ic-menu/ic-menu.types";
import { IcAutocompleteTypes as IcAutocompleteTypes1, IcAutocorrectStates as IcAutocorrectStates1, IcBlurEventDetail, IcInformationStatusOrEmpty as IcInformationStatusOrEmpty1, IcValueEventDetail } from "./interface";
import { IcSearchBarBlurEventDetail } from "./components/ic-search-bar/ic-search-bar.types";
import { IcSkeletonVariants } from "./components/ic-skeleton/ic-skeleton.types";
import { IcStatusTagAppearance, IcStatusTagStatuses } from "./components/ic-status-tag/ic-status-tag.types";
import { IcStepTypes } from "./components/ic-step/ic-step.types";
import { IcStepperAlignment } from "./components/ic-stepper/ic-stepper.types";
import { IcSwitchChangeEventDetail } from "./components/ic-switch/ic-switch.types";
import { IcTabClickEventDetail, IcTabSelectEventDetail } from "./components/ic-tab/ic-tab.types";
import { IcAriaAutocompleteTypes, IcTextFieldInputModes, IcTextFieldTypes } from "./components/ic-text-field/ic-text-field.types";
import { IcTooltipPlacements } from "./components/ic-tooltip/ic-tooltip.types";
export namespace Components {
    interface IcAlert {
        /**
          * Set whether the alert has the 'alert' aria role and will be announced to screen readers
         */
        "announced"?: boolean;
        /**
          * Set whether the alert has a close icon at the end to dismiss it
         */
        "dismissible"?: boolean;
        /**
          * Optional title to display at the start of the alert
         */
        "heading"?: string;
        /**
          * Main body message of the alert
         */
        "message"?: string;
        /**
          * Set whether the title and message appear inline or above and below
         */
        "titleAbove"?: boolean;
        /**
          * Set which variant of the alert will be rendered
         */
        "variant"?: IcAlertVariants;
    }
    interface IcBackToTop {
        /**
          * The ID of the element to jump back to when the link is clicked.
         */
        "target": string;
    }
    interface IcBreadcrumb {
        /**
          * If true, aria-current will be set on the breadcrumb
         */
        "current"?: boolean;
        /**
          * Set breadcrumb location
         */
        "href"?: string;
        /**
          * Set breadcrumb title
         */
        "pageTitle": string;
        "showBackIcon": boolean;
    }
    interface IcBreadcrumbGroup {
        /**
          * If true, display the parent page and back icon as breadcrumb
         */
        "backBreadcrumbOnly": boolean;
        /**
          * If true, all breadcrumbs between the first and last breadcrumb will be collapsed
         */
        "collapsed": boolean;
    }
    interface IcButton {
        /**
          * Determines the whether the appearance of the button is dark, light, or the default.
         */
        "appearance"?: IcThemeForeground;
        /**
          * Disable ic-tooltip which is shown for icon variant. Title or aria-label must be set if this prop is not applied.
         */
        "disableTooltip"?: boolean;
        /**
          * Determines whether the button should be in disabled state.
         */
        "disabled"?: boolean;
        /**
          * Prompts the user to save the linked URL instead of navigating to it.
         */
        "download"?: string | boolean;
        /**
          * Fill the width of the container if true.
         */
        "fullWidth"?: boolean;
        /**
          * The URL that the link points to. This will render the button as an "a" tag.
         */
        "href"?: string;
        /**
          * Hints at the human language of the linked URL.
         */
        "hreflang"?: string;
        /**
          * Determines whether the button should be in loading state.
         */
        "loading"?: boolean;
        /**
          * How much of the referrer to send when following the link.
         */
        "referrerpolicy"?: ReferrerPolicy;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string;
        /**
          * Sets focus on the native `button`
         */
        "setFocus": () => Promise<void>;
        /**
          * The size of the button to be displayed.
         */
        "size"?: IcButtonSizes;
        /**
          * Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
         */
        "target"?: string;
        /**
          * The position of the tooltip in relation to the button.
         */
        "tooltipPlacement"?: IcButtonTooltipPlacement;
        /**
          * The type of the button.
         */
        "type"?: IcButtonTypes;
        "updateAriaLabel": (newValue: string) => Promise<void>;
        /**
          * The button variant to be displayed.
         */
        "variant"?: IcButtonVariants;
    }
    interface IcCard {
        /**
          * Set the variant to static or clickable
         */
        "clickable"?: boolean;
        /**
          * Whether the card is disabled if it is clickable
         */
        "disabled"?: boolean;
        /**
          * If true then fill width of container
         */
        "fullWidth": boolean;
        /**
          * Title for the card
         */
        "heading": string;
        /**
          * URL for clickable cards
         */
        "href"?: string | undefined;
        /**
          * Human readable explanation of the URL
         */
        "hreflang"?: string;
        /**
          * Main body message of the card
         */
        "message"?: string;
        /**
          * How much of the referrer to send when following the link.
         */
        "referrerpolicy"?: ReferrerPolicy;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string;
        /**
          * Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
         */
        "target"?: string;
    }
    interface IcCheckbox {
        /**
          * Set which style of additionalField will be displayed if used
         */
        "additionalFieldDisplay": IcAdditionalFieldTypes;
        /**
          * Set the checkbox to the checked state
         */
        "checked"?: boolean;
        /**
          * Set the checkbox to the disabled state
         */
        "disabled"?: boolean;
        /**
          * Provide a text prop for the dynamic text
         */
        "dynamicText": string;
        /**
          * Provide a group label for the input
         */
        "groupLabel": string;
        /**
          * Display the indeterminate state when checked
         */
        "indeterminate": boolean;
        /**
          * Provide a label for the input
         */
        "label": string;
        /**
          * Provide a name for the input
         */
        "name": string;
        /**
          * Provide a value for the input
         */
        "value": string;
    }
    interface IcCheckboxGroup {
        /**
          * Specify whether the input is disabled.
         */
        "disabled": boolean;
        /**
          * Provide helper text to display additional field guidance.
         */
        "helperText": string;
        /**
          * Hides the label and applies the required label value as an aria-label.
         */
        "hideLabel": boolean;
        /**
          * Provide a label for the input.
         */
        "label": string;
        /**
          * Provide a name for the input.
         */
        "name": string;
        /**
          * Specify if the input requires a value.
         */
        "required": boolean;
        /**
          * Specify whether small styling to be applied to element.
         */
        "small": boolean;
        /**
          * Provide validation status - 'error'
         */
        "validationStatus": IcInformationStatusOrEmpty;
        /**
          * Provide validation text - 'error'
         */
        "validationText": string;
    }
    interface IcClassificationBanner {
        /**
          * Additional information to display after the classification
         */
        "additionalSelectors"?: string;
        /**
          * The classification level to be displayed also determines the banner and text colour
         */
        "classification"?: IcProtectiveMarkings;
        /**
          * Optional text displayed before classification to specify relevant country/countries
         */
        "country"?: string;
        /**
          * Determines whether the banner appears inline with the page or sticks to the bottom of the page
         */
        "inline"?: boolean;
        /**
          * Optionally display "Up to" before classification and country if set
         */
        "upTo"?: boolean;
    }
    interface IcDataEntity {
        /**
          * Title for the data entity
         */
        "heading": string;
        /**
          * Set the data heading and all child data rows to small styling
         */
        "small": boolean;
    }
    interface IcDataRow {
        /**
          * Set the label in the leftmost cell of the row
         */
        "label": string;
        /**
          * Set the row to small styling, this is automatically applied if small is set on the parent data heading
         */
        "small": boolean;
        /**
          * Set the value of the middle (right if no addition supplied) cell of the row
         */
        "value": string;
    }
    interface IcDivider {
    }
    interface IcFooter {
        /**
          * Sets the aligned parameter for the section containers used within the footer
         */
        "aligned"?: IcAlignment;
        /**
          * Sets the screen size breakpoint at which to switch to the small layout
         */
        "breakpoint"?: IcFooterBreakpoints;
        /**
          * The caption displayed at the bottom of the footer
         */
        "caption": string;
        /**
          * Whether the footer displays the crown copyright at the bottom
         */
        "copyright": boolean;
        /**
          * The description displayed at the top of the footer
         */
        "description": string;
        /**
          * Sets the footer up to handle link groups instead of standalone links
         */
        "groupLinks"?: boolean;
    }
    interface IcFooterLink {
        /**
          * The URL that the link points to.
         */
        "href"?: string;
    }
    interface IcFooterLinkGroup {
        /**
          * Sets the title of the link group for display
         */
        "groupTitle": string;
    }
    interface IcHero {
        /**
          * The alignment of the hero content
         */
        "aligned": IcAlignment;
        /**
          * Optional background image
         */
        "backgroundImage"?: string;
        /**
          * The alignment of the hero content
         */
        "contentAligned": IcHeroContentAlignments;
        /**
          * Whether the background image (if set) scrolls using a parallax effect.
         */
        "disableBackgroundParallax"?: boolean;
        /**
          * The heading of the hero
         */
        "heading": string;
        /**
          * Optional secondary heading, replaced by slotted right content
         */
        "secondaryHeading"?: string;
        /**
          * Optional secondary subheading, replaced by slotted right content
         */
        "secondarySubheading"?: string;
        /**
          * Alter styling for use with small content/pages
         */
        "small": boolean;
        /**
          * Description for the hero
         */
        "subheading"?: string;
    }
    interface IcInputComponentContainer {
        /**
          * Determines whether the dark variant of the input-component-container focus indicator should be displayed.
         */
        "dark"?: boolean;
        /**
          * disabled
         */
        "disabled": boolean;
        /**
          * If true then fill width of container
         */
        "fullWidth": boolean;
        /**
          * multiLine
         */
        "multiLine": boolean;
        /**
          * readonly
         */
        "readonly": boolean;
        /**
          * small
         */
        "small": boolean;
        /**
          * validationInline
         */
        "validationInline": boolean;
        /**
          * validationStatus
         */
        "validationStatus": IcInformationStatusOrEmpty;
    }
    interface IcInputContainer {
        /**
          * disabled
         */
        "disabled"?: boolean;
        /**
          * readonly
         */
        "readonly"?: boolean;
    }
    interface IcInputLabel {
        /**
          * dark
         */
        "dark"?: boolean;
        /**
          * disabled
         */
        "disabled": boolean;
        /**
          * error
         */
        "error"?: boolean;
        /**
          * for
         */
        "for": string;
        /**
          * helperText
         */
        "helperText": string;
        /**
          * label
         */
        "label": string;
        /**
          * readonly
         */
        "readonly": boolean;
        /**
          * required
         */
        "required": boolean;
    }
    interface IcInputValidation {
        /**
          * aria live mode to apply to message
         */
        "ariaLiveMode": IcAriaLiveModeVariants;
        /**
          * The id of the input field the message relates to
         */
        "for": string;
        /**
          * If true then fill width of container
         */
        "fullWidth": boolean;
        /**
          * The validation message to display
         */
        "message": string;
        /**
          * The status
         */
        "status": IcInformationStatusOrEmpty;
    }
    interface IcLink {
        /**
          * Determines the whether the appearance is dark, light, or the default.
         */
        "appearance"?: IcThemeForeground;
        /**
          * Prompts the user to save the linked URL instead of navigating to it.
         */
        "download"?: string | boolean;
        /**
          * The URL that the link points to.
         */
        "href"?: string;
        /**
          * Hints at the human language of the linked URL.
         */
        "hreflang"?: string;
        /**
          * How much of the referrer to send when following the link.
         */
        "referrerpolicy"?: ReferrerPolicy;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string;
        /**
          * Determines whether the 'open in new tab/window' icon is to be displayed.
         */
        "showIcon"?: boolean;
        /**
          * Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
         */
        "target"?: string;
    }
    interface IcLoadingIndicator {
        /**
          * Determines whether the dark or light loading indicator should be displayed.
         */
        "appearance"?: IcThemeForegroundNoDefault;
        /**
          * Provide a description to be set as the aria-label of the loading indicator when not using a visible label.
         */
        "description"?: string;
        /**
          * When linear, determines whether the full-width version (i.e. without a border radius) should be displayed.
         */
        "fullWidth"?: boolean;
        /**
          * The label to be displayed beneath the loading indicator. Display a changing label by separating multiple messages with forward slashes.
         */
        "label"?: string;
        /**
          * The time in milliseconds before the label changes.
         */
        "labelDuration"?: number;
        /**
          * The maximum value that the progress value can take. Used to calculate the proportional width of the progress bar.
         */
        "max"?: number;
        /**
          * The minimum value that the progress value can take. Used to calculate the proportional width of the progress bar.
         */
        "min"?: number;
        /**
          * The current amount of progress made. If not provided, component acts as an indeterminate loading indicator.
         */
        "progress"?: number;
        /**
          * The size of the loading indicator.
         */
        "size"?: IcLoadingSizes;
        /**
          * The type of indicator, either linear or circular.
         */
        "type"?: IcLoadingTypes;
    }
    interface IcMenu {
        /**
          * Determines whether options manually set as values (by pressing 'Enter') when they receive focus using keyboard navigation.
         */
        "activationType"?: IcActivationTypes;
        /**
          * Reference to an anchor element the menu will position itself from when rendered.
         */
        "anchorEl": HTMLElement;
        "autoFocusOnSelected": boolean;
        /**
          * If true then fill width of container
         */
        "fullWidth": boolean;
        /**
          * If menu is opened with the mouse, emit menuChange custom event.
         */
        "handleClickOpen": () => Promise<void>;
        /**
          * Used alongside activationType If menu is opened via keyboard navigation (i.e. Enter, ArrowUp or ArrowDown), emit optionSelect custom event.
          * @param event - keyboard event
         */
        "handleKeyboardOpen": (event: KeyboardEvent) => Promise<void>;
        "handleSetFirstOption": () => Promise<void>;
        /**
          * Reference to the input element.
         */
        "inputEl": HTMLElement;
        /**
          * Label for the input element.
         */
        "inputLabel": string;
        /**
          * Id of the menu.
         */
        "menuId": string;
        /**
          * Specify whether the menu is open.
         */
        "open": boolean;
        /**
          * Provide the possible selection options.
         */
        "options": IcMenuOption[];
        "parentEl"?: HTMLElement;
        /**
          * Specify whether small styling is to be applied to the element.
         */
        "small"?: boolean;
        /**
          * The value of the currently selected option.
         */
        "value": string;
    }
    interface IcNavigationButton {
        /**
          * Prompts the user to save the linked URL instead of navigating to it.
         */
        "download"?: string | boolean;
        /**
          * The URL that the link points to. This will render the button as an "a" tag.
         */
        "href"?: string;
        /**
          * Hints at the human language of the linked URL.
         */
        "hreflang"?: string;
        /**
          * label info to display
         */
        "label": string;
        /**
          * How much of the referrer to send when following the link.
         */
        "referrerpolicy"?: ReferrerPolicy;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string;
        /**
          * Sets focus on the native `button`
         */
        "setFocus": () => Promise<void>;
        /**
          * Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
         */
        "target"?: string;
    }
    interface IcNavigationGroup {
        /**
          * whether the group should be expandable/collapsible in the side menu
         */
        "expandable": boolean;
        /**
          * label to display on the group
         */
        "label": string;
        /**
          * Sets focus on the nav item
         */
        "setFocus": () => Promise<void>;
    }
    interface IcNavigationItem {
        "collapsedIconLabel": boolean;
        "displayNavigationTooltip": boolean;
        "expandable": boolean;
        /**
          * Destination of the navigation item
         */
        "href": string;
        /**
          * Label of the navigation item
         */
        "label": string;
        /**
          * If true, sets the navigation item in a selected state
         */
        "selected": boolean;
        /**
          * Sets focus on the nav item
         */
        "setFocus": () => Promise<void>;
    }
    interface IcNavigationMenu {
        /**
          * Status info to display
         */
        "status": string;
        /**
          * Version info to display
         */
        "version": string;
    }
    interface IcPageHeader {
        /**
          * How the component should be aligned.
         */
        "aligned"?: IcAlignment;
        /**
          * Set whether the bottom border is used
         */
        "border"?: boolean;
        /**
          * The title to render on the component.
         */
        "heading"?: string;
        /**
          * Set whether the reading pattern and tab order change in the action area for viewport widths of above 576px and when actions have not wrapped
         */
        "reverseOrder"?: boolean;
        /**
          * Whether the component uses small styling.
         */
        "small"?: boolean;
        /**
          * Set whether the header is sticky at all breakpoints
         */
        "sticky"?: boolean;
        /**
          * Set whether the header is only sticky for viewport widths of 992px and above
         */
        "stickyDesktopOnly"?: boolean;
        /**
          * The subtitle to render on the component.
         */
        "subheading"?: string;
    }
    interface IcRadioGroup {
        /**
          * Specify whether the input is disabled.
         */
        "disabled": boolean;
        /**
          * Provide helper text to display additional field guidance.
         */
        "helperText": string;
        /**
          * Hides the label and applies the required label value as an aria-label.
         */
        "hideLabel": boolean;
        /**
          * Provide a label for the input.
         */
        "label": string;
        /**
          * Provide a name for the input.
         */
        "name": string;
        /**
          * Specify if the input requires a value.
         */
        "required": boolean;
        /**
          * Specify whether small styling is to be applied to the element.
         */
        "small": boolean;
        /**
          * Provide validation status - 'error'
         */
        "validationStatus": IcInformationStatusOrEmpty;
        /**
          * Provide validation text - 'error'
         */
        "validationText": string;
    }
    interface IcRadioOption {
        /**
          * Determines type of additional text field in relation to radio option
         */
        "additionalFieldDisplay": IcAdditionalFieldTypes;
        /**
          * Determines whether the radio should be in disabled state.
         */
        "disabled"?: boolean;
        /**
          * Provide a text prop for the dynamic text.
         */
        "dynamicText": string;
        /**
          * Provide a group label for the input.
         */
        "groupLabel": string;
        /**
          * Provide a label for the input.
         */
        "label"?: string;
        /**
          * Provide a name for the input.
         */
        "name": string;
        /**
          * Determines whether the radio should be in selected state.
         */
        "selected"?: boolean;
        /**
          * Provide a value for the input.
         */
        "value": string;
    }
    interface IcSearchBar {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: "off", "none", "on", "sentences", "words", "characters".
         */
        "autocapitalize": string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: IcAutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect"?: IcAutocorrectStates;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * Number of characters until suggestions appear
         */
        "charactersUntilSuggestion": number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * Specify whether to disable the built in filtering. For example, if options will already be filtered from external source. If true, all options provided will be displayed.
         */
        "disableFilter"?: boolean;
        /**
          * Specify whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Provide text for empty results list
         */
        "emptyOptionListText": string;
        /**
          * Specify whether the input should be focussed when component loaded.
         */
        "focusOnLoad"?: boolean;
        /**
          * Specify whether the component fills the full width of the container. If true, this overrides the --input-width css prop.
         */
        "fullWidth"?: boolean;
        /**
          * Provide helper text to display additional field guidance.
         */
        "helperText"?: string;
        /**
          * Hides the label and applies the required label value as an aria-label.
         */
        "hideLabel"?: boolean;
        /**
          * Provide hint text for hidden assistive description element.
         */
        "hintText"?: string;
        /**
          * Provide a label for the input.
         */
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Provide the suggested search options
         */
        "options"?: IcMenuOption[];
        /**
          * Provide a placeholder value to display.
         */
        "placeholder"?: string;
        /**
          * Specify whether the input is read only.
         */
        "readonly"?: boolean;
        /**
          * Specify if the input requires a value.
         */
        "required"?: boolean;
        /**
          * Sets focus on the native `input`
         */
        "setFocus": () => Promise<void>;
        /**
          * Specify whether small styling is to be applied to the element.
         */
        "small"?: boolean;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * Value of Search input.
         */
        "value": string;
    }
    interface IcSectionContainer {
        /**
          * How the container should be aligned.
         */
        "aligned"?: IcAlignment;
        /**
          * Removes the standard vertical padding from the container.
         */
        "fullHeight"?: boolean;
    }
    interface IcSelect {
        /**
          * Number of characters until suggestions appear for a searchable select.
         */
        "charactersUntilSuggestions"?: number;
        /**
          * Specify whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Provide text for empty results list
         */
        "emptyOptionListText": string;
        /**
          * If true, then fill width of container.
         */
        "fullWidth": boolean;
        /**
          * Provide helper text to display additional field guidance.
         */
        "helperText"?: string;
        /**
          * Hides the label and applies the required label value as an aria-label.
         */
        "hideLabel"?: boolean;
        /**
          * If true, descriptions of options are included when filtering options in a searchable select.
         */
        "includeDescriptionsInSearch"?: boolean;
        /**
          * If true, group titles of grouped options are included when filtering options in a searchable select.
         */
        "includeGroupTitlesInSearch"?: boolean;
        /**
          * Provide a label for the input.
         */
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Provide the possible selection options.
         */
        "options"?: IcMenuOption[];
        /**
          * Provide a placeholder value to display.
         */
        "placeholder"?: string;
        /**
          * Specify whether the input is read only.
         */
        "readonly"?: boolean;
        /**
          * Specify if the input requires a value.
         */
        "required"?: boolean;
        /**
          * Whether the search string of the searchable select should match the start of or anywhere in the options.
         */
        "searchMatchPosition"?: IcSearchMatchPositions;
        /**
          * If true, the select can be typed in to filter options.
         */
        "searchable"?: boolean;
        /**
          * Sets focus on the input box.
         */
        "setFocus": () => Promise<void>;
        /**
          * Display a button which clears the input when clicked. The button will always appear on the searchable select.
         */
        "showClearButton"?: boolean;
        /**
          * Specify whether small styling is to be applied to the element.
         */
        "small"?: boolean;
        /**
          * Provide a validation status.
         */
        "validationStatus"?: IcInformationStatusOrEmpty;
        /**
          * Provide the text to display as the validation message.
         */
        "validationText"?: string;
        /**
          * The value of the currently selected option.
         */
        "value"?: string;
    }
    interface IcSideNavigation {
        /**
          * Title to display.
         */
        "appTitle": string;
        /**
          * If true, the icon and label will appear when side navigation is collapsed
         */
        "collapsedIconLabels": boolean;
        /**
          * If true, disable automatic parent wrapper styling
         */
        "disableAutoParentStyling": boolean;
        /**
          * If true, the ic-side-navigation will load in an expanded state
         */
        "expanded": boolean;
        /**
          * Set application title link
         */
        "href": string;
        /**
          * If true, side navigation will be contained by parent element
         */
        "inline": boolean;
        /**
          * If true, the menu expand button is removed (PLEASE NOTE: This takes effect on screen sizes 992px and above)
         */
        "static": boolean;
        /**
          * Status of application
         */
        "status": string;
        /**
          * Version of application
         */
        "version": string;
    }
    interface IcSkeleton {
        /**
          * Set the skeleton to the light variant
         */
        "light"?: boolean;
        /**
          * The variant of the skeleton that will be displayed
         */
        "variant"?: IcSkeletonVariants;
    }
    interface IcStatusTag {
        /**
          * The emphasis of the status tag.
         */
        "appearance"?: IcStatusTagAppearance;
        /**
          * The content rendered within the status tag.
         */
        "label": string;
        /**
          * The size of the status tag.
         */
        "small"?: boolean;
        /**
          * The colour of the status tag.
         */
        "status"?: IcStatusTagStatuses;
    }
    interface IcStep {
        "lastStep": boolean;
        "stepNum": number;
        /**
          * Additional information about step
         */
        "stepSubtitle"?: string;
        /**
          * Name of step
         */
        "stepTitle"?: string;
        /**
          * State of step
         */
        "stepType"?: IcStepTypes;
    }
    interface IcStepper {
        /**
          * How the stepper should be aligned in its container.
         */
        "aligned"?: IcStepperAlignment;
        /**
          * The length of the connnector between each step in pixels. Minimum length is 100px.
         */
        "connectorWidth"?: number;
    }
    interface IcSwitch {
        /**
          * If true, the component is checked.
         */
        "checked"?: boolean;
        /**
          * If true, the component is not interactive.
         */
        "disabled"?: boolean;
        /**
          * Provide helper text to display additional field guidance.
         */
        "helperText"?: string;
        /**
          * Hides the label and applies the required label value as an aria-label.
         */
        "hideLabel"?: boolean;
        /**
          * Applies an aria-label to the component, for when no visual 'name' is provided.
         */
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * If true, the component will render the On/Off state text.
         */
        "showState"?: boolean;
        /**
          * If true, the component reduces in size to the small state.
         */
        "small"?: boolean;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: string | null;
    }
    interface IcTab {
        "appearance"?: IcThemeForegroundNoDefault;
        "contextId"?: string;
        /**
          * Disables the tab.
         */
        "disabled"?: boolean;
        "selected"?: boolean;
        "tabId"?: string;
        "tabPosition": number;
    }
    interface IcTabContext {
        /**
          * Determines whether tabs have to be manually activated (by pressing 'Enter' or 'Space') when they receive focus using keyboard navigation.
         */
        "activationType"?: IcActivationTypes;
        /**
          * Determines whether the light or dark variant of the tabs should be displayed.
         */
        "appearance"?: IcThemeForegroundNoDefault;
        /**
          * Provide a unique context if using multiple tabs inside one another i.e. rendering another set of tabs inside a tab panel.
         */
        "contextId"?: string;
        /**
          * Allows the user to control the selected tab. Must be used alongside the tabSelect event to manage tab selection.
         */
        "selectedTabIndex"?: number;
    }
    interface IcTabGroup {
        "appearance"?: IcThemeForegroundNoDefault;
        /**
          * Provide a unique context if using multiple tabs inside one another i.e. rendering another set of tabs inside a tab panel.
         */
        "contextId"?: string;
        /**
          * Use when tabs and tab panels are to be positioned separately.
         */
        "inline"?: boolean;
        /**
          * Provide a label to describe the purpose of the set of tabs to screen reader users.
         */
        "label": string;
        "scrollTabIntoView": (tabNumber: number) => Promise<void>;
    }
    interface IcTabPanel {
        /**
          * Provide a unique context if using multiple tabs inside one another i.e. rendering another tabs inside a tab panel.
         */
        "contextId"?: string;
        "panelId"?: string;
        "selectedTab"?: string;
        "tabPosition": number;
    }
    interface IcTextField {
        "ariaActiveDescendant"?: string;
        "ariaAutocomplete": IcAriaAutocompleteTypes;
        "ariaExpanded": string;
        "ariaOwns": string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autoFocus": boolean;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: "off", "none", "on", "sentences", "words", "characters".
         */
        "autocapitalize": string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": IcAutocompleteTypes1;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect": IcAutocorrectStates1;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.
         */
        "debounce": number;
        /**
          * Specify whether the input is disabled.
         */
        "disabled": boolean;
        /**
          * Specify whether the component fills the full width of the container. If true, this overrides the --input-width css prop.
         */
        "fullWidth": boolean;
        /**
          * Provide helper text to display additional field guidance.
         */
        "helperText": string;
        "hiddenInput": boolean;
        /**
          * Hides the label and applies the required label value as an aria-label.
         */
        "hideLabel": boolean;
        /**
          * Provide an id for the input
         */
        "inputId"?: string;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode": IcTextFieldInputModes;
        /**
          * Provide a label for the input.
         */
        "label": string;
        /**
          * Maximum number of characters that can be entered in the field.
         */
        "maxLength": number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Provide a placeholder value to display.
         */
        "placeholder": string;
        /**
          * Specify whether the input is read only.
         */
        "readonly": boolean;
        /**
          * Specify if the input requires a value.
         */
        "required": boolean;
        /**
          * Allow resizing of a multiline text area
         */
        "resize": boolean;
        "role": string;
        /**
          * Specify the number of rows to transform the text field into a text area with a specific height.
         */
        "rows": number;
        /**
          * Sets focus on the native `input`
         */
        "setFocus": () => Promise<void>;
        /**
          * Specify whether small styling is to be applied to the element.
         */
        "small": boolean;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        "truncateValue"?: boolean;
        /**
          * The type of control to display. The default type is text.
         */
        "type": IcTextFieldTypes;
        /**
          * Show icon in input control - only applies when validationStatus ='success'
         */
        "validationInline": boolean;
        /**
          * Provide validation state - 'error' | 'warning' | 'success'
         */
        "validationStatus": IcInformationStatusOrEmpty1;
        /**
          * Provide validation state - 'error' | 'warning' | 'success'
         */
        "validationText": string;
        /**
          * Value of TextField.
         */
        "value": string;
    }
    interface IcTheme {
        /**
          * The theme colour. Can be a hex value eg "#ff0000" or RGB eg "rgb(255, 0, 0)"
         */
        "color"?: string;
    }
    interface IcTooltip {
        /**
          * The text to display on the tooltip.
         */
        "label": string;
        /**
          * The position of the tool-tip in relation to the parent element.
         */
        "placement"?: IcTooltipPlacements;
        /**
          * The ID of the element the tooltip is describing - for when aria-labelledby or aria-describedby is used.
         */
        "target"?: string;
    }
    interface IcTopNavigation {
        /**
          * Title to display
         */
        "appTitle": string;
        /**
          * The alignment of the top nav content
         */
        "contentAligned": IcAlignment;
        /**
          * The url to navigate to when title is clicked
         */
        "href": string;
        /**
          * If true, the flyout navigation menu on small devices will be contained by the parent element
         */
        "inline": boolean;
        /**
          * Status info to display
         */
        "status": string;
        /**
          * Version info to display
         */
        "version": string;
    }
    interface IcTypography {
        /**
          * Adds appropriate margins to the top and bottom of the typography.
         */
        "applyVerticalMargins"?: boolean;
        /**
          * The ICDS typography style to use.
         */
        "variant"?: IcTypographyVariants;
    }
}
export interface IcAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcAlertElement;
}
export interface IcButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcButtonElement;
}
export interface IcCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcCheckboxElement;
}
export interface IcCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcCheckboxGroupElement;
}
export interface IcFooterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcFooterElement;
}
export interface IcMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcMenuElement;
}
export interface IcNavigationItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcNavigationItemElement;
}
export interface IcNavigationMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcNavigationMenuElement;
}
export interface IcRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcRadioGroupElement;
}
export interface IcRadioOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcRadioOptionElement;
}
export interface IcSearchBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcSearchBarElement;
}
export interface IcSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcSelectElement;
}
export interface IcSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcSwitchElement;
}
export interface IcTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcTabElement;
}
export interface IcTabContextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcTabContextElement;
}
export interface IcTextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcTextFieldElement;
}
export interface IcThemeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcThemeElement;
}
export interface IcTopNavigationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcTopNavigationElement;
}
declare global {
    interface HTMLIcAlertElement extends Components.IcAlert, HTMLStencilElement {
    }
    var HTMLIcAlertElement: {
        prototype: HTMLIcAlertElement;
        new (): HTMLIcAlertElement;
    };
    interface HTMLIcBackToTopElement extends Components.IcBackToTop, HTMLStencilElement {
    }
    var HTMLIcBackToTopElement: {
        prototype: HTMLIcBackToTopElement;
        new (): HTMLIcBackToTopElement;
    };
    interface HTMLIcBreadcrumbElement extends Components.IcBreadcrumb, HTMLStencilElement {
    }
    var HTMLIcBreadcrumbElement: {
        prototype: HTMLIcBreadcrumbElement;
        new (): HTMLIcBreadcrumbElement;
    };
    interface HTMLIcBreadcrumbGroupElement extends Components.IcBreadcrumbGroup, HTMLStencilElement {
    }
    var HTMLIcBreadcrumbGroupElement: {
        prototype: HTMLIcBreadcrumbGroupElement;
        new (): HTMLIcBreadcrumbGroupElement;
    };
    interface HTMLIcButtonElement extends Components.IcButton, HTMLStencilElement {
    }
    var HTMLIcButtonElement: {
        prototype: HTMLIcButtonElement;
        new (): HTMLIcButtonElement;
    };
    interface HTMLIcCardElement extends Components.IcCard, HTMLStencilElement {
    }
    var HTMLIcCardElement: {
        prototype: HTMLIcCardElement;
        new (): HTMLIcCardElement;
    };
    interface HTMLIcCheckboxElement extends Components.IcCheckbox, HTMLStencilElement {
    }
    var HTMLIcCheckboxElement: {
        prototype: HTMLIcCheckboxElement;
        new (): HTMLIcCheckboxElement;
    };
    interface HTMLIcCheckboxGroupElement extends Components.IcCheckboxGroup, HTMLStencilElement {
    }
    var HTMLIcCheckboxGroupElement: {
        prototype: HTMLIcCheckboxGroupElement;
        new (): HTMLIcCheckboxGroupElement;
    };
    interface HTMLIcClassificationBannerElement extends Components.IcClassificationBanner, HTMLStencilElement {
    }
    var HTMLIcClassificationBannerElement: {
        prototype: HTMLIcClassificationBannerElement;
        new (): HTMLIcClassificationBannerElement;
    };
    interface HTMLIcDataEntityElement extends Components.IcDataEntity, HTMLStencilElement {
    }
    var HTMLIcDataEntityElement: {
        prototype: HTMLIcDataEntityElement;
        new (): HTMLIcDataEntityElement;
    };
    interface HTMLIcDataRowElement extends Components.IcDataRow, HTMLStencilElement {
    }
    var HTMLIcDataRowElement: {
        prototype: HTMLIcDataRowElement;
        new (): HTMLIcDataRowElement;
    };
    interface HTMLIcDividerElement extends Components.IcDivider, HTMLStencilElement {
    }
    var HTMLIcDividerElement: {
        prototype: HTMLIcDividerElement;
        new (): HTMLIcDividerElement;
    };
    interface HTMLIcFooterElement extends Components.IcFooter, HTMLStencilElement {
    }
    var HTMLIcFooterElement: {
        prototype: HTMLIcFooterElement;
        new (): HTMLIcFooterElement;
    };
    interface HTMLIcFooterLinkElement extends Components.IcFooterLink, HTMLStencilElement {
    }
    var HTMLIcFooterLinkElement: {
        prototype: HTMLIcFooterLinkElement;
        new (): HTMLIcFooterLinkElement;
    };
    interface HTMLIcFooterLinkGroupElement extends Components.IcFooterLinkGroup, HTMLStencilElement {
    }
    var HTMLIcFooterLinkGroupElement: {
        prototype: HTMLIcFooterLinkGroupElement;
        new (): HTMLIcFooterLinkGroupElement;
    };
    interface HTMLIcHeroElement extends Components.IcHero, HTMLStencilElement {
    }
    var HTMLIcHeroElement: {
        prototype: HTMLIcHeroElement;
        new (): HTMLIcHeroElement;
    };
    interface HTMLIcInputComponentContainerElement extends Components.IcInputComponentContainer, HTMLStencilElement {
    }
    var HTMLIcInputComponentContainerElement: {
        prototype: HTMLIcInputComponentContainerElement;
        new (): HTMLIcInputComponentContainerElement;
    };
    interface HTMLIcInputContainerElement extends Components.IcInputContainer, HTMLStencilElement {
    }
    var HTMLIcInputContainerElement: {
        prototype: HTMLIcInputContainerElement;
        new (): HTMLIcInputContainerElement;
    };
    interface HTMLIcInputLabelElement extends Components.IcInputLabel, HTMLStencilElement {
    }
    var HTMLIcInputLabelElement: {
        prototype: HTMLIcInputLabelElement;
        new (): HTMLIcInputLabelElement;
    };
    interface HTMLIcInputValidationElement extends Components.IcInputValidation, HTMLStencilElement {
    }
    var HTMLIcInputValidationElement: {
        prototype: HTMLIcInputValidationElement;
        new (): HTMLIcInputValidationElement;
    };
    interface HTMLIcLinkElement extends Components.IcLink, HTMLStencilElement {
    }
    var HTMLIcLinkElement: {
        prototype: HTMLIcLinkElement;
        new (): HTMLIcLinkElement;
    };
    interface HTMLIcLoadingIndicatorElement extends Components.IcLoadingIndicator, HTMLStencilElement {
    }
    var HTMLIcLoadingIndicatorElement: {
        prototype: HTMLIcLoadingIndicatorElement;
        new (): HTMLIcLoadingIndicatorElement;
    };
    interface HTMLIcMenuElement extends Components.IcMenu, HTMLStencilElement {
    }
    var HTMLIcMenuElement: {
        prototype: HTMLIcMenuElement;
        new (): HTMLIcMenuElement;
    };
    interface HTMLIcNavigationButtonElement extends Components.IcNavigationButton, HTMLStencilElement {
    }
    var HTMLIcNavigationButtonElement: {
        prototype: HTMLIcNavigationButtonElement;
        new (): HTMLIcNavigationButtonElement;
    };
    interface HTMLIcNavigationGroupElement extends Components.IcNavigationGroup, HTMLStencilElement {
    }
    var HTMLIcNavigationGroupElement: {
        prototype: HTMLIcNavigationGroupElement;
        new (): HTMLIcNavigationGroupElement;
    };
    interface HTMLIcNavigationItemElement extends Components.IcNavigationItem, HTMLStencilElement {
    }
    var HTMLIcNavigationItemElement: {
        prototype: HTMLIcNavigationItemElement;
        new (): HTMLIcNavigationItemElement;
    };
    interface HTMLIcNavigationMenuElement extends Components.IcNavigationMenu, HTMLStencilElement {
    }
    var HTMLIcNavigationMenuElement: {
        prototype: HTMLIcNavigationMenuElement;
        new (): HTMLIcNavigationMenuElement;
    };
    interface HTMLIcPageHeaderElement extends Components.IcPageHeader, HTMLStencilElement {
    }
    var HTMLIcPageHeaderElement: {
        prototype: HTMLIcPageHeaderElement;
        new (): HTMLIcPageHeaderElement;
    };
    interface HTMLIcRadioGroupElement extends Components.IcRadioGroup, HTMLStencilElement {
    }
    var HTMLIcRadioGroupElement: {
        prototype: HTMLIcRadioGroupElement;
        new (): HTMLIcRadioGroupElement;
    };
    interface HTMLIcRadioOptionElement extends Components.IcRadioOption, HTMLStencilElement {
    }
    var HTMLIcRadioOptionElement: {
        prototype: HTMLIcRadioOptionElement;
        new (): HTMLIcRadioOptionElement;
    };
    interface HTMLIcSearchBarElement extends Components.IcSearchBar, HTMLStencilElement {
    }
    var HTMLIcSearchBarElement: {
        prototype: HTMLIcSearchBarElement;
        new (): HTMLIcSearchBarElement;
    };
    interface HTMLIcSectionContainerElement extends Components.IcSectionContainer, HTMLStencilElement {
    }
    var HTMLIcSectionContainerElement: {
        prototype: HTMLIcSectionContainerElement;
        new (): HTMLIcSectionContainerElement;
    };
    interface HTMLIcSelectElement extends Components.IcSelect, HTMLStencilElement {
    }
    var HTMLIcSelectElement: {
        prototype: HTMLIcSelectElement;
        new (): HTMLIcSelectElement;
    };
    interface HTMLIcSideNavigationElement extends Components.IcSideNavigation, HTMLStencilElement {
    }
    var HTMLIcSideNavigationElement: {
        prototype: HTMLIcSideNavigationElement;
        new (): HTMLIcSideNavigationElement;
    };
    interface HTMLIcSkeletonElement extends Components.IcSkeleton, HTMLStencilElement {
    }
    var HTMLIcSkeletonElement: {
        prototype: HTMLIcSkeletonElement;
        new (): HTMLIcSkeletonElement;
    };
    interface HTMLIcStatusTagElement extends Components.IcStatusTag, HTMLStencilElement {
    }
    var HTMLIcStatusTagElement: {
        prototype: HTMLIcStatusTagElement;
        new (): HTMLIcStatusTagElement;
    };
    interface HTMLIcStepElement extends Components.IcStep, HTMLStencilElement {
    }
    var HTMLIcStepElement: {
        prototype: HTMLIcStepElement;
        new (): HTMLIcStepElement;
    };
    interface HTMLIcStepperElement extends Components.IcStepper, HTMLStencilElement {
    }
    var HTMLIcStepperElement: {
        prototype: HTMLIcStepperElement;
        new (): HTMLIcStepperElement;
    };
    interface HTMLIcSwitchElement extends Components.IcSwitch, HTMLStencilElement {
    }
    var HTMLIcSwitchElement: {
        prototype: HTMLIcSwitchElement;
        new (): HTMLIcSwitchElement;
    };
    interface HTMLIcTabElement extends Components.IcTab, HTMLStencilElement {
    }
    var HTMLIcTabElement: {
        prototype: HTMLIcTabElement;
        new (): HTMLIcTabElement;
    };
    interface HTMLIcTabContextElement extends Components.IcTabContext, HTMLStencilElement {
    }
    var HTMLIcTabContextElement: {
        prototype: HTMLIcTabContextElement;
        new (): HTMLIcTabContextElement;
    };
    interface HTMLIcTabGroupElement extends Components.IcTabGroup, HTMLStencilElement {
    }
    var HTMLIcTabGroupElement: {
        prototype: HTMLIcTabGroupElement;
        new (): HTMLIcTabGroupElement;
    };
    interface HTMLIcTabPanelElement extends Components.IcTabPanel, HTMLStencilElement {
    }
    var HTMLIcTabPanelElement: {
        prototype: HTMLIcTabPanelElement;
        new (): HTMLIcTabPanelElement;
    };
    interface HTMLIcTextFieldElement extends Components.IcTextField, HTMLStencilElement {
    }
    var HTMLIcTextFieldElement: {
        prototype: HTMLIcTextFieldElement;
        new (): HTMLIcTextFieldElement;
    };
    interface HTMLIcThemeElement extends Components.IcTheme, HTMLStencilElement {
    }
    var HTMLIcThemeElement: {
        prototype: HTMLIcThemeElement;
        new (): HTMLIcThemeElement;
    };
    interface HTMLIcTooltipElement extends Components.IcTooltip, HTMLStencilElement {
    }
    var HTMLIcTooltipElement: {
        prototype: HTMLIcTooltipElement;
        new (): HTMLIcTooltipElement;
    };
    interface HTMLIcTopNavigationElement extends Components.IcTopNavigation, HTMLStencilElement {
    }
    var HTMLIcTopNavigationElement: {
        prototype: HTMLIcTopNavigationElement;
        new (): HTMLIcTopNavigationElement;
    };
    interface HTMLIcTypographyElement extends Components.IcTypography, HTMLStencilElement {
    }
    var HTMLIcTypographyElement: {
        prototype: HTMLIcTypographyElement;
        new (): HTMLIcTypographyElement;
    };
    interface HTMLElementTagNameMap {
        "ic-alert": HTMLIcAlertElement;
        "ic-back-to-top": HTMLIcBackToTopElement;
        "ic-breadcrumb": HTMLIcBreadcrumbElement;
        "ic-breadcrumb-group": HTMLIcBreadcrumbGroupElement;
        "ic-button": HTMLIcButtonElement;
        "ic-card": HTMLIcCardElement;
        "ic-checkbox": HTMLIcCheckboxElement;
        "ic-checkbox-group": HTMLIcCheckboxGroupElement;
        "ic-classification-banner": HTMLIcClassificationBannerElement;
        "ic-data-entity": HTMLIcDataEntityElement;
        "ic-data-row": HTMLIcDataRowElement;
        "ic-divider": HTMLIcDividerElement;
        "ic-footer": HTMLIcFooterElement;
        "ic-footer-link": HTMLIcFooterLinkElement;
        "ic-footer-link-group": HTMLIcFooterLinkGroupElement;
        "ic-hero": HTMLIcHeroElement;
        "ic-input-component-container": HTMLIcInputComponentContainerElement;
        "ic-input-container": HTMLIcInputContainerElement;
        "ic-input-label": HTMLIcInputLabelElement;
        "ic-input-validation": HTMLIcInputValidationElement;
        "ic-link": HTMLIcLinkElement;
        "ic-loading-indicator": HTMLIcLoadingIndicatorElement;
        "ic-menu": HTMLIcMenuElement;
        "ic-navigation-button": HTMLIcNavigationButtonElement;
        "ic-navigation-group": HTMLIcNavigationGroupElement;
        "ic-navigation-item": HTMLIcNavigationItemElement;
        "ic-navigation-menu": HTMLIcNavigationMenuElement;
        "ic-page-header": HTMLIcPageHeaderElement;
        "ic-radio-group": HTMLIcRadioGroupElement;
        "ic-radio-option": HTMLIcRadioOptionElement;
        "ic-search-bar": HTMLIcSearchBarElement;
        "ic-section-container": HTMLIcSectionContainerElement;
        "ic-select": HTMLIcSelectElement;
        "ic-side-navigation": HTMLIcSideNavigationElement;
        "ic-skeleton": HTMLIcSkeletonElement;
        "ic-status-tag": HTMLIcStatusTagElement;
        "ic-step": HTMLIcStepElement;
        "ic-stepper": HTMLIcStepperElement;
        "ic-switch": HTMLIcSwitchElement;
        "ic-tab": HTMLIcTabElement;
        "ic-tab-context": HTMLIcTabContextElement;
        "ic-tab-group": HTMLIcTabGroupElement;
        "ic-tab-panel": HTMLIcTabPanelElement;
        "ic-text-field": HTMLIcTextFieldElement;
        "ic-theme": HTMLIcThemeElement;
        "ic-tooltip": HTMLIcTooltipElement;
        "ic-top-navigation": HTMLIcTopNavigationElement;
        "ic-typography": HTMLIcTypographyElement;
    }
}
declare namespace LocalJSX {
    interface IcAlert {
        /**
          * Set whether the alert has the 'alert' aria role and will be announced to screen readers
         */
        "announced"?: boolean;
        /**
          * Set whether the alert has a close icon at the end to dismiss it
         */
        "dismissible"?: boolean;
        /**
          * Optional title to display at the start of the alert
         */
        "heading"?: string;
        /**
          * Main body message of the alert
         */
        "message"?: string;
        /**
          * Is emitted when the user dismisses the alert.
         */
        "onDismiss"?: (event: IcAlertCustomEvent<void>) => void;
        /**
          * Set whether the title and message appear inline or above and below
         */
        "titleAbove"?: boolean;
        /**
          * Set which variant of the alert will be rendered
         */
        "variant"?: IcAlertVariants;
    }
    interface IcBackToTop {
        /**
          * The ID of the element to jump back to when the link is clicked.
         */
        "target": string;
    }
    interface IcBreadcrumb {
        /**
          * If true, aria-current will be set on the breadcrumb
         */
        "current"?: boolean;
        /**
          * Set breadcrumb location
         */
        "href"?: string;
        /**
          * Set breadcrumb title
         */
        "pageTitle": string;
        "showBackIcon"?: boolean;
    }
    interface IcBreadcrumbGroup {
        /**
          * If true, display the parent page and back icon as breadcrumb
         */
        "backBreadcrumbOnly"?: boolean;
        /**
          * If true, all breadcrumbs between the first and last breadcrumb will be collapsed
         */
        "collapsed"?: boolean;
    }
    interface IcButton {
        /**
          * Determines the whether the appearance of the button is dark, light, or the default.
         */
        "appearance"?: IcThemeForeground;
        /**
          * Disable ic-tooltip which is shown for icon variant. Title or aria-label must be set if this prop is not applied.
         */
        "disableTooltip"?: boolean;
        /**
          * Determines whether the button should be in disabled state.
         */
        "disabled"?: boolean;
        /**
          * Prompts the user to save the linked URL instead of navigating to it.
         */
        "download"?: string | boolean;
        /**
          * Fill the width of the container if true.
         */
        "fullWidth"?: boolean;
        /**
          * The URL that the link points to. This will render the button as an "a" tag.
         */
        "href"?: string;
        /**
          * Hints at the human language of the linked URL.
         */
        "hreflang"?: string;
        /**
          * Determines whether the button should be in loading state.
         */
        "loading"?: boolean;
        /**
          * Emitted when button has blur
         */
        "onIcBlur"?: (event: IcButtonCustomEvent<void>) => void;
        /**
          * Emitted when button has focus
         */
        "onIcFocus"?: (event: IcButtonCustomEvent<void>) => void;
        /**
          * How much of the referrer to send when following the link.
         */
        "referrerpolicy"?: ReferrerPolicy;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string;
        /**
          * The size of the button to be displayed.
         */
        "size"?: IcButtonSizes;
        /**
          * Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
         */
        "target"?: string;
        /**
          * The position of the tooltip in relation to the button.
         */
        "tooltipPlacement"?: IcButtonTooltipPlacement;
        /**
          * The type of the button.
         */
        "type"?: IcButtonTypes;
        /**
          * The button variant to be displayed.
         */
        "variant"?: IcButtonVariants;
    }
    interface IcCard {
        /**
          * Set the variant to static or clickable
         */
        "clickable"?: boolean;
        /**
          * Whether the card is disabled if it is clickable
         */
        "disabled"?: boolean;
        /**
          * If true then fill width of container
         */
        "fullWidth"?: boolean;
        /**
          * Title for the card
         */
        "heading": string;
        /**
          * URL for clickable cards
         */
        "href"?: string | undefined;
        /**
          * Human readable explanation of the URL
         */
        "hreflang"?: string;
        /**
          * Main body message of the card
         */
        "message"?: string;
        /**
          * How much of the referrer to send when following the link.
         */
        "referrerpolicy"?: ReferrerPolicy;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string;
        /**
          * Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
         */
        "target"?: string;
    }
    interface IcCheckbox {
        /**
          * Set which style of additionalField will be displayed if used
         */
        "additionalFieldDisplay"?: IcAdditionalFieldTypes;
        /**
          * Set the checkbox to the checked state
         */
        "checked"?: boolean;
        /**
          * Set the checkbox to the disabled state
         */
        "disabled"?: boolean;
        /**
          * Provide a text prop for the dynamic text
         */
        "dynamicText"?: string;
        /**
          * Provide a group label for the input
         */
        "groupLabel"?: string;
        /**
          * Display the indeterminate state when checked
         */
        "indeterminate"?: boolean;
        /**
          * Provide a label for the input
         */
        "label": string;
        /**
          * Provide a name for the input
         */
        "name"?: string;
        /**
          * Emitted when a checkbox has been checked
         */
        "onCheckboxChecked"?: (event: IcCheckboxCustomEvent<void>) => void;
        /**
          * Provide a value for the input
         */
        "value": string;
    }
    interface IcCheckboxGroup {
        /**
          * Specify whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Provide helper text to display additional field guidance.
         */
        "helperText"?: string;
        /**
          * Hides the label and applies the required label value as an aria-label.
         */
        "hideLabel"?: boolean;
        /**
          * Provide a label for the input.
         */
        "label": string;
        /**
          * Provide a name for the input.
         */
        "name": string;
        /**
          * Emitted when a checkbox is checked.
         */
        "onIcChange"?: (event: IcCheckboxGroupCustomEvent<IcChangeEventDetail>) => void;
        /**
          * Specify if the input requires a value.
         */
        "required"?: boolean;
        /**
          * Specify whether small styling to be applied to element.
         */
        "small"?: boolean;
        /**
          * Provide validation status - 'error'
         */
        "validationStatus"?: IcInformationStatusOrEmpty;
        /**
          * Provide validation text - 'error'
         */
        "validationText"?: string;
    }
    interface IcClassificationBanner {
        /**
          * Additional information to display after the classification
         */
        "additionalSelectors"?: string;
        /**
          * The classification level to be displayed also determines the banner and text colour
         */
        "classification"?: IcProtectiveMarkings;
        /**
          * Optional text displayed before classification to specify relevant country/countries
         */
        "country"?: string;
        /**
          * Determines whether the banner appears inline with the page or sticks to the bottom of the page
         */
        "inline"?: boolean;
        /**
          * Optionally display "Up to" before classification and country if set
         */
        "upTo"?: boolean;
    }
    interface IcDataEntity {
        /**
          * Title for the data entity
         */
        "heading"?: string;
        /**
          * Set the data heading and all child data rows to small styling
         */
        "small"?: boolean;
    }
    interface IcDataRow {
        /**
          * Set the label in the leftmost cell of the row
         */
        "label"?: string;
        /**
          * Set the row to small styling, this is automatically applied if small is set on the parent data heading
         */
        "small"?: boolean;
        /**
          * Set the value of the middle (right if no addition supplied) cell of the row
         */
        "value"?: string;
    }
    interface IcDivider {
    }
    interface IcFooter {
        /**
          * Sets the aligned parameter for the section containers used within the footer
         */
        "aligned"?: IcAlignment;
        /**
          * Sets the screen size breakpoint at which to switch to the small layout
         */
        "breakpoint"?: IcFooterBreakpoints;
        /**
          * The caption displayed at the bottom of the footer
         */
        "caption"?: string;
        /**
          * Whether the footer displays the crown copyright at the bottom
         */
        "copyright"?: boolean;
        /**
          * The description displayed at the top of the footer
         */
        "description"?: string;
        /**
          * Sets the footer up to handle link groups instead of standalone links
         */
        "groupLinks"?: boolean;
        /**
          * Triggers on page resize and triggers style changes in footer links and link groups
         */
        "onIcFooterResized"?: (event: IcFooterCustomEvent<void>) => void;
    }
    interface IcFooterLink {
        /**
          * The URL that the link points to.
         */
        "href"?: string;
    }
    interface IcFooterLinkGroup {
        /**
          * Sets the title of the link group for display
         */
        "groupTitle": string;
    }
    interface IcHero {
        /**
          * The alignment of the hero content
         */
        "aligned"?: IcAlignment;
        /**
          * Optional background image
         */
        "backgroundImage"?: string;
        /**
          * The alignment of the hero content
         */
        "contentAligned"?: IcHeroContentAlignments;
        /**
          * Whether the background image (if set) scrolls using a parallax effect.
         */
        "disableBackgroundParallax"?: boolean;
        /**
          * The heading of the hero
         */
        "heading": string;
        /**
          * Optional secondary heading, replaced by slotted right content
         */
        "secondaryHeading"?: string;
        /**
          * Optional secondary subheading, replaced by slotted right content
         */
        "secondarySubheading"?: string;
        /**
          * Alter styling for use with small content/pages
         */
        "small"?: boolean;
        /**
          * Description for the hero
         */
        "subheading"?: string;
    }
    interface IcInputComponentContainer {
        /**
          * Determines whether the dark variant of the input-component-container focus indicator should be displayed.
         */
        "dark"?: boolean;
        /**
          * disabled
         */
        "disabled"?: boolean;
        /**
          * If true then fill width of container
         */
        "fullWidth"?: boolean;
        /**
          * multiLine
         */
        "multiLine"?: boolean;
        /**
          * readonly
         */
        "readonly"?: boolean;
        /**
          * small
         */
        "small"?: boolean;
        /**
          * validationInline
         */
        "validationInline"?: boolean;
        /**
          * validationStatus
         */
        "validationStatus"?: IcInformationStatusOrEmpty;
    }
    interface IcInputContainer {
        /**
          * disabled
         */
        "disabled"?: boolean;
        /**
          * readonly
         */
        "readonly"?: boolean;
    }
    interface IcInputLabel {
        /**
          * dark
         */
        "dark"?: boolean;
        /**
          * disabled
         */
        "disabled"?: boolean;
        /**
          * error
         */
        "error"?: boolean;
        /**
          * for
         */
        "for"?: string;
        /**
          * helperText
         */
        "helperText"?: string;
        /**
          * label
         */
        "label": string;
        /**
          * readonly
         */
        "readonly"?: boolean;
        /**
          * required
         */
        "required"?: boolean;
    }
    interface IcInputValidation {
        /**
          * aria live mode to apply to message
         */
        "ariaLiveMode"?: IcAriaLiveModeVariants;
        /**
          * The id of the input field the message relates to
         */
        "for"?: string;
        /**
          * If true then fill width of container
         */
        "fullWidth"?: boolean;
        /**
          * The validation message to display
         */
        "message": string;
        /**
          * The status
         */
        "status"?: IcInformationStatusOrEmpty;
    }
    interface IcLink {
        /**
          * Determines the whether the appearance is dark, light, or the default.
         */
        "appearance"?: IcThemeForeground;
        /**
          * Prompts the user to save the linked URL instead of navigating to it.
         */
        "download"?: string | boolean;
        /**
          * The URL that the link points to.
         */
        "href"?: string;
        /**
          * Hints at the human language of the linked URL.
         */
        "hreflang"?: string;
        /**
          * How much of the referrer to send when following the link.
         */
        "referrerpolicy"?: ReferrerPolicy;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string;
        /**
          * Determines whether the 'open in new tab/window' icon is to be displayed.
         */
        "showIcon"?: boolean;
        /**
          * Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
         */
        "target"?: string;
    }
    interface IcLoadingIndicator {
        /**
          * Determines whether the dark or light loading indicator should be displayed.
         */
        "appearance"?: IcThemeForegroundNoDefault;
        /**
          * Provide a description to be set as the aria-label of the loading indicator when not using a visible label.
         */
        "description"?: string;
        /**
          * When linear, determines whether the full-width version (i.e. without a border radius) should be displayed.
         */
        "fullWidth"?: boolean;
        /**
          * The label to be displayed beneath the loading indicator. Display a changing label by separating multiple messages with forward slashes.
         */
        "label"?: string;
        /**
          * The time in milliseconds before the label changes.
         */
        "labelDuration"?: number;
        /**
          * The maximum value that the progress value can take. Used to calculate the proportional width of the progress bar.
         */
        "max"?: number;
        /**
          * The minimum value that the progress value can take. Used to calculate the proportional width of the progress bar.
         */
        "min"?: number;
        /**
          * The current amount of progress made. If not provided, component acts as an indeterminate loading indicator.
         */
        "progress"?: number;
        /**
          * The size of the loading indicator.
         */
        "size"?: IcLoadingSizes;
        /**
          * The type of indicator, either linear or circular.
         */
        "type"?: IcLoadingTypes;
    }
    interface IcMenu {
        /**
          * Determines whether options manually set as values (by pressing 'Enter') when they receive focus using keyboard navigation.
         */
        "activationType"?: IcActivationTypes;
        /**
          * Reference to an anchor element the menu will position itself from when rendered.
         */
        "anchorEl": HTMLElement;
        "autoFocusOnSelected"?: boolean;
        /**
          * If true then fill width of container
         */
        "fullWidth"?: boolean;
        /**
          * Reference to the input element.
         */
        "inputEl": HTMLElement;
        /**
          * Label for the input element.
         */
        "inputLabel": string;
        /**
          * Id of the menu.
         */
        "menuId": string;
        /**
          * Emitted when state of menu changes (i.e. open or close).
         */
        "onMenuChange"?: (event: IcMenuCustomEvent<IcMenuChangeEventDetail>) => void;
        /**
          * Emitted when an option has been highlighted
         */
        "onMenuOptionId"?: (event: IcMenuCustomEvent<IcMenuOptionIdEventDetail>) => void;
        /**
          * Emitted when an option is selected.
         */
        "onOptionSelect"?: (event: IcMenuCustomEvent<IcOptionSelectEventDetail>) => void;
        /**
          * Specify whether the menu is open.
         */
        "open": boolean;
        /**
          * Provide the possible selection options.
         */
        "options": IcMenuOption[];
        "parentEl"?: HTMLElement;
        /**
          * Specify whether small styling is to be applied to the element.
         */
        "small"?: boolean;
        /**
          * The value of the currently selected option.
         */
        "value": string;
    }
    interface IcNavigationButton {
        /**
          * Prompts the user to save the linked URL instead of navigating to it.
         */
        "download"?: string | boolean;
        /**
          * The URL that the link points to. This will render the button as an "a" tag.
         */
        "href"?: string;
        /**
          * Hints at the human language of the linked URL.
         */
        "hreflang"?: string;
        /**
          * label info to display
         */
        "label": string;
        /**
          * How much of the referrer to send when following the link.
         */
        "referrerpolicy"?: ReferrerPolicy;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string;
        /**
          * Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe).
         */
        "target"?: string;
    }
    interface IcNavigationGroup {
        /**
          * whether the group should be expandable/collapsible in the side menu
         */
        "expandable"?: boolean;
        /**
          * label to display on the group
         */
        "label"?: string;
    }
    interface IcNavigationItem {
        "collapsedIconLabel"?: boolean;
        "displayNavigationTooltip"?: boolean;
        "expandable"?: boolean;
        /**
          * Destination of the navigation item
         */
        "href"?: string;
        /**
          * Label of the navigation item
         */
        "label"?: string;
        "onChildBlur"?: (event: IcNavigationItemCustomEvent<void>) => void;
        "onIcNavItemClicked"?: (event: IcNavigationItemCustomEvent<void>) => void;
        /**
          * If true, sets the navigation item in a selected state
         */
        "selected"?: boolean;
    }
    interface IcNavigationMenu {
        "onIcNavigationMenuClose"?: (event: IcNavigationMenuCustomEvent<void>) => void;
        /**
          * Status info to display
         */
        "status"?: string;
        /**
          * Version info to display
         */
        "version"?: string;
    }
    interface IcPageHeader {
        /**
          * How the component should be aligned.
         */
        "aligned"?: IcAlignment;
        /**
          * Set whether the bottom border is used
         */
        "border"?: boolean;
        /**
          * The title to render on the component.
         */
        "heading"?: string;
        /**
          * Set whether the reading pattern and tab order change in the action area for viewport widths of above 576px and when actions have not wrapped
         */
        "reverseOrder"?: boolean;
        /**
          * Whether the component uses small styling.
         */
        "small"?: boolean;
        /**
          * Set whether the header is sticky at all breakpoints
         */
        "sticky"?: boolean;
        /**
          * Set whether the header is only sticky for viewport widths of 992px and above
         */
        "stickyDesktopOnly"?: boolean;
        /**
          * The subtitle to render on the component.
         */
        "subheading"?: string;
    }
    interface IcRadioGroup {
        /**
          * Specify whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Provide helper text to display additional field guidance.
         */
        "helperText"?: string;
        /**
          * Hides the label and applies the required label value as an aria-label.
         */
        "hideLabel"?: boolean;
        /**
          * Provide a label for the input.
         */
        "label": string;
        /**
          * Provide a name for the input.
         */
        "name": string;
        /**
          * Emitted when a user selects a radio.
         */
        "onIcChange"?: (event: IcRadioGroupCustomEvent<IcValueEventDetail>) => void;
        /**
          * Specify if the input requires a value.
         */
        "required"?: boolean;
        /**
          * Specify whether small styling is to be applied to the element.
         */
        "small"?: boolean;
        /**
          * Provide validation status - 'error'
         */
        "validationStatus"?: IcInformationStatusOrEmpty;
        /**
          * Provide validation text - 'error'
         */
        "validationText"?: string;
    }
    interface IcRadioOption {
        /**
          * Determines type of additional text field in relation to radio option
         */
        "additionalFieldDisplay"?: IcAdditionalFieldTypes;
        /**
          * Determines whether the radio should be in disabled state.
         */
        "disabled"?: boolean;
        /**
          * Provide a text prop for the dynamic text.
         */
        "dynamicText"?: string;
        /**
          * Provide a group label for the input.
         */
        "groupLabel"?: string;
        /**
          * Provide a label for the input.
         */
        "label"?: string;
        /**
          * Provide a name for the input.
         */
        "name"?: string;
        /**
          * Emitted when radio is checked
         */
        "onIcCheck"?: (event: IcRadioOptionCustomEvent<void>) => void;
        /**
          * Emitted when a radio is selected.
         */
        "onRadioOptionSelect"?: (event: IcRadioOptionCustomEvent<IcValueEventDetail>) => void;
        /**
          * Determines whether the radio should be in selected state.
         */
        "selected"?: boolean;
        /**
          * Provide a value for the input.
         */
        "value": string;
    }
    interface IcSearchBar {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: "off", "none", "on", "sentences", "words", "characters".
         */
        "autocapitalize"?: string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: IcAutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect"?: IcAutocorrectStates;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * Number of characters until suggestions appear
         */
        "charactersUntilSuggestion"?: number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * Specify whether to disable the built in filtering. For example, if options will already be filtered from external source. If true, all options provided will be displayed.
         */
        "disableFilter"?: boolean;
        /**
          * Specify whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Provide text for empty results list
         */
        "emptyOptionListText"?: string;
        /**
          * Specify whether the input should be focussed when component loaded.
         */
        "focusOnLoad"?: boolean;
        /**
          * Specify whether the component fills the full width of the container. If true, this overrides the --input-width css prop.
         */
        "fullWidth"?: boolean;
        /**
          * Provide helper text to display additional field guidance.
         */
        "helperText"?: string;
        /**
          * Hides the label and applies the required label value as an aria-label.
         */
        "hideLabel"?: boolean;
        /**
          * Provide hint text for hidden assistive description element.
         */
        "hintText"?: string;
        /**
          * Provide a label for the input.
         */
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onIcChange"?: (event: IcSearchBarCustomEvent<IcValueEventDetail>) => void;
        /**
          * Emitted when value is cleared with clear button
         */
        "onIcClear"?: (event: IcSearchBarCustomEvent<void>) => void;
        "onIcClearBlur"?: (event: IcSearchBarCustomEvent<IcBlurEventDetail>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onIcInput"?: (event: IcSearchBarCustomEvent<IcValueEventDetail>) => void;
        /**
          * Emitted when input loses focus.
         */
        "onIcInputBlur"?: (event: IcSearchBarCustomEvent<IcSearchBarBlurEventDetail>) => void;
        /**
          * Emitted when input gains focus.
         */
        "onIcInputFocus"?: (event: IcSearchBarCustomEvent<IcValueEventDetail>) => void;
        /**
          * Emitted when the state of the menu changes (i.e. open or close)
         */
        "onIcMenuChange"?: (event: IcSearchBarCustomEvent<IcMenuChangeEventDetail>) => void;
        /**
          * Emitted when option is highlighted within the menu
         */
        "onIcOptionSelect"?: (event: IcSearchBarCustomEvent<IcOptionSelectEventDetail>) => void;
        /**
          * Emitted when blur is invoked from ic-search-bar
         */
        "onIcSearchBarBlur"?: (event: IcSearchBarCustomEvent<IcSearchBarBlurEventDetail>) => void;
        /**
          * Emitted when focus is invoked from ic-search-bar
         */
        "onIcSearchBarFocus"?: (event: IcSearchBarCustomEvent<void>) => void;
        /**
          * Emitted when the search value has been submitted
         */
        "onIcSubmitSearch"?: (event: IcSearchBarCustomEvent<IcValueEventDetail>) => void;
        "onIcSubmitSearchBlur"?: (event: IcSearchBarCustomEvent<IcBlurEventDetail>) => void;
        /**
          * Provide the suggested search options
         */
        "options"?: IcMenuOption[];
        /**
          * Provide a placeholder value to display.
         */
        "placeholder"?: string;
        /**
          * Specify whether the input is read only.
         */
        "readonly"?: boolean;
        /**
          * Specify if the input requires a value.
         */
        "required"?: boolean;
        /**
          * Specify whether small styling is to be applied to the element.
         */
        "small"?: boolean;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * Value of Search input.
         */
        "value"?: string;
    }
    interface IcSectionContainer {
        /**
          * How the container should be aligned.
         */
        "aligned"?: IcAlignment;
        /**
          * Removes the standard vertical padding from the container.
         */
        "fullHeight"?: boolean;
    }
    interface IcSelect {
        /**
          * Number of characters until suggestions appear for a searchable select.
         */
        "charactersUntilSuggestions"?: number;
        /**
          * Specify whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Provide text for empty results list
         */
        "emptyOptionListText"?: string;
        /**
          * If true, then fill width of container.
         */
        "fullWidth"?: boolean;
        /**
          * Provide helper text to display additional field guidance.
         */
        "helperText"?: string;
        /**
          * Hides the label and applies the required label value as an aria-label.
         */
        "hideLabel"?: boolean;
        /**
          * If true, descriptions of options are included when filtering options in a searchable select.
         */
        "includeDescriptionsInSearch"?: boolean;
        /**
          * If true, group titles of grouped options are included when filtering options in a searchable select.
         */
        "includeGroupTitlesInSearch"?: boolean;
        /**
          * Provide a label for the input.
         */
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when select has blur.
         */
        "onIcBlur"?: (event: IcSelectCustomEvent<void>) => void;
        /**
          * Emitted when a value is selected.
         */
        "onIcChange"?: (event: IcSelectCustomEvent<IcValueEventDetail>) => void;
        /**
          * Emitted when select has focus.
         */
        "onIcFocus"?: (event: IcSelectCustomEvent<void>) => void;
        /**
          * Provide the possible selection options.
         */
        "options"?: IcMenuOption[];
        /**
          * Provide a placeholder value to display.
         */
        "placeholder"?: string;
        /**
          * Specify whether the input is read only.
         */
        "readonly"?: boolean;
        /**
          * Specify if the input requires a value.
         */
        "required"?: boolean;
        /**
          * Whether the search string of the searchable select should match the start of or anywhere in the options.
         */
        "searchMatchPosition"?: IcSearchMatchPositions;
        /**
          * If true, the select can be typed in to filter options.
         */
        "searchable"?: boolean;
        /**
          * Display a button which clears the input when clicked. The button will always appear on the searchable select.
         */
        "showClearButton"?: boolean;
        /**
          * Specify whether small styling is to be applied to the element.
         */
        "small"?: boolean;
        /**
          * Provide a validation status.
         */
        "validationStatus"?: IcInformationStatusOrEmpty;
        /**
          * Provide the text to display as the validation message.
         */
        "validationText"?: string;
        /**
          * The value of the currently selected option.
         */
        "value"?: string;
    }
    interface IcSideNavigation {
        /**
          * Title to display.
         */
        "appTitle": string;
        /**
          * If true, the icon and label will appear when side navigation is collapsed
         */
        "collapsedIconLabels"?: boolean;
        /**
          * If true, disable automatic parent wrapper styling
         */
        "disableAutoParentStyling"?: boolean;
        /**
          * If true, the ic-side-navigation will load in an expanded state
         */
        "expanded"?: boolean;
        /**
          * Set application title link
         */
        "href"?: string;
        /**
          * If true, side navigation will be contained by parent element
         */
        "inline"?: boolean;
        /**
          * If true, the menu expand button is removed (PLEASE NOTE: This takes effect on screen sizes 992px and above)
         */
        "static"?: boolean;
        /**
          * Status of application
         */
        "status"?: string;
        /**
          * Version of application
         */
        "version"?: string;
    }
    interface IcSkeleton {
        /**
          * Set the skeleton to the light variant
         */
        "light"?: boolean;
        /**
          * The variant of the skeleton that will be displayed
         */
        "variant"?: IcSkeletonVariants;
    }
    interface IcStatusTag {
        /**
          * The emphasis of the status tag.
         */
        "appearance"?: IcStatusTagAppearance;
        /**
          * The content rendered within the status tag.
         */
        "label": string;
        /**
          * The size of the status tag.
         */
        "small"?: boolean;
        /**
          * The colour of the status tag.
         */
        "status"?: IcStatusTagStatuses;
    }
    interface IcStep {
        "lastStep": boolean;
        "stepNum": number;
        /**
          * Additional information about step
         */
        "stepSubtitle"?: string;
        /**
          * Name of step
         */
        "stepTitle"?: string;
        /**
          * State of step
         */
        "stepType"?: IcStepTypes;
    }
    interface IcStepper {
        /**
          * How the stepper should be aligned in its container.
         */
        "aligned"?: IcStepperAlignment;
        /**
          * The length of the connnector between each step in pixels. Minimum length is 100px.
         */
        "connectorWidth"?: number;
    }
    interface IcSwitch {
        /**
          * If true, the component is checked.
         */
        "checked"?: boolean;
        /**
          * If true, the component is not interactive.
         */
        "disabled"?: boolean;
        /**
          * Provide helper text to display additional field guidance.
         */
        "helperText"?: string;
        /**
          * Hides the label and applies the required label value as an aria-label.
         */
        "hideLabel"?: boolean;
        /**
          * Applies an aria-label to the component, for when no visual 'name' is provided.
         */
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the toggle loses focus.
         */
        "onIcBlur"?: (event: IcSwitchCustomEvent<void>) => void;
        /**
          * Emitted when the value property has changed.
         */
        "onIcChange"?: (event: IcSwitchCustomEvent<IcSwitchChangeEventDetail>) => void;
        /**
          * Emitted when the toggle has focus.
         */
        "onIcFocus"?: (event: IcSwitchCustomEvent<void>) => void;
        /**
          * If true, the component will render the On/Off state text.
         */
        "showState"?: boolean;
        /**
          * If true, the component reduces in size to the small state.
         */
        "small"?: boolean;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: string | null;
    }
    interface IcTab {
        "appearance"?: IcThemeForegroundNoDefault;
        "contextId"?: string;
        /**
          * Disables the tab.
         */
        "disabled"?: boolean;
        /**
          * Called when a tab is selected.
         */
        "onTabClick"?: (event: IcTabCustomEvent<IcTabClickEventDetail>) => void;
        "onTabFocus"?: (event: IcTabCustomEvent<IcTabClickEventDetail>) => void;
        "selected"?: boolean;
        "tabId"?: string;
        "tabPosition": number;
    }
    interface IcTabContext {
        /**
          * Determines whether tabs have to be manually activated (by pressing 'Enter' or 'Space') when they receive focus using keyboard navigation.
         */
        "activationType"?: IcActivationTypes;
        /**
          * Determines whether the light or dark variant of the tabs should be displayed.
         */
        "appearance"?: IcThemeForegroundNoDefault;
        /**
          * Provide a unique context if using multiple tabs inside one another i.e. rendering another set of tabs inside a tab panel.
         */
        "contextId"?: string;
        /**
          * Emitted when a user selects a tab.
         */
        "onTabSelect"?: (event: IcTabContextCustomEvent<IcTabSelectEventDetail>) => void;
        /**
          * Allows the user to control the selected tab. Must be used alongside the tabSelect event to manage tab selection.
         */
        "selectedTabIndex"?: number;
    }
    interface IcTabGroup {
        "appearance"?: IcThemeForegroundNoDefault;
        /**
          * Provide a unique context if using multiple tabs inside one another i.e. rendering another set of tabs inside a tab panel.
         */
        "contextId"?: string;
        /**
          * Use when tabs and tab panels are to be positioned separately.
         */
        "inline"?: boolean;
        /**
          * Provide a label to describe the purpose of the set of tabs to screen reader users.
         */
        "label": string;
    }
    interface IcTabPanel {
        /**
          * Provide a unique context if using multiple tabs inside one another i.e. rendering another tabs inside a tab panel.
         */
        "contextId"?: string;
        "panelId"?: string;
        "selectedTab"?: string;
        "tabPosition": number;
    }
    interface IcTextField {
        "ariaActiveDescendant"?: string;
        "ariaAutocomplete"?: IcAriaAutocompleteTypes;
        "ariaExpanded"?: string;
        "ariaOwns"?: string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autoFocus"?: boolean;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: "off", "none", "on", "sentences", "words", "characters".
         */
        "autocapitalize"?: string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: IcAutocompleteTypes1;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect"?: IcAutocorrectStates1;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * Specify whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Specify whether the component fills the full width of the container. If true, this overrides the --input-width css prop.
         */
        "fullWidth"?: boolean;
        /**
          * Provide helper text to display additional field guidance.
         */
        "helperText"?: string;
        "hiddenInput"?: boolean;
        /**
          * Hides the label and applies the required label value as an aria-label.
         */
        "hideLabel"?: boolean;
        /**
          * Provide an id for the input
         */
        "inputId"?: string;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: IcTextFieldInputModes;
        /**
          * Provide a label for the input.
         */
        "label": string;
        /**
          * Maximum number of characters that can be entered in the field.
         */
        "maxLength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when input loses focus.
         */
        "onIcBlur"?: (event: IcTextFieldCustomEvent<IcValueEventDetail>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onIcChange"?: (event: IcTextFieldCustomEvent<IcValueEventDetail>) => void;
        /**
          * Emitted when input gains focus.
         */
        "onIcFocus"?: (event: IcTextFieldCustomEvent<IcValueEventDetail>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onIcInput"?: (event: IcTextFieldCustomEvent<IcValueEventDetail>) => void;
        /**
          * Emitted when a keydown event occurred.
         */
        "onIcKeydown"?: (event: IcTextFieldCustomEvent<{ event: KeyboardEvent }>) => void;
        /**
          * Provide a placeholder value to display.
         */
        "placeholder"?: string;
        /**
          * Specify whether the input is read only.
         */
        "readonly"?: boolean;
        /**
          * Specify if the input requires a value.
         */
        "required"?: boolean;
        /**
          * Allow resizing of a multiline text area
         */
        "resize"?: boolean;
        "role"?: string;
        /**
          * Specify the number of rows to transform the text field into a text area with a specific height.
         */
        "rows"?: number;
        /**
          * Specify whether small styling is to be applied to the element.
         */
        "small"?: boolean;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        "truncateValue"?: boolean;
        /**
          * The type of control to display. The default type is text.
         */
        "type"?: IcTextFieldTypes;
        /**
          * Show icon in input control - only applies when validationStatus ='success'
         */
        "validationInline"?: boolean;
        /**
          * Provide validation state - 'error' | 'warning' | 'success'
         */
        "validationStatus"?: IcInformationStatusOrEmpty1;
        /**
          * Provide validation state - 'error' | 'warning' | 'success'
         */
        "validationText"?: string;
        /**
          * Value of TextField.
         */
        "value"?: string;
    }
    interface IcTheme {
        /**
          * The theme colour. Can be a hex value eg "#ff0000" or RGB eg "rgb(255, 0, 0)"
         */
        "color"?: string;
        /**
          * Emitted when the theme is changed.
         */
        "onIcThemeChange"?: (event: IcThemeCustomEvent<IcTheme>) => void;
    }
    interface IcTooltip {
        /**
          * The text to display on the tooltip.
         */
        "label": string;
        /**
          * The position of the tool-tip in relation to the parent element.
         */
        "placement"?: IcTooltipPlacements;
        /**
          * The ID of the element the tooltip is describing - for when aria-labelledby or aria-describedby is used.
         */
        "target"?: string;
    }
    interface IcTopNavigation {
        /**
          * Title to display
         */
        "appTitle": string;
        /**
          * The alignment of the top nav content
         */
        "contentAligned"?: IcAlignment;
        /**
          * The url to navigate to when title is clicked
         */
        "href"?: string;
        /**
          * If true, the flyout navigation menu on small devices will be contained by the parent element
         */
        "inline"?: boolean;
        "onIcNavigationMenuClosed"?: (event: IcTopNavigationCustomEvent<void>) => void;
        "onIcNavigationMenuOpened"?: (event: IcTopNavigationCustomEvent<void>) => void;
        /**
          * Status info to display
         */
        "status"?: string;
        /**
          * Version info to display
         */
        "version"?: string;
    }
    interface IcTypography {
        /**
          * Adds appropriate margins to the top and bottom of the typography.
         */
        "applyVerticalMargins"?: boolean;
        /**
          * The ICDS typography style to use.
         */
        "variant"?: IcTypographyVariants;
    }
    interface IntrinsicElements {
        "ic-alert": IcAlert;
        "ic-back-to-top": IcBackToTop;
        "ic-breadcrumb": IcBreadcrumb;
        "ic-breadcrumb-group": IcBreadcrumbGroup;
        "ic-button": IcButton;
        "ic-card": IcCard;
        "ic-checkbox": IcCheckbox;
        "ic-checkbox-group": IcCheckboxGroup;
        "ic-classification-banner": IcClassificationBanner;
        "ic-data-entity": IcDataEntity;
        "ic-data-row": IcDataRow;
        "ic-divider": IcDivider;
        "ic-footer": IcFooter;
        "ic-footer-link": IcFooterLink;
        "ic-footer-link-group": IcFooterLinkGroup;
        "ic-hero": IcHero;
        "ic-input-component-container": IcInputComponentContainer;
        "ic-input-container": IcInputContainer;
        "ic-input-label": IcInputLabel;
        "ic-input-validation": IcInputValidation;
        "ic-link": IcLink;
        "ic-loading-indicator": IcLoadingIndicator;
        "ic-menu": IcMenu;
        "ic-navigation-button": IcNavigationButton;
        "ic-navigation-group": IcNavigationGroup;
        "ic-navigation-item": IcNavigationItem;
        "ic-navigation-menu": IcNavigationMenu;
        "ic-page-header": IcPageHeader;
        "ic-radio-group": IcRadioGroup;
        "ic-radio-option": IcRadioOption;
        "ic-search-bar": IcSearchBar;
        "ic-section-container": IcSectionContainer;
        "ic-select": IcSelect;
        "ic-side-navigation": IcSideNavigation;
        "ic-skeleton": IcSkeleton;
        "ic-status-tag": IcStatusTag;
        "ic-step": IcStep;
        "ic-stepper": IcStepper;
        "ic-switch": IcSwitch;
        "ic-tab": IcTab;
        "ic-tab-context": IcTabContext;
        "ic-tab-group": IcTabGroup;
        "ic-tab-panel": IcTabPanel;
        "ic-text-field": IcTextField;
        "ic-theme": IcTheme;
        "ic-tooltip": IcTooltip;
        "ic-top-navigation": IcTopNavigation;
        "ic-typography": IcTypography;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ic-alert": LocalJSX.IcAlert & JSXBase.HTMLAttributes<HTMLIcAlertElement>;
            "ic-back-to-top": LocalJSX.IcBackToTop & JSXBase.HTMLAttributes<HTMLIcBackToTopElement>;
            "ic-breadcrumb": LocalJSX.IcBreadcrumb & JSXBase.HTMLAttributes<HTMLIcBreadcrumbElement>;
            "ic-breadcrumb-group": LocalJSX.IcBreadcrumbGroup & JSXBase.HTMLAttributes<HTMLIcBreadcrumbGroupElement>;
            "ic-button": LocalJSX.IcButton & JSXBase.HTMLAttributes<HTMLIcButtonElement>;
            "ic-card": LocalJSX.IcCard & JSXBase.HTMLAttributes<HTMLIcCardElement>;
            "ic-checkbox": LocalJSX.IcCheckbox & JSXBase.HTMLAttributes<HTMLIcCheckboxElement>;
            "ic-checkbox-group": LocalJSX.IcCheckboxGroup & JSXBase.HTMLAttributes<HTMLIcCheckboxGroupElement>;
            "ic-classification-banner": LocalJSX.IcClassificationBanner & JSXBase.HTMLAttributes<HTMLIcClassificationBannerElement>;
            "ic-data-entity": LocalJSX.IcDataEntity & JSXBase.HTMLAttributes<HTMLIcDataEntityElement>;
            "ic-data-row": LocalJSX.IcDataRow & JSXBase.HTMLAttributes<HTMLIcDataRowElement>;
            "ic-divider": LocalJSX.IcDivider & JSXBase.HTMLAttributes<HTMLIcDividerElement>;
            "ic-footer": LocalJSX.IcFooter & JSXBase.HTMLAttributes<HTMLIcFooterElement>;
            "ic-footer-link": LocalJSX.IcFooterLink & JSXBase.HTMLAttributes<HTMLIcFooterLinkElement>;
            "ic-footer-link-group": LocalJSX.IcFooterLinkGroup & JSXBase.HTMLAttributes<HTMLIcFooterLinkGroupElement>;
            "ic-hero": LocalJSX.IcHero & JSXBase.HTMLAttributes<HTMLIcHeroElement>;
            "ic-input-component-container": LocalJSX.IcInputComponentContainer & JSXBase.HTMLAttributes<HTMLIcInputComponentContainerElement>;
            "ic-input-container": LocalJSX.IcInputContainer & JSXBase.HTMLAttributes<HTMLIcInputContainerElement>;
            "ic-input-label": LocalJSX.IcInputLabel & JSXBase.HTMLAttributes<HTMLIcInputLabelElement>;
            "ic-input-validation": LocalJSX.IcInputValidation & JSXBase.HTMLAttributes<HTMLIcInputValidationElement>;
            "ic-link": LocalJSX.IcLink & JSXBase.HTMLAttributes<HTMLIcLinkElement>;
            "ic-loading-indicator": LocalJSX.IcLoadingIndicator & JSXBase.HTMLAttributes<HTMLIcLoadingIndicatorElement>;
            "ic-menu": LocalJSX.IcMenu & JSXBase.HTMLAttributes<HTMLIcMenuElement>;
            "ic-navigation-button": LocalJSX.IcNavigationButton & JSXBase.HTMLAttributes<HTMLIcNavigationButtonElement>;
            "ic-navigation-group": LocalJSX.IcNavigationGroup & JSXBase.HTMLAttributes<HTMLIcNavigationGroupElement>;
            "ic-navigation-item": LocalJSX.IcNavigationItem & JSXBase.HTMLAttributes<HTMLIcNavigationItemElement>;
            "ic-navigation-menu": LocalJSX.IcNavigationMenu & JSXBase.HTMLAttributes<HTMLIcNavigationMenuElement>;
            "ic-page-header": LocalJSX.IcPageHeader & JSXBase.HTMLAttributes<HTMLIcPageHeaderElement>;
            "ic-radio-group": LocalJSX.IcRadioGroup & JSXBase.HTMLAttributes<HTMLIcRadioGroupElement>;
            "ic-radio-option": LocalJSX.IcRadioOption & JSXBase.HTMLAttributes<HTMLIcRadioOptionElement>;
            "ic-search-bar": LocalJSX.IcSearchBar & JSXBase.HTMLAttributes<HTMLIcSearchBarElement>;
            "ic-section-container": LocalJSX.IcSectionContainer & JSXBase.HTMLAttributes<HTMLIcSectionContainerElement>;
            "ic-select": LocalJSX.IcSelect & JSXBase.HTMLAttributes<HTMLIcSelectElement>;
            "ic-side-navigation": LocalJSX.IcSideNavigation & JSXBase.HTMLAttributes<HTMLIcSideNavigationElement>;
            "ic-skeleton": LocalJSX.IcSkeleton & JSXBase.HTMLAttributes<HTMLIcSkeletonElement>;
            "ic-status-tag": LocalJSX.IcStatusTag & JSXBase.HTMLAttributes<HTMLIcStatusTagElement>;
            "ic-step": LocalJSX.IcStep & JSXBase.HTMLAttributes<HTMLIcStepElement>;
            "ic-stepper": LocalJSX.IcStepper & JSXBase.HTMLAttributes<HTMLIcStepperElement>;
            "ic-switch": LocalJSX.IcSwitch & JSXBase.HTMLAttributes<HTMLIcSwitchElement>;
            "ic-tab": LocalJSX.IcTab & JSXBase.HTMLAttributes<HTMLIcTabElement>;
            "ic-tab-context": LocalJSX.IcTabContext & JSXBase.HTMLAttributes<HTMLIcTabContextElement>;
            "ic-tab-group": LocalJSX.IcTabGroup & JSXBase.HTMLAttributes<HTMLIcTabGroupElement>;
            "ic-tab-panel": LocalJSX.IcTabPanel & JSXBase.HTMLAttributes<HTMLIcTabPanelElement>;
            "ic-text-field": LocalJSX.IcTextField & JSXBase.HTMLAttributes<HTMLIcTextFieldElement>;
            "ic-theme": LocalJSX.IcTheme & JSXBase.HTMLAttributes<HTMLIcThemeElement>;
            "ic-tooltip": LocalJSX.IcTooltip & JSXBase.HTMLAttributes<HTMLIcTooltipElement>;
            "ic-top-navigation": LocalJSX.IcTopNavigation & JSXBase.HTMLAttributes<HTMLIcTopNavigationElement>;
            "ic-typography": LocalJSX.IcTypography & JSXBase.HTMLAttributes<HTMLIcTypographyElement>;
        }
    }
}
