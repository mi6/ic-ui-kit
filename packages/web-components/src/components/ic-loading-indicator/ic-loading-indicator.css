@import "../../global/normalise.css";

:host {
  /**
   * @prop --circular-diameter: Diameter of the circular-indicator
   */

  display: block;

  --linear-border-radius: 4px;
  --inner-color: var(--ic-action-default);
  --outer-color: var(--ic-architectural-100);
  --label-color: var(--ic-color-primary-text);
  --margin: none;
  --linear-line-height: var(--ic-space-xs);
}

.ic-loading-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

:host([size="small"]) {
  --circular-diameter: 40px;
  --linear-line-height: var(--ic-space-xxs);
}

:host([size="default"]) {
  --circular-diameter: 80px;
}

:host([size="large"]) {
  --circular-diameter: 160px;
}

:host([size="icon"]) {
  display: inline-block;

  --margin: var(--ic-space-xxxs);
  --circular-diameter: 20px;
}

:host([label]) {
  --margin: 0 0 var(--ic-space-xs) 0;
}

.ic-loading-label {
  white-space: nowrap;
  color: var(--label-color);
  margin-left: var(--label-margin-left);
}

.ic-loading-circular-outer {
  box-shadow: inset 0 0 0 var(--circular-line-width) var(--outer-color);
  height: var(--circular-diameter);
  width: var(--circular-diameter);
  border-radius: 50%;
  position: relative;
}

.ic-loading-circular-outer.indeterminate {
  animation: circular-animation 1s linear;
  animation-iteration-count: infinite;
}

.ic-loading-circular-inner {
  height: var(--circular-diameter);
  width: var(--circular-diameter);
  border-radius: 50%;
  position: relative;
}

.indeterminate > .ic-loading-circular-inner {
  box-shadow: inset 0 0 0 var(--circular-line-width) var(--inner-color);
  clip-path: inset(0 50% 50% 0);
}

.determinate > .ic-loading-circular-inner {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

.determinate > .ic-loading-circular-inner.clip {
  clip: rect(
    0,
    var(--circular-diameter),
    var(--circular-diameter),
    calc(var(--circular-diameter) / 2)
  );
}

.ic-loading-circular-inner .left,
.ic-loading-circular-inner .right {
  height: 100%;
  width: 100%;
  border: var(--circular-line-width) solid var(--inner-color);
  border-radius: 50%;
  box-sizing: border-box;
  clip: rect(
    0,
    calc(var(--circular-diameter) / 2),
    var(--circular-diameter),
    0
  );
  position: absolute;
  left: 0;
  top: 0;
}

.indeterminate > .ic-loading-circular-inner .left,
.indeterminate > .ic-loading-circular-inner .right {
  display: none;
}

.determinate > .ic-loading-circular-inner .left {
  transform: rotate(var(--circular-rotation));
}

.determinate > .ic-loading-circular-inner .right {
  transform: rotate(180deg);
}

.determinate > .ic-loading-circular-inner.clip .right {
  display: none;
}

.ic-loading-circular-outer::before {
  content: "";
  height: var(--circular-line-width);
  width: var(--circular-line-width);
  border-radius: 50%;
  background-color: var(--inner-color);
  position: absolute;
  display: block;
  top: calc(50% - var(--circular-line-width) / 2);
}

.ic-loading-circular-outer::after {
  content: "";
  height: var(--circular-line-width);
  width: var(--circular-line-width);
  border-radius: 50%;
  background-color: var(--inner-color);
  position: absolute;
  display: block;
  top: 0;
  left: calc(50% - var(--circular-line-width) / 2);
}

.ic-loading-circular-outer.determinate::before,
.ic-loading-circular-outer.determinate::after {
  display: none;
}

@keyframes circular-animation {
  100% {
    transform: rotate(360deg);
  }
}

.ic-loading-circular-outer,
.ic-loading-linear-outer {
  margin: var(--margin);
}

.ic-loading-linear-outer {
  background-color: var(--outer-color);
  height: var(--linear-line-height);
  width: 100%;
  border-radius: var(--linear-border-radius);
  overflow: hidden;
}

.ic-loading-linear-inner {
  position: relative;
  height: 100%;
  background-color: var(--inner-color);
  border-radius: var(--linear-border-radius);
}

.indeterminate > .ic-loading-linear-inner {
  animation: linear-animation 2s infinite;
}

.determinate > .ic-loading-linear-inner {
  transition: width 0.5s;
  width: var(--linear-width);
}

:host([full-width]) {
  --linear-border-radius: none;
}

@keyframes linear-animation {
  0% {
    width: 0%;
    left: -1%;
  }

  25% {
    width: 0%;
    left: -1%;
  }

  50% {
    width: 101%;
    left: -1%;
  }

  75% {
    width: 0%;
    left: 101%;
  }

  100% {
    width: 0%;
    left: 101%;
  }
}

:host(.light) {
  --inner-color: var(--ic-architectural-white);
  --outer-color: var(--ic-architectural-800);
  --label-color: var(--ic-architectural-white);
}

/** High Contrast **/
@media (forced-colors: active) {
  .indeterminate > .ic-loading-circular-inner {
    forced-color-adjust: none;
    box-shadow: inset 0 0 0 var(--circular-line-width) canvastext;
  }

  .ic-loading-linear-outer {
    border: 1px solid transparent;
  }
  
  .ic-loading-circular-outer::after,
  .ic-loading-circular-outer::before {
    background-color: transparent;
  }

  .ic-loading-linear-inner {
    background-color: canvastext;
  }
}
