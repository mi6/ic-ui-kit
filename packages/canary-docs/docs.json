{
  "compiler": {
    "name": "@stencil/core",
    "version": "4.26.0",
    "typescriptVersion": "5.5.4"
  },
  "components": [
    {
      "filePath": "src/components/ic-card-horizontal/ic-card-horizontal.tsx",
      "encapsulation": "shadow",
      "tag": "ic-card-horizontal",
      "readme": "# ic-horizontal-card\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "heading - Content will be placed at the top of the horizontal card to the right of the icon."
        },
        {
          "name": "slot",
          "text": "message - Content will be placed in the main body of the horizontal card."
        },
        {
          "name": "slot",
          "text": "image - Content will be placed to the left of all other content."
        },
        {
          "name": "slot",
          "text": "icon - Content will be placed to the left of the horizontal card heading."
        },
        {
          "name": "slot",
          "text": "badge - Badge component overlaying the top right of the horizontal card."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "clickable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "clickable",
          "reflectToAttr": false,
          "docs": "If `true`, the horizontal card will be a clickable variant, instead of static.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the horizontal card will be disabled if it is clickable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "heading",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "The heading for the horizontal card. This is required, unless a slotted heading is used.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "The URL that the clickable horizontal card link points to. If set, the clickable horizontal card will render as an \"a\" tag, otherwise it will render as a button.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hreflang",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "hreflang",
          "reflectToAttr": false,
          "docs": "The human language of the linked URL.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "message",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "The main body message of the horizontal card.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "referrerpolicy",
          "type": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\" | undefined",
          "complexType": {
            "original": "ReferrerPolicy",
            "resolved": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\" | undefined",
            "references": {
              "ReferrerPolicy": {
                "location": "global",
                "id": "global::ReferrerPolicy"
              }
            }
          },
          "mutable": false,
          "attr": "referrerpolicy",
          "reflectToAttr": false,
          "docs": "How much of the referrer to send when following the link.",
          "docsTags": [],
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "no-referrer",
              "type": "string"
            },
            {
              "value": "no-referrer-when-downgrade",
              "type": "string"
            },
            {
              "value": "origin",
              "type": "string"
            },
            {
              "value": "origin-when-cross-origin",
              "type": "string"
            },
            {
              "value": "same-origin",
              "type": "string"
            },
            {
              "value": "strict-origin",
              "type": "string"
            },
            {
              "value": "strict-origin-when-cross-origin",
              "type": "string"
            },
            {
              "value": "unsafe-url",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rel",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "The relationship of the linked URL as space-separated link types.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"extra-large\" | \"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "IcCardSizes",
            "resolved": "\"extra-large\" | \"large\" | \"medium\" | \"small\"",
            "references": {
              "IcCardSizes": {
                "location": "import",
                "path": "./ic-card-horizontal.types",
                "id": "src/components/ic-card-horizontal/ic-card-horizontal.types.ts::IcCardSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the horizontal card.",
          "docsTags": [],
          "default": "\"medium\"",
          "values": [
            {
              "value": "extra-large",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "target",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "The place to display the linked URL, as the name for a browsing context (a tab, window, or iframe).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "theme",
          "type": "\"dark\" | \"inherit\" | \"light\" | undefined",
          "complexType": {
            "original": "IcThemeMode",
            "resolved": "\"dark\" | \"inherit\" | \"light\" | undefined",
            "references": {
              "IcThemeMode": {
                "location": "import",
                "path": "@ukic/web-components",
                "id": "../web-components/dist/types/interface.d.ts::IcThemeMode"
              }
            }
          },
          "mutable": false,
          "attr": "theme",
          "reflectToAttr": false,
          "docs": "Sets the theme color to the dark or light theme color. \"inherit\" will set the color based on the system settings or ic-theme component.",
          "docsTags": [],
          "default": "\"inherit\"",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "inherit",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the card.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": true,
          "passive": false
        },
        {
          "event": "brandChange",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--card-horizontal-width",
          "annotation": "prop",
          "docs": "Width of the horizontal card"
        }
      ],
      "slots": [
        {
          "name": "badge",
          "docs": "Badge component overlaying the top right of the horizontal card."
        },
        {
          "name": "heading",
          "docs": "Content will be placed at the top of the horizontal card to the right of the icon."
        },
        {
          "name": "icon",
          "docs": "Content will be placed to the left of the horizontal card heading."
        },
        {
          "name": "image",
          "docs": "Content will be placed to the left of all other content."
        },
        {
          "name": "message",
          "docs": "Content will be placed in the main body of the horizontal card."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ic-typography"
      ],
      "dependencyGraph": {
        "ic-card-horizontal": [
          "ic-typography"
        ]
      }
    },
    {
      "filePath": "src/components/ic-data-table/ic-data-table.tsx",
      "encapsulation": "shadow",
      "tag": "ic-data-table",
      "readme": "# ic-data-table\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "empty-state - Content is slotted below the table header when there is no data and the table is not loading."
        },
        {
          "name": "slot",
          "text": "{COLUMN_KEY}-{ROW_INDEX}[-icon] - Each cell should have its own slot, named using the column tag and the row index, allowing for custom elements to be displayed. Include `-icon` at the end for that cell's icon slot."
        },
        {
          "name": "slot",
          "text": "{COLUMN_KEY}-column-icon - The icon slot for a column header."
        },
        {
          "name": "slot",
          "text": "title-bar - A custom ic-data-table-title-bar can be slotted above the column headers to display additional information about the table."
        },
        {
          "name": "slot",
          "text": "pagination-bar - A custom ic-pagination-bar can be slotted below the data to provide enhanced control over how the data is interacted with when being fetched externally."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "caption",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "caption",
          "reflectToAttr": false,
          "docs": "The title for the table only visible to screen readers.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "columnHeaderTruncation",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "column-header-truncation",
          "reflectToAttr": false,
          "docs": "Determines whether the column header should be truncated and display a tooltip. Default is `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "columns",
          "type": "IcDataTableColumnObject[]",
          "complexType": {
            "original": "IcDataTableColumnObject[]",
            "resolved": "IcDataTableColumnObject[]",
            "references": {
              "IcDataTableColumnObject": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableColumnObject"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The column headers for the table.",
          "docsTags": [],
          "values": [
            {
              "type": "IcDataTableColumnObject[]"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "data",
          "type": "IcDataTableDataType[] | undefined",
          "complexType": {
            "original": "IcDataTableDataType[]",
            "resolved": "IcDataTableDataType[] | undefined",
            "references": {
              "IcDataTableDataType": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableDataType"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The row content for the table.",
          "docsTags": [],
          "values": [
            {
              "type": "IcDataTableDataType[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "density",
          "type": "\"default\" | \"dense\" | \"spacious\"",
          "complexType": {
            "original": "IcDataTableDensityOptions",
            "resolved": "\"default\" | \"dense\" | \"spacious\"",
            "references": {
              "IcDataTableDensityOptions": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableDensityOptions"
              }
            }
          },
          "mutable": true,
          "attr": "density",
          "reflectToAttr": false,
          "docs": "Set the density of the table including font and padding.",
          "docsTags": [],
          "default": "\"default\"",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "dense",
              "type": "string"
            },
            {
              "value": "spacious",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disableAutoSort",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-auto-sort",
          "reflectToAttr": false,
          "docs": "If `true`, the built in sort functionality will be disabled. For example, if rows will already be sorted from an external source.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "embedded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "embedded",
          "reflectToAttr": false,
          "docs": "Applies a border to the table container.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "globalRowHeight",
          "type": "\"auto\" | number",
          "complexType": {
            "original": "IcDataTableRowHeights",
            "resolved": "\"auto\" | number",
            "references": {
              "IcDataTableRowHeights": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableRowHeights"
              }
            }
          },
          "mutable": true,
          "attr": "global-row-height",
          "reflectToAttr": false,
          "docs": "Sets the row height on all rows in the table that aren't set using the `variableRowHeight` method.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "height",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "height",
          "reflectToAttr": false,
          "docs": "Sets the table height. Can be set to `auto` or a specific value in `px`, `rem`, or `%`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideColumnHeaders",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-column-headers",
          "reflectToAttr": false,
          "docs": "If `true`, column headers will not be visible.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "When set to `true`, the full table will show a loading state, featuring a radial indicator.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "loadingOptions",
          "type": "undefined | { description?: string | undefined; label?: string | undefined; labelDuration?: number | undefined; max?: number | undefined; min?: number | undefined; progress?: number | undefined; monochrome?: boolean | undefined; overlay?: boolean | undefined; }",
          "complexType": {
            "original": "{\r\n    description?: string;\r\n    label?: string;\r\n    labelDuration?: number;\r\n    max?: number;\r\n    min?: number;\r\n    progress?: number;\r\n    monochrome?: boolean;\r\n    overlay?: boolean;\r\n  }",
            "resolved": "undefined | { description?: string | undefined; label?: string | undefined; labelDuration?: number | undefined; max?: number | undefined; min?: number | undefined; progress?: number | undefined; monochrome?: boolean | undefined; overlay?: boolean | undefined; }",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sets the props for the circular loading indicator used in the loading state.",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ description?: string"
            },
            {
              "type": "undefined; label?: string"
            },
            {
              "type": "undefined; labelDuration?: number"
            },
            {
              "type": "undefined; max?: number"
            },
            {
              "type": "undefined; min?: number"
            },
            {
              "type": "undefined; progress?: number"
            },
            {
              "type": "undefined; monochrome?: boolean"
            },
            {
              "type": "undefined; overlay?: boolean"
            },
            {
              "type": "undefined; }"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "maxWidth",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "max-width",
          "reflectToAttr": false,
          "docs": "Sets the maximum width of the data table. Can be set in `px`, `rem`, or `%`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "minWidth",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "min-width",
          "reflectToAttr": false,
          "docs": "Sets the minimum width of the data table. Can be set in `px`, `rem`, or `%`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "minimumLoadingDisplayDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minimum-loading-display-duration",
          "reflectToAttr": false,
          "docs": "The minimum amount of time the `loading` state displays for before showing the data. Used to prevent flashing in the component.",
          "docsTags": [],
          "default": "1000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "paginationBarOptions",
          "type": "IcPaginationBarOptions",
          "complexType": {
            "original": "IcPaginationBarOptions",
            "resolved": "IcPaginationBarOptions",
            "references": {
              "IcPaginationBarOptions": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcPaginationBarOptions"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sets the props for the built-in pagination bar. If the `pagination-bar` slot is used then this prop is ignored.",
          "docsTags": [],
          "default": "{\r\n    alignment: \"right\",\r\n    hideAllFromItemsPerPage: false,\r\n    hideRangeLabel: false,\r\n    itemLabel: \"Item\",\r\n    itemsPerPageOptions: [\r\n      { label: \"10\", value: \"10\" },\r\n      { label: \"25\", value: \"25\" },\r\n      { label: \"50\", value: \"50\" },\r\n    ],\r\n    monochrome: false,\r\n    pageLabel: \"Page\",\r\n    rangeLabelType: \"page\",\r\n    selectedItemsPerPage: 10,\r\n    selectItemsPerPageOnEnter: true,\r\n    setToFirstPageOnPaginationChange: false,\r\n    showGoToPageControl: true,\r\n    showItemsPerPageControl: true,\r\n    type: \"simple\",\r\n  }",
          "values": [
            {
              "type": "IcPaginationBarOptions"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rowSelection",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "row-selection",
          "reflectToAttr": false,
          "docs": "If `true`, a checkbox column will be displayed to the left of the table which allows multiple rows to be selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showPagination",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "show-pagination",
          "reflectToAttr": false,
          "docs": "If `true`, adds a pagination bar to the bottom of the table.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "sortOptions",
          "type": "{ sortOrders: IcDataTableSortOrderOptions[]; defaultColumn?: string | undefined; }",
          "complexType": {
            "original": "{\r\n    sortOrders: IcDataTableSortOrderOptions[];\r\n    defaultColumn?: string;\r\n  }",
            "resolved": "{ sortOrders: IcDataTableSortOrderOptions[]; defaultColumn?: string | undefined; }",
            "references": {
              "IcDataTableSortOrderOptions": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableSortOrderOptions"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sets the order columns will be sorted in and allows for 'default' sorts to be added.",
          "docsTags": [],
          "default": "{\r\n    sortOrders: [\"unsorted\", \"ascending\", \"descending\"],\r\n    defaultColumn: \"\",\r\n  }",
          "values": [
            {
              "type": "{ sortOrders: IcDataTableSortOrderOptions[]; defaultColumn?: string"
            },
            {
              "type": "undefined; }"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "sortable",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "sortable",
          "reflectToAttr": false,
          "docs": "If `true`, allows table columns to be sorted using applied sort buttons.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "stickyColumnHeaders",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sticky-column-headers",
          "reflectToAttr": false,
          "docs": "If `true`, column headers will remain at the top of the table when scrolling vertically.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "stickyRowHeaders",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sticky-row-headers",
          "reflectToAttr": false,
          "docs": "If `true`, row headers will remain to the left when scrolling horizontally.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "tableLayout",
          "type": "\"auto\" | \"fixed\" | undefined",
          "complexType": {
            "original": "\"fixed\" | \"auto\"",
            "resolved": "\"auto\" | \"fixed\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "table-layout",
          "reflectToAttr": false,
          "docs": "Sets the layout of the table",
          "docsTags": [],
          "default": "\"fixed\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "theme",
          "type": "\"dark\" | \"inherit\" | \"light\" | undefined",
          "complexType": {
            "original": "IcThemeMode",
            "resolved": "\"dark\" | \"inherit\" | \"light\" | undefined",
            "references": {
              "IcThemeMode": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcThemeMode"
              }
            }
          },
          "mutable": false,
          "attr": "theme",
          "reflectToAttr": false,
          "docs": "Sets the theme color to the dark or light theme color. \"inherit\" will set the color based on the system settings or ic-theme component.",
          "docsTags": [],
          "default": "\"inherit\"",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "inherit",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "truncationPattern",
          "type": "\"show-hide\" | \"tooltip\" | undefined",
          "complexType": {
            "original": "IcDataTableTruncationTypes",
            "resolved": "\"show-hide\" | \"tooltip\" | undefined",
            "references": {
              "IcDataTableTruncationTypes": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableTruncationTypes"
              }
            }
          },
          "mutable": false,
          "attr": "truncation-pattern",
          "reflectToAttr": false,
          "docs": "Sets the method used to truncate long text in cells where textWrap is `false`. The `tooltip` truncation pattern allows the overflowing text to be seen in a tooltip. The `show-hide` truncation pattern allows the overflowing text to be shown and hidden using the ic-typography \"See more\"/\"See less\" buttons.",
          "docsTags": [],
          "values": [
            {
              "value": "show-hide",
              "type": "string"
            },
            {
              "value": "tooltip",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "updating",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "updating",
          "reflectToAttr": false,
          "docs": "If `true`, the table displays a linear loading indicator below the header row to indicate an updating state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "updatingOptions",
          "type": "undefined | { description?: string | undefined; max?: number | undefined; min?: number | undefined; progress?: number | undefined; monochrome?: boolean | undefined; }",
          "complexType": {
            "original": "{\r\n    description?: string;\r\n    max?: number;\r\n    min?: number;\r\n    progress?: number;\r\n    monochrome?: boolean;\r\n  }",
            "resolved": "undefined | { description?: string | undefined; max?: number | undefined; min?: number | undefined; progress?: number | undefined; monochrome?: boolean | undefined; }",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sets the props for the linear loading indicator used in the updating state.",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ description?: string"
            },
            {
              "type": "undefined; max?: number"
            },
            {
              "type": "undefined; min?: number"
            },
            {
              "type": "undefined; progress?: number"
            },
            {
              "type": "undefined; monochrome?: boolean"
            },
            {
              "type": "undefined; }"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variableRowHeight",
          "type": "((params: { [key: string]: any; index: number; }) => IcDataTableRowHeights | null) | undefined",
          "complexType": {
            "original": "(params: {\r\n    [key: string]: any;\r\n    index: number;\r\n  }) => IcDataTableRowHeights | null",
            "resolved": "((params: { [key: string]: any; index: number; }) => IcDataTableRowHeights | null) | undefined",
            "references": {
              "IcDataTableRowHeights": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableRowHeights"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Allows for custom setting of row heights on individual rows based on an individual value from the `data` prop and the row index.\r\nIf the function returns `null`, that row's height will be set to the `globalRowHeight` property.",
          "docsTags": [],
          "values": [
            {
              "type": "((params: { [key: string]: any; index: number; }) => IcDataTableRowHeights"
            },
            {
              "type": "null)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "width",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Sets the table width. Can be set to `auto` or a specific value in `px`, `rem`, or `%`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "resetRowHeights",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(rowHeight?: number | \"auto\") => Promise<void>",
            "parameters": [
              {
                "name": "rowHeight",
                "type": "number | \"auto\" | undefined",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "resetRowHeights(rowHeight?: number | \"auto\") => Promise<void>",
          "parameters": [
            {
              "name": "rowHeight",
              "type": "number | \"auto\" | undefined",
              "docs": ""
            }
          ],
          "docs": "Resets the `globalRowHeight` prop to number or auto and sets the `variableRowHeight` prop to `null`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "icColumnsLoaded",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the columns have finished loading after being updated or initially rendered.",
          "docsTags": []
        },
        {
          "event": "icDataLoaded",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the data has finished loading after being updated or initially rendered.",
          "docsTags": []
        },
        {
          "event": "icRowHeightChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the `globalRowHeight` or `variableRowHeight` properties change in the data table.",
          "docsTags": []
        },
        {
          "event": "icSelectAllRows",
          "detail": "IcDataTableDataType[]",
          "bubbles": true,
          "complexType": {
            "original": "IcDataTableDataType[]",
            "resolved": "IcDataTableDataType[]",
            "references": {
              "IcDataTableDataType": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableDataType"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when all rows are selected or deselected in the data table via the \"select all\" checkbox.",
          "docsTags": []
        },
        {
          "event": "icSelectedRowChange",
          "detail": "{ row: IcDataTableDataType | null; selectedRows: IcDataTableDataType[]; }",
          "bubbles": true,
          "complexType": {
            "original": "{\r\n    row: IcDataTableDataType | null;\r\n    selectedRows: IcDataTableDataType[];\r\n  }",
            "resolved": "{ row: IcDataTableDataType | null; selectedRows: IcDataTableDataType[]; }",
            "references": {
              "IcDataTableDataType": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableDataType"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the selected row changes in the data table.",
          "docsTags": []
        },
        {
          "event": "icSortChange",
          "detail": "IcSortEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "IcSortEventDetail",
            "resolved": "IcSortEventDetail",
            "references": {
              "IcSortEventDetail": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcSortEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a column sort button is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "typographyTruncationExpandToggle",
          "capture": false,
          "passive": false
        },
        {
          "event": "icPageChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "icItemsPerPageChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "icTableDensityUpdate",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "empty-state",
          "docs": "Content is slotted below the table header when there is no data and the table is not loading."
        },
        {
          "name": "pagination-bar",
          "docs": "A custom ic-pagination-bar can be slotted below the data to provide enhanced control over how the data is interacted with when being fetched externally."
        },
        {
          "name": "title-bar",
          "docs": "A custom ic-data-table-title-bar can be slotted above the column headers to display additional information about the table."
        },
        {
          "name": "{COLUMN_KEY}-column-icon",
          "docs": "The icon slot for a column header."
        },
        {
          "name": "{COLUMN_KEY}-{ROW_INDEX}[-icon]",
          "docs": "Each cell should have its own slot, named using the column tag and the row index, allowing for custom elements to be displayed. Include `-icon` at the end for that cell's icon slot."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ic-loading-indicator",
        "ic-typography",
        "ic-link",
        "ic-tooltip",
        "ic-button",
        "ic-checkbox",
        "ic-empty-state",
        "ic-pagination-bar"
      ],
      "dependencyGraph": {
        "ic-data-table": [
          "ic-loading-indicator",
          "ic-typography",
          "ic-link",
          "ic-tooltip",
          "ic-button",
          "ic-checkbox",
          "ic-empty-state",
          "ic-pagination-bar"
        ],
        "ic-loading-indicator": [
          "ic-typography"
        ],
        "ic-tooltip": [
          "ic-typography"
        ],
        "ic-button": [
          "ic-typography",
          "ic-loading-indicator",
          "ic-tooltip"
        ],
        "ic-checkbox": [
          "ic-typography"
        ],
        "ic-empty-state": [
          "ic-typography"
        ],
        "ic-pagination-bar": [
          "ic-typography",
          "ic-select",
          "ic-pagination",
          "ic-tooltip",
          "ic-text-field",
          "ic-button"
        ],
        "ic-select": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-typography",
          "ic-button",
          "ic-menu",
          "ic-input-validation"
        ],
        "ic-input-label": [
          "ic-typography"
        ],
        "ic-menu": [
          "ic-loading-indicator",
          "ic-typography",
          "ic-button"
        ],
        "ic-input-validation": [
          "ic-typography"
        ],
        "ic-pagination": [
          "ic-button",
          "ic-pagination-item"
        ],
        "ic-pagination-item": [
          "ic-typography"
        ],
        "ic-text-field": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-input-validation",
          "ic-typography"
        ]
      }
    },
    {
      "filePath": "src/components/ic-data-table-title-bar/ic-data-table-title-bar.tsx",
      "encapsulation": "shadow",
      "tag": "ic-data-table-title-bar",
      "readme": "# ic-data-table-title-bar\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "primary-action - Render an interactive element that will perform a primary action. Renders to the right of the density select."
        },
        {
          "name": "slot",
          "text": "custom-actions - Render additional custom actions to the left of the density select."
        },
        {
          "name": "slot",
          "text": "heading - The heading to render on the data table title bar."
        },
        {
          "name": "slot",
          "text": "description - Render an alternative description in the description section."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "description",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "The description that is displayed below the `heading` and `metadata`. Can be overridden with the `description` slot.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "heading",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "The heading of the title bar. Can be overridden with the `heading` slot. If used with an `ic-data-table` it will default to the table's `caption` unless overridden.",
          "docsTags": [],
          "default": "DEFAULT_TITLE_BAR_HEADING",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideDensitySelect",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-density-select",
          "reflectToAttr": false,
          "docs": "When `true`, the density select will not be rendered.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "metadata",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "metadata",
          "reflectToAttr": false,
          "docs": "The metadata displayed next to the `heading`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "icTableDensityUpdate",
          "detail": "IcDensityUpdateEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "IcDensityUpdateEventDetail",
            "resolved": "IcDensityUpdateEventDetail",
            "references": {
              "IcDensityUpdateEventDetail": {
                "location": "import",
                "path": "../ic-data-table/ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDensityUpdateEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the table density select value is changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "custom-actions",
          "docs": "Render additional custom actions to the left of the density select."
        },
        {
          "name": "description",
          "docs": "Render an alternative description in the description section."
        },
        {
          "name": "heading",
          "docs": "The heading to render on the data table title bar."
        },
        {
          "name": "primary-action",
          "docs": "Render an interactive element that will perform a primary action. Renders to the right of the density select."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ic-typography",
        "ic-select"
      ],
      "dependencyGraph": {
        "ic-data-table-title-bar": [
          "ic-typography",
          "ic-select"
        ],
        "ic-select": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-typography",
          "ic-button",
          "ic-menu",
          "ic-input-validation"
        ],
        "ic-input-label": [
          "ic-typography"
        ],
        "ic-button": [
          "ic-typography",
          "ic-loading-indicator",
          "ic-tooltip"
        ],
        "ic-loading-indicator": [
          "ic-typography"
        ],
        "ic-tooltip": [
          "ic-typography"
        ],
        "ic-menu": [
          "ic-loading-indicator",
          "ic-typography",
          "ic-button"
        ],
        "ic-input-validation": [
          "ic-typography"
        ]
      }
    },
    {
      "filePath": "src/components/ic-date-input/ic-date-input.tsx",
      "encapsulation": "shadow",
      "tag": "ic-date-input",
      "readme": "# ic-date-input\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "helper-text - Content is set as the helper text for the date input."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "dateFormat",
          "type": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
          "complexType": {
            "original": "IcDateFormat",
            "resolved": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
            "references": {
              "IcDateFormat": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcDateFormat"
              }
            }
          },
          "mutable": false,
          "attr": "date-format",
          "reflectToAttr": false,
          "docs": "The format in which the date will be displayed.",
          "docsTags": [],
          "default": "this.DEFAULT_DATE_FORMAT",
          "values": [
            {
              "value": "DD/MM/YYYY",
              "type": "string"
            },
            {
              "value": "MM/DD/YYYY",
              "type": "string"
            },
            {
              "value": "YYYY/MM/DD",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disableDays",
          "type": "IcWeekDays[]",
          "complexType": {
            "original": "IcWeekDays[]",
            "resolved": "IcWeekDays[]",
            "references": {
              "IcWeekDays": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcWeekDays"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The days of the week to disable.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "IcWeekDays[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disableDaysMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-days-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when `disableDays` is set and a disabled date is entered.",
          "docsTags": [],
          "default": "\"The date you have selected is on a day of the week that is not allowed. Please select another date.\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disableFuture",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-future",
          "reflectToAttr": false,
          "docs": "If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disableFutureMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-future-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when `disableFuture` is true and a date in the future is entered.",
          "docsTags": [],
          "default": "\"Dates in the future are not allowed. Please select a date in the past.\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disablePast",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-past",
          "reflectToAttr": false,
          "docs": "If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disablePastMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-past-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when `disablePast` is true and a date in the past is entered.",
          "docsTags": [],
          "default": "\"Dates in the past are not allowed. Please select a date in the future.\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the disabled state will be set.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "emitDatePartChange",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "emit-date-part-change",
          "reflectToAttr": false,
          "docs": "If `true`, every individual input field completed will emit an icChange event.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "helperText",
          "type": "null | string",
          "complexType": {
            "original": "string | null",
            "resolved": "null | string",
            "references": {}
          },
          "mutable": true,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "The helper text that will be displayed for additional field guidance. This will default to the text \"Use format\" along with the `dateFormat` value.",
          "docsTags": [],
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideHelperText",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-helper-text",
          "reflectToAttr": false,
          "docs": "If `true`, the helper text will be visually hidden, but still read out by screenreaders.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideLabel",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-label",
          "reflectToAttr": false,
          "docs": "If `true`, the label will be visually hidden, but will still be read out by screen readers.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "The ID for the input.",
          "docsTags": [],
          "default": "`ic-date-input-${inputIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "invalidDateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid-date-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when an invalid date is entered.",
          "docsTags": [],
          "default": "\"Please enter a valid date.\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label for the date input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "max",
          "type": "Date | string",
          "complexType": {
            "original": "string | Date",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.\r\nThe value of this prop is ignored if `disableFuture` is set to `true`.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "min",
          "type": "Date | string",
          "complexType": {
            "original": "string | Date",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.\r\nThe value of this prop is ignored if `disablePast` is set to `true`.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the input will require a value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showClearButton",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "show-clear-button",
          "reflectToAttr": false,
          "docs": "If `true`, a button which clears the date input when clicked will be displayed.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "complexType": {
            "original": "IcSizes",
            "resolved": "\"large\" | \"medium\" | \"small\"",
            "references": {
              "IcSizes": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the date input to be displayed.",
          "docsTags": [],
          "default": "\"medium\"",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "theme",
          "type": "\"dark\" | \"inherit\" | \"light\" | undefined",
          "complexType": {
            "original": "IcThemeMode",
            "resolved": "\"dark\" | \"inherit\" | \"light\" | undefined",
            "references": {
              "IcThemeMode": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcThemeMode"
              }
            }
          },
          "mutable": false,
          "attr": "theme",
          "reflectToAttr": false,
          "docs": "Sets the date picker to the dark or light theme colors. \"inherit\" will set the color based on the system settings or ic-theme component.",
          "docsTags": [],
          "default": "\"inherit\"",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "inherit",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validationStatus",
          "type": "\"\" | \"error\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "IcInformationStatusOrEmpty",
            "resolved": "\"\" | \"error\" | \"success\" | \"warning\"",
            "references": {
              "IcInformationStatusOrEmpty": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcInformationStatusOrEmpty"
              }
            }
          },
          "mutable": true,
          "attr": "validation-status",
          "reflectToAttr": false,
          "docs": "The validation status - e.g. 'error' | 'warning' | 'success'. This will override the built-in date validation.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validationText",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-text",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message. This will override the built-in date validation.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "Date | null | string | undefined",
          "complexType": {
            "original": "string | Date | null | undefined",
            "resolved": "Date | null | string | undefined",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the date input. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "getDate",
          "returns": {
            "type": "Promise<Date | null>",
            "docs": "Date"
          },
          "complexType": {
            "signature": "() => Promise<Date | null>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            },
            "return": "Promise<Date | null>"
          },
          "signature": "getDate() => Promise<Date | null>",
          "parameters": [],
          "docs": "Returns the value as a Date object",
          "docsTags": [
            {
              "name": "returns",
              "text": "Date"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "icBlur",
          "detail": "{ value: Date | null; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: Date | null }",
            "resolved": "{ value: Date | null; }",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "icChange",
          "detail": "{ value: Date | null; dateObject: { day: string | null; month: string | null; year: string | null; }; utcValue: Date | null; }",
          "bubbles": true,
          "complexType": {
            "original": "{\r\n    value: Date | null;\r\n    dateObject: {\r\n      day: string | null;\r\n      month: string | null;\r\n      year: string | null;\r\n    };\r\n    utcValue: Date | null;\r\n  }",
            "resolved": "{ value: Date | null; dateObject: { day: string | null; month: string | null; year: string | null; }; utcValue: Date | null; }",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "icFocus",
          "detail": "{ value: Date | null; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: Date | null }",
            "resolved": "{ value: Date | null; }",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input gains focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "helper-text",
          "docs": "Content is set as the helper text for the date input."
        }
      ],
      "parts": [],
      "dependents": [
        "ic-date-picker"
      ],
      "dependencies": [
        "ic-input-container",
        "ic-input-label",
        "ic-input-component-container",
        "ic-button",
        "ic-input-validation"
      ],
      "dependencyGraph": {
        "ic-date-input": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-button",
          "ic-input-validation"
        ],
        "ic-input-label": [
          "ic-typography"
        ],
        "ic-button": [
          "ic-typography",
          "ic-loading-indicator",
          "ic-tooltip"
        ],
        "ic-loading-indicator": [
          "ic-typography"
        ],
        "ic-tooltip": [
          "ic-typography"
        ],
        "ic-input-validation": [
          "ic-typography"
        ],
        "ic-date-picker": [
          "ic-date-input"
        ]
      }
    },
    {
      "filePath": "src/components/ic-date-picker/ic-date-picker.tsx",
      "encapsulation": "shadow",
      "tag": "ic-date-picker",
      "readme": "# ic-date-picker\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "helper-text - Content is set as the helper text for the date picker."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "dateFormat",
          "type": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
          "complexType": {
            "original": "IcDateFormat",
            "resolved": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
            "references": {
              "IcDateFormat": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcDateFormat"
              }
            }
          },
          "mutable": false,
          "attr": "date-format",
          "reflectToAttr": false,
          "docs": "The format in which the date will be displayed.",
          "docsTags": [],
          "default": "\"DD/MM/YYYY\"",
          "values": [
            {
              "value": "DD/MM/YYYY",
              "type": "string"
            },
            {
              "value": "MM/DD/YYYY",
              "type": "string"
            },
            {
              "value": "YYYY/MM/DD",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disableDays",
          "type": "IcWeekDays[] | undefined",
          "complexType": {
            "original": "IcWeekDays[]",
            "resolved": "IcWeekDays[] | undefined",
            "references": {
              "IcWeekDays": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcWeekDays"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The days of the week to disable.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "IcWeekDays[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disableDaysMessage",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-days-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when `disableDays` is `true` and a disabled date is entered.",
          "docsTags": [],
          "default": "\"The date you have selected is on a day of the week that is not allowed. Please select another date.\"",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disableFuture",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-future",
          "reflectToAttr": false,
          "docs": "If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disableFutureMessage",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-future-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when `disableFuture` is `true` and a date in the future is entered.",
          "docsTags": [],
          "default": "\"Dates in the future are not allowed. Please select a date in the past.\"",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disablePast",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-past",
          "reflectToAttr": false,
          "docs": "If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disablePastMessage",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-past-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when `disablePast` is `true` and a date in the past is entered.",
          "docsTags": [],
          "default": "\"Dates in the past are not allowed. Please select a date in the future.\"",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the disabled state will be set.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "emitDatePartChange",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "emit-date-part-change",
          "reflectToAttr": false,
          "docs": "If `true`, every individual input field completed will emit an icChange event.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "helperText",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "The helper text that will be displayed for additional field guidance. This will default to the text \"Use format\" along with the `dateFormat` value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideHelperText",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-helper-text",
          "reflectToAttr": false,
          "docs": "If `true`, the helper text will be visually hidden, but still read out by screenreaders.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideLabel",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-label",
          "reflectToAttr": false,
          "docs": "If `true`, the label will be visually hidden, but the required label will still be read out by screen readers.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "inputId",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "The ID for the input field. The default will be an automatically generated value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "invalidDateMessage",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid-date-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when an invalid date is entered.",
          "docsTags": [],
          "default": "\"Please enter a valid date.\"",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label for the date input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "max",
          "type": "Date | string",
          "complexType": {
            "original": "string | Date",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.\r\nThe value of this prop is ignored if `disableFuture` is set to `true`.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "min",
          "type": "Date | string",
          "complexType": {
            "original": "string | Date",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.\r\nThe value of this prop is ignored if `disablePast` is set to `true`.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "openAtDate",
          "type": "Date | string",
          "complexType": {
            "original": "string | Date",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "attr": "open-at-date",
          "reflectToAttr": false,
          "docs": "The date visible when the calendar opens. Used if no date is currently selected.\r\nThe value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the input will require a value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showDaysOutsideMonth",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "show-days-outside-month",
          "reflectToAttr": false,
          "docs": "If `true`, days outside the current month will be visible in the date picker.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showPickerClearButton",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "show-picker-clear-button",
          "reflectToAttr": false,
          "docs": "If `true`, the `Clear` button on the date picker will be visible.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showPickerTodayButton",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "show-picker-today-button",
          "reflectToAttr": false,
          "docs": "If `true`, the `Go to today` button on the date picker will be visible.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\" | undefined",
          "complexType": {
            "original": "IcSizes",
            "resolved": "\"large\" | \"medium\" | \"small\" | undefined",
            "references": {
              "IcSizes": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the date picker to be displayed.",
          "docsTags": [],
          "default": "\"medium\"",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "startOfWeek",
          "type": "IcWeekDays.Friday | IcWeekDays.Monday | IcWeekDays.Saturday | IcWeekDays.Sunday | IcWeekDays.Thursday | IcWeekDays.Tuesday | IcWeekDays.Wednesday",
          "complexType": {
            "original": "IcWeekDays",
            "resolved": "IcWeekDays.Friday | IcWeekDays.Monday | IcWeekDays.Saturday | IcWeekDays.Sunday | IcWeekDays.Thursday | IcWeekDays.Tuesday | IcWeekDays.Wednesday",
            "references": {
              "IcWeekDays": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcWeekDays"
              }
            }
          },
          "mutable": false,
          "attr": "start-of-week",
          "reflectToAttr": false,
          "docs": "The first day of the week. `0` for Sunday, `1` for Monday, etc.\r\nDefault is Monday.",
          "docsTags": [],
          "default": "IcWeekDays.Monday",
          "values": [
            {
              "type": "IcWeekDays.Friday"
            },
            {
              "type": "IcWeekDays.Monday"
            },
            {
              "type": "IcWeekDays.Saturday"
            },
            {
              "type": "IcWeekDays.Sunday"
            },
            {
              "type": "IcWeekDays.Thursday"
            },
            {
              "type": "IcWeekDays.Tuesday"
            },
            {
              "type": "IcWeekDays.Wednesday"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "theme",
          "type": "\"dark\" | \"inherit\" | \"light\" | undefined",
          "complexType": {
            "original": "IcThemeMode",
            "resolved": "\"dark\" | \"inherit\" | \"light\" | undefined",
            "references": {
              "IcThemeMode": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcThemeMode"
              }
            }
          },
          "mutable": false,
          "attr": "theme",
          "reflectToAttr": false,
          "docs": "Sets the date picker to the dark or light theme colors. \"inherit\" will set the color based on the system settings or ic-theme component.",
          "docsTags": [],
          "default": "\"inherit\"",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "inherit",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validationStatus",
          "type": "\"\" | \"error\" | \"success\" | \"warning\" | undefined",
          "complexType": {
            "original": "IcInformationStatusOrEmpty",
            "resolved": "\"\" | \"error\" | \"success\" | \"warning\" | undefined",
            "references": {
              "IcInformationStatusOrEmpty": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcInformationStatusOrEmpty"
              }
            }
          },
          "mutable": false,
          "attr": "validation-status",
          "reflectToAttr": false,
          "docs": "The validation status - e.g. 'error' | 'warning' | 'success'. This will override the built-in date validation.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validationText",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-text",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message. This will override the built-in date validation.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "Date | null | string | undefined",
          "complexType": {
            "original": "string | Date | null | undefined",
            "resolved": "Date | null | string | undefined",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the date picker. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "icChange",
          "detail": "{ value: Date; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: Date }",
            "resolved": "{ value: Date; }",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calendarButtonClicked",
          "capture": false,
          "passive": false
        },
        {
          "event": "calendarButtonClicked",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--ic-z-index-date-picker",
          "annotation": "prop",
          "docs": "z-index of date picker."
        },
        {
          "name": "--input-width",
          "annotation": "prop",
          "docs": "Width of the input field"
        }
      ],
      "slots": [
        {
          "name": "helper-text",
          "docs": "Content is set as the helper text for the date picker."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ic-button",
        "ic-date-input",
        "ic-typography"
      ],
      "dependencyGraph": {
        "ic-date-picker": [
          "ic-button",
          "ic-date-input",
          "ic-typography"
        ],
        "ic-button": [
          "ic-typography",
          "ic-loading-indicator",
          "ic-tooltip"
        ],
        "ic-loading-indicator": [
          "ic-typography"
        ],
        "ic-tooltip": [
          "ic-typography"
        ],
        "ic-date-input": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-button",
          "ic-input-validation"
        ],
        "ic-input-label": [
          "ic-typography"
        ],
        "ic-input-validation": [
          "ic-typography"
        ]
      }
    },
    {
      "filePath": "src/components/ic-pagination-bar/ic-pagination-bar.tsx",
      "encapsulation": "shadow",
      "tag": "ic-pagination-bar",
      "readme": "# ic-pagination-bar\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "alignment",
          "type": "\"left\" | \"right\" | \"space-between\" | undefined",
          "complexType": {
            "original": "IcPaginationAlignmentOptions",
            "resolved": "\"left\" | \"right\" | \"space-between\" | undefined",
            "references": {
              "IcPaginationAlignmentOptions": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/components/ic-pagination/ic-pagination.types",
                "id": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationAlignmentOptions"
              }
            }
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": false,
          "docs": "Sets the alignment of the items in the pagination bar.",
          "docsTags": [],
          "default": "\"right\"",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "space-between",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "currentPage",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "current-page",
          "reflectToAttr": false,
          "docs": "The current page number to be displayed on the pagination bar.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideAllFromItemsPerPage",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-all-from-items-per-page",
          "reflectToAttr": false,
          "docs": "If `true`, the 'All' option will be hidden from the 'items per page' select input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideRangeLabel",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-range-label",
          "reflectToAttr": false,
          "docs": "If `true`, the number of total items and current item range or number of total pages and current page will be hidden.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "itemLabel",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "item-label",
          "reflectToAttr": false,
          "docs": "The text which will be used in place of 'Item' on the pagination bar.",
          "docsTags": [],
          "default": "\"Item\"",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "itemsPerPageOptions",
          "type": "undefined | { label: string; value: string; }[]",
          "complexType": {
            "original": "{\r\n    label: string;\r\n    value: string;\r\n  }[]",
            "resolved": "undefined | { label: string; value: string; }[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The options which will be displayed for 'items per page' select input.",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ label: string; value: string; }[]"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "monochrome",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "monochrome",
          "reflectToAttr": false,
          "docs": "If `true`, the pagination bar will display as black in the light theme, and white in dark theme.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "pageLabel",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "page-label",
          "reflectToAttr": false,
          "docs": "The text which will be used in place of 'Page' on the pagination bar.",
          "docsTags": [],
          "default": "\"Page\"",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rangeLabelType",
          "type": "\"data\" | \"page\" | undefined",
          "complexType": {
            "original": "IcPaginationLabelTypes",
            "resolved": "\"data\" | \"page\" | undefined",
            "references": {
              "IcPaginationLabelTypes": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/components/ic-pagination/ic-pagination.types",
                "id": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationLabelTypes"
              }
            }
          },
          "mutable": false,
          "attr": "range-label-type",
          "reflectToAttr": false,
          "docs": "Whether total number of items and current item range or total number of pages and current page is displayed.",
          "docsTags": [],
          "default": "\"page\"",
          "values": [
            {
              "value": "data",
              "type": "string"
            },
            {
              "value": "page",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "selectItemsPerPageOnEnter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "select-items-per-page-on-enter",
          "reflectToAttr": false,
          "docs": "If `false`, the value in the items per page control will be set immediately on ArrowUp and ArrowDown instead of when Enter is pressed.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "selectedItemsPerPage",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "selected-items-per-page",
          "reflectToAttr": false,
          "docs": "The items per page option to be selected.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "setToFirstPageOnPaginationChange",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "set-to-first-page-on-pagination-change",
          "reflectToAttr": false,
          "docs": "If `true`, the pagination bar is set to the first page when the 'items per page' changes",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showGoToPageControl",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "show-go-to-page-control",
          "reflectToAttr": false,
          "docs": "If `true`, the 'go to page' control should be displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showItemsPerPageControl",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "show-items-per-page-control",
          "reflectToAttr": false,
          "docs": "If `true`, the select input to control 'items per page' should be displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "theme",
          "type": "\"dark\" | \"inherit\" | \"light\" | undefined",
          "complexType": {
            "original": "IcThemeMode",
            "resolved": "\"dark\" | \"inherit\" | \"light\" | undefined",
            "references": {
              "IcThemeMode": {
                "location": "import",
                "path": "@ukic/web-components",
                "id": "../web-components/dist/types/interface.d.ts::IcThemeMode"
              }
            }
          },
          "mutable": false,
          "attr": "theme",
          "reflectToAttr": false,
          "docs": "Sets the theme color to the dark or light theme color. \"inherit\" will set the color based on the system settings or ic-theme component.",
          "docsTags": [],
          "default": "\"inherit\"",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "inherit",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "totalItems",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "total-items",
          "reflectToAttr": false,
          "docs": "Total number of items to be displayed across all pages.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"complex\" | \"simple\" | undefined",
          "complexType": {
            "original": "IcPaginationTypes",
            "resolved": "\"complex\" | \"simple\" | undefined",
            "references": {
              "IcPaginationTypes": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/components/ic-pagination/ic-pagination.types",
                "id": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationTypes"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Whether the displayed pagination is simple or complex.",
          "docsTags": [],
          "default": "\"simple\"",
          "values": [
            {
              "value": "complex",
              "type": "string"
            },
            {
              "value": "simple",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "icItemsPerPageChange",
          "detail": "{ value: number; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: number }",
            "resolved": "{ value: number; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the items per page option is changed.",
          "docsTags": []
        },
        {
          "event": "icPageChange",
          "detail": "IcPageChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "IcPageChangeEventDetail",
            "resolved": "IcPageChangeEventDetail",
            "references": {
              "IcPageChangeEventDetail": {
                "location": "import",
                "path": "./ic-pagination-bar.types",
                "id": "src/components/ic-pagination-bar/ic-pagination-bar.types.ts::IcPageChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a page is navigated to via the 'go to' input.\r\nThe `detail` property contains `value` (i.e. the page number) and a `fromItemsPerPage` flag to indicate if the event was triggered by the `icItemsPerPageChange` event also occurring.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "icPageChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "ic-data-table"
      ],
      "dependencies": [
        "ic-typography",
        "ic-select",
        "ic-pagination",
        "ic-tooltip",
        "ic-text-field",
        "ic-button"
      ],
      "dependencyGraph": {
        "ic-pagination-bar": [
          "ic-typography",
          "ic-select",
          "ic-pagination",
          "ic-tooltip",
          "ic-text-field",
          "ic-button"
        ],
        "ic-select": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-typography",
          "ic-button",
          "ic-menu",
          "ic-input-validation"
        ],
        "ic-input-label": [
          "ic-typography"
        ],
        "ic-button": [
          "ic-typography",
          "ic-loading-indicator",
          "ic-tooltip"
        ],
        "ic-loading-indicator": [
          "ic-typography"
        ],
        "ic-tooltip": [
          "ic-typography"
        ],
        "ic-menu": [
          "ic-loading-indicator",
          "ic-typography",
          "ic-button"
        ],
        "ic-input-validation": [
          "ic-typography"
        ],
        "ic-pagination": [
          "ic-button",
          "ic-pagination-item"
        ],
        "ic-pagination-item": [
          "ic-typography"
        ],
        "ic-text-field": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-input-validation",
          "ic-typography"
        ],
        "ic-data-table": [
          "ic-pagination-bar"
        ]
      }
    },
    {
      "filePath": "src/components/ic-tree-item/ic-tree-item.tsx",
      "encapsulation": "shadow",
      "tag": "ic-tree-item",
      "readme": "# ic-tree-item\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "label - Content is set as the tree item label."
        },
        {
          "name": "slot",
          "text": "icon - Content is placed to the left of the label."
        },
        {
          "name": "slot",
          "text": "router-item - Handle routing by nesting your routes in this slot."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the tree item appears in the disabled state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true`, the tree item appears in the expanded state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "The URL that the tree item link points to. If set, the tree item will render as an \"a\" tag, otherwise it will render as a div.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hreflang",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "hreflang",
          "reflectToAttr": false,
          "docs": "The human language of the linked URL.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label of the tree item.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "referrerpolicy",
          "type": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\" | undefined",
          "complexType": {
            "original": "ReferrerPolicy",
            "resolved": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\" | undefined",
            "references": {
              "ReferrerPolicy": {
                "location": "global",
                "id": "global::ReferrerPolicy"
              }
            }
          },
          "mutable": false,
          "attr": "referrerpolicy",
          "reflectToAttr": false,
          "docs": "How much of the referrer to send when following the link.",
          "docsTags": [],
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "no-referrer",
              "type": "string"
            },
            {
              "value": "no-referrer-when-downgrade",
              "type": "string"
            },
            {
              "value": "origin",
              "type": "string"
            },
            {
              "value": "origin-when-cross-origin",
              "type": "string"
            },
            {
              "value": "same-origin",
              "type": "string"
            },
            {
              "value": "strict-origin",
              "type": "string"
            },
            {
              "value": "strict-origin-when-cross-origin",
              "type": "string"
            },
            {
              "value": "unsafe-url",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rel",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "The relationship of the linked URL as space-separated link types.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "If `true`, the tree item appears in the selected state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "target",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "The place to display the linked URL, as the name for a browsing context (a tab, window, or iframe).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "theme",
          "type": "\"dark\" | \"inherit\" | \"light\" | undefined",
          "complexType": {
            "original": "IcThemeMode",
            "resolved": "\"dark\" | \"inherit\" | \"light\" | undefined",
            "references": {
              "IcThemeMode": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcThemeMode"
              }
            }
          },
          "mutable": false,
          "attr": "theme",
          "reflectToAttr": false,
          "docs": "Sets the theme color to the dark or light theme color. \"inherit\" will set the color based on the system settings or ic-theme component.",
          "docsTags": [],
          "default": "\"inherit\"",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "inherit",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "treeItemId",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "tree-item-id",
          "reflectToAttr": false,
          "docs": "Sets the tree item id. Must be unique.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "truncateTreeItem",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "truncate-tree-item",
          "reflectToAttr": false,
          "docs": "If `true`, the tree item label will be truncated instead of text wrapping.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "icTreeItemExpanded",
          "detail": "{ isExpanded: boolean; id: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{\r\n    isExpanded: boolean;\r\n    id: string;\r\n  }",
            "resolved": "{ isExpanded: boolean; id: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when tree item is expanded.",
          "docsTags": []
        },
        {
          "event": "icTreeItemSelected",
          "detail": "{ id: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{ id: string }",
            "resolved": "{ id: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when tree item is selected.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "icon",
          "docs": "Content is placed to the left of the label."
        },
        {
          "name": "label",
          "docs": "Content is set as the tree item label."
        },
        {
          "name": "router-item",
          "docs": "Handle routing by nesting your routes in this slot."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ic-typography",
        "ic-tooltip"
      ],
      "dependencyGraph": {
        "ic-tree-item": [
          "ic-typography",
          "ic-tooltip"
        ],
        "ic-tooltip": [
          "ic-typography"
        ]
      }
    },
    {
      "filePath": "src/components/ic-tree-view/ic-tree-view.tsx",
      "encapsulation": "shadow",
      "tag": "ic-tree-view",
      "readme": "# ic-tree-view\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "heading - Content is set as the tree view heading."
        },
        {
          "name": "slot",
          "text": "icon - Content is placed to the left of the heading."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "The heading of the tree view.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\" | undefined",
          "complexType": {
            "original": "IcSizes",
            "resolved": "\"large\" | \"medium\" | \"small\" | undefined",
            "references": {
              "IcSizes": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the tree view.",
          "docsTags": [],
          "default": "\"medium\"",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "theme",
          "type": "\"dark\" | \"inherit\" | \"light\" | undefined",
          "complexType": {
            "original": "IcThemeMode",
            "resolved": "\"dark\" | \"inherit\" | \"light\" | undefined",
            "references": {
              "IcThemeMode": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcThemeMode"
              }
            }
          },
          "mutable": false,
          "attr": "theme",
          "reflectToAttr": false,
          "docs": "Sets the theme color to the dark or light theme color. \"inherit\" will set the color based on the system settings or ic-theme component.",
          "docsTags": [],
          "default": "\"inherit\"",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "inherit",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "treeItemData",
          "type": "IcTreeItemOptions[]",
          "complexType": {
            "original": "IcTreeItemOptions[]",
            "resolved": "IcTreeItemOptions[]",
            "references": {
              "IcTreeItemOptions": {
                "location": "import",
                "path": "./ic-tree-view.types",
                "id": "src/components/ic-tree-view/ic-tree-view.types.tsx::IcTreeItemOptions"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The content within the tree view tree items. This will take precedence over slotted content.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "IcTreeItemOptions[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "truncateHeading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "truncate-heading",
          "reflectToAttr": false,
          "docs": "If `true`, the tree view heading will be truncated instead of text wrapping.\r\nWhen used on small devices, this prop will be overridden and headings will be set to text-wrap.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "truncateTreeItems",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "truncate-tree-items",
          "reflectToAttr": false,
          "docs": "If `true`, tree items will be truncated, unless they are individually overridden.\r\nWhen used on small devices, this prop will be overridden and tree-items will be set to text-wrap.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "icTreeItemSelected",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--tree-view-width",
          "annotation": "prop",
          "docs": "Width of the tree view"
        }
      ],
      "slots": [
        {
          "name": "heading",
          "docs": "Content is set as the tree view heading."
        },
        {
          "name": "icon",
          "docs": "Content is placed to the left of the heading."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ic-tooltip",
        "ic-typography"
      ],
      "dependencyGraph": {
        "ic-tree-view": [
          "ic-tooltip",
          "ic-typography"
        ],
        "ic-tooltip": [
          "ic-typography"
        ]
      }
    }
  ],
  "typeLibrary": {
    "src/components/ic-card-horizontal/ic-card-horizontal.types.ts::IcCardSizes": {
      "declaration": "export type IcCardSizes = \"small\" | \"medium\" | \"large\" | \"extra-large\";",
      "docstring": "",
      "path": "src/components/ic-card-horizontal/ic-card-horizontal.types.ts"
    },
    "../web-components/dist/types/interface.d.ts::IcThemeMode": {
      "declaration": "any",
      "docstring": "",
      "path": "../web-components/dist/types/interface.d.ts"
    },
    "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableColumnObject": {
      "declaration": "{\r\n  key: string;\r\n  title: string;\r\n  dataType: IcDataTableColumnDataTypes;\r\n  columnAlignment?: {\r\n    horizontal?: string;\r\n    vertical?: string;\r\n  };\r\n  rowOptions?: {\r\n    textWrap: boolean;\r\n  };\r\n  columnWidth?: string | IcDataTableColumnWidthTypes;\r\n  textWrap?: boolean;\r\n  cellAlignment?: string;\r\n  emphasis?: string;\r\n  colspan?: number;\r\n  icon?: {\r\n    icon: string;\r\n    onAllCells?: boolean;\r\n    hideOnHeader?: boolean;\r\n  };\r\n  excludeColumnFromSort?: boolean;\r\n  disableAutoSort?: boolean;\r\n}",
      "docstring": "",
      "path": "src/components/ic-data-table/ic-data-table.types.tsx"
    },
    "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableDataType": {
      "declaration": "{ [key: string]: any }",
      "docstring": "",
      "path": "src/components/ic-data-table/ic-data-table.types.tsx"
    },
    "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableDensityOptions": {
      "declaration": "export type IcDataTableDensityOptions = \"default\" | \"dense\" | \"spacious\";",
      "docstring": "",
      "path": "src/components/ic-data-table/ic-data-table.types.tsx"
    },
    "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableRowHeights": {
      "declaration": "export type IcDataTableRowHeights = number | \"auto\";",
      "docstring": "",
      "path": "src/components/ic-data-table/ic-data-table.types.tsx"
    },
    "src/utils/types.ts::IcPaginationBarOptions": {
      "declaration": "export interface IcPaginationBarOptions {\r\n  alignment?: IcPaginationAlignmentOptions;\r\n  hideAllFromItemsPerPage?: boolean;\r\n  hideRangeLabel?: boolean;\r\n  itemLabel?: string;\r\n  itemsPerPageOptions?: { label: string; value: string }[];\r\n  monochrome?: boolean;\r\n  pageLabel?: string;\r\n  rangeLabelType?: IcPaginationLabelTypes;\r\n  selectedItemsPerPage?: number;\r\n  selectItemsPerPageOnEnter?: boolean;\r\n  setToFirstPageOnPaginationChange?: boolean;\r\n  showGoToPageControl?: boolean;\r\n  showItemsPerPageControl?: boolean;\r\n  theme?: IcThemeMode;\r\n  type?: IcPaginationTypes;\r\n}",
      "docstring": "",
      "path": "src/utils/types.ts"
    },
    "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableSortOrderOptions": {
      "declaration": "export type IcDataTableSortOrderOptions =\r\n  | \"unsorted\"\r\n  | \"ascending\"\r\n  | \"descending\";",
      "docstring": "",
      "path": "src/components/ic-data-table/ic-data-table.types.tsx"
    },
    "src/utils/types.ts::IcThemeMode": {
      "declaration": "export type IcThemeMode = \"dark\" | \"light\" | \"inherit\";",
      "docstring": "",
      "path": "src/utils/types.ts"
    },
    "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableTruncationTypes": {
      "declaration": "export type IcDataTableTruncationTypes = \"tooltip\" | \"show-hide\" | undefined;",
      "docstring": "",
      "path": "src/components/ic-data-table/ic-data-table.types.tsx"
    },
    "src/components/ic-data-table/ic-data-table.types.tsx::IcSortEventDetail": {
      "declaration": "export interface IcSortEventDetail {\r\n  columnName: string;\r\n  sorted: IcDataTableSortOrderOptions;\r\n}",
      "docstring": "",
      "path": "src/components/ic-data-table/ic-data-table.types.tsx"
    },
    "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationAlignmentOptions": {
      "declaration": "export type IcPaginationAlignmentOptions = \"left\" | \"right\" | \"space-between\";",
      "docstring": "",
      "path": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts"
    },
    "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationTypes": {
      "declaration": "export type IcPaginationTypes = \"simple\" | \"complex\";",
      "docstring": "",
      "path": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts"
    },
    "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationLabelTypes": {
      "declaration": "export type IcPaginationLabelTypes = \"page\" | \"data\";",
      "docstring": "",
      "path": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts"
    },
    "src/components/ic-pagination-bar/ic-pagination-bar.types.ts::IcPageChangeEventDetail": {
      "declaration": "export interface IcPageChangeEventDetail {\n  value: number;\n  fromItemsPerPage?: boolean;\n}",
      "docstring": "",
      "path": "src/components/ic-pagination-bar/ic-pagination-bar.types.ts"
    },
    "src/components/ic-data-table/ic-data-table.types.tsx::IcDensityUpdateEventDetail": {
      "declaration": "export interface IcDensityUpdateEventDetail {\r\n  value: IcDataTableDensityOptions;\r\n}",
      "docstring": "",
      "path": "src/components/ic-data-table/ic-data-table.types.tsx"
    },
    "src/utils/types.ts::IcDateFormat": {
      "declaration": "export type IcDateFormat = \"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\";",
      "docstring": "",
      "path": "src/utils/types.ts"
    },
    "src/utils/types.ts::IcWeekDays": {
      "declaration": "export enum IcWeekDays {\r\n  Sunday = 0,\r\n  Monday = 1,\r\n  Tuesday = 2,\r\n  Wednesday = 3,\r\n  Thursday = 4,\r\n  Friday = 5,\r\n  Saturday = 6,\r\n}",
      "docstring": "",
      "path": "src/utils/types.ts"
    },
    "src/utils/types.ts::IcSizes": {
      "declaration": "export type IcSizes = \"medium\" | \"large\" | \"small\";",
      "docstring": "",
      "path": "src/utils/types.ts"
    },
    "src/utils/types.ts::IcInformationStatusOrEmpty": {
      "declaration": "export type IcInformationStatusOrEmpty = \"warning\" | \"error\" | \"success\" | \"\";",
      "docstring": "",
      "path": "src/utils/types.ts"
    },
    "src/components/ic-tree-view/ic-tree-view.types.tsx::IcTreeItemOptions": {
      "declaration": "{\r\n  label: string;\r\n  icon?: string;\r\n  children?: IcTreeItemOptions[];\r\n  disabled?: boolean;\r\n  expanded?: boolean;\r\n  href?: string;\r\n  selected?: boolean;\r\n  treeItemId?: string;\r\n  theme?: IcThemeMode;\r\n  truncateTreeItem?: boolean;\r\n}",
      "docstring": "",
      "path": "src/components/ic-tree-view/ic-tree-view.types.tsx"
    }
  }
}