{
  "timestamp": "2024-05-03T15:17:29",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.9.0",
    "typescriptVersion": "5.2.2"
  },
  "components": [
    {
      "filePath": "src/components/ic-data-table/ic-data-table.tsx",
      "encapsulation": "shadow",
      "tag": "ic-data-table",
      "readme": "# ic-data-table\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "empty-state - Content is slotted below the table header when there is no data and the table is not loading."
        },
        {
          "name": "slot",
          "text": "{COLUMN_KEY}-{ROW_INDEX}[-icon] - Each cell should have its own slot, named using the column tag and the row index, allowing for custom elements to be displayed. Include `-icon` at the end for that cell's icon slot."
        },
        {
          "name": "slot",
          "text": "{COLUMN_KEY}-column-icon - The icon slot for a column header."
        },
        {
          "name": "slot",
          "text": "title-bar - A custom ic-data-table-title-bar can be slotted above the column headers to display additional information about the table."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "caption",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "caption",
          "reflectToAttr": false,
          "docs": "The title for the table only visible to screen readers.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "columns",
          "type": "IcDataTableColumnObject[]",
          "complexType": {
            "original": "IcDataTableColumnObject[]",
            "resolved": "IcDataTableColumnObject[]",
            "references": {
              "IcDataTableColumnObject": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableColumnObject"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The column headers for the table.",
          "docsTags": [],
          "values": [
            {
              "type": "IcDataTableColumnObject[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "data",
          "type": "{ [key: string]: any; }[]",
          "complexType": {
            "original": "{ [key: string]: any }[]",
            "resolved": "{ [key: string]: any; }[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The row content for the table.",
          "docsTags": [],
          "values": [
            {
              "type": "{ [key: string]: any; }[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "density",
          "type": "\"default\" | \"dense\" | \"spacious\"",
          "complexType": {
            "original": "IcDataTableDensityOptions",
            "resolved": "\"default\" | \"dense\" | \"spacious\"",
            "references": {
              "IcDataTableDensityOptions": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableDensityOptions"
              }
            }
          },
          "mutable": true,
          "attr": "density",
          "reflectToAttr": false,
          "docs": "Set the density of the table including font and padding.",
          "docsTags": [],
          "default": "\"default\"",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "dense",
              "type": "string"
            },
            {
              "value": "spacious",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "embedded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "embedded",
          "reflectToAttr": false,
          "docs": "Applies a border to the table container.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "globalRowHeight",
          "type": "\"auto\" | number",
          "complexType": {
            "original": "IcDataTableRowHeights",
            "resolved": "\"auto\" | number",
            "references": {
              "IcDataTableRowHeights": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableRowHeights"
              }
            }
          },
          "mutable": true,
          "attr": "global-row-height",
          "reflectToAttr": false,
          "docs": "Sets the row height on all rows in the table that aren't set using the `variableRowHeight` method.",
          "docsTags": [],
          "default": "40",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hideColumnHeaders",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-column-headers",
          "reflectToAttr": false,
          "docs": "If `true`, column headers will not be visible.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "When set to `true`, the full table will show a loading state, featuring a radial indicator.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loadingOptions",
          "type": "{ appearance?: IcThemeForegroundNoDefault; description?: string; label?: string; labelDuration?: number; max?: number; min?: number; progress?: number; showBackground?: boolean; }",
          "complexType": {
            "original": "{\n    appearance?: IcThemeForegroundNoDefault;\n    description?: string;\n    label?: string;\n    labelDuration?: number;\n    max?: number;\n    min?: number;\n    progress?: number;\n    showBackground?: boolean;\n  }",
            "resolved": "{ appearance?: IcThemeForegroundNoDefault; description?: string; label?: string; labelDuration?: number; max?: number; min?: number; progress?: number; showBackground?: boolean; }",
            "references": {
              "IcThemeForegroundNoDefault": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/utils/types",
                "id": "../web-components/dist/types/utils/types.d.ts::IcThemeForegroundNoDefault"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sets the props for the circular loading indicator used in the loading state.",
          "docsTags": [],
          "values": [
            {
              "type": "{ appearance?: IcThemeForegroundNoDefault; description?: string; label?: string; labelDuration?: number; max?: number; min?: number; progress?: number; showBackground?: boolean; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minimumLoadingDisplayDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minimum-loading-display-duration",
          "reflectToAttr": false,
          "docs": "The minimum amount of time the `loading` state displays for before showing the data. Used to prevent flashing in the component.",
          "docsTags": [],
          "default": "1000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "paginationOptions",
          "type": "{ itemsPerPage?: { label: string; value: string; }[]; rangeLabelType?: IcPaginationLabelTypes; type?: IcPaginationTypes; itemsPerPageControl?: boolean; goToPageControl?: boolean; alignment?: IcPaginationAlignmentOptions; }",
          "complexType": {
            "original": "{\n    itemsPerPage?: { label: string; value: string }[];\n    rangeLabelType?: IcPaginationLabelTypes;\n    type?: IcPaginationTypes;\n    itemsPerPageControl?: boolean;\n    goToPageControl?: boolean;\n    alignment?: IcPaginationAlignmentOptions;\n  }",
            "resolved": "{ itemsPerPage?: { label: string; value: string; }[]; rangeLabelType?: IcPaginationLabelTypes; type?: IcPaginationTypes; itemsPerPageControl?: boolean; goToPageControl?: boolean; alignment?: IcPaginationAlignmentOptions; }",
            "references": {
              "IcPaginationLabelTypes": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/components/ic-pagination/ic-pagination.types",
                "id": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationLabelTypes"
              },
              "IcPaginationTypes": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/components/ic-pagination/ic-pagination.types",
                "id": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationTypes"
              },
              "IcPaginationAlignmentOptions": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/components/ic-pagination/ic-pagination.types",
                "id": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationAlignmentOptions"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sets the props for the pagination bar.",
          "docsTags": [],
          "default": "{\n    itemsPerPage: [\n      { label: \"10\", value: \"10\" },\n      { label: \"25\", value: \"25\" },\n      { label: \"50\", value: \"50\" },\n    ],\n    rangeLabelType: \"page\",\n    type: \"simple\",\n    itemsPerPageControl: true,\n    goToPageControl: true,\n    alignment: \"right\",\n  }",
          "values": [
            {
              "type": "{ itemsPerPage?: { label: string; value: string; }[]; rangeLabelType?: IcPaginationLabelTypes; type?: IcPaginationTypes; itemsPerPageControl?: boolean; goToPageControl?: boolean; alignment?: IcPaginationAlignmentOptions; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showPagination",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-pagination",
          "reflectToAttr": false,
          "docs": "If `true`, adds a pagination bar to the bottom of the table.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sortOptions",
          "type": "{ sortOrders: IcDataTableSortOrderOptions[]; defaultColumn?: string; }",
          "complexType": {
            "original": "{\n    sortOrders: IcDataTableSortOrderOptions[];\n    defaultColumn?: string;\n  }",
            "resolved": "{ sortOrders: IcDataTableSortOrderOptions[]; defaultColumn?: string; }",
            "references": {
              "IcDataTableSortOrderOptions": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableSortOrderOptions"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sets the order columns will be sorted in and allows for 'default' sorts to be added.",
          "docsTags": [],
          "default": "{\n    sortOrders: [\"unsorted\", \"ascending\", \"descending\"],\n    defaultColumn: \"\",\n  }",
          "values": [
            {
              "type": "{ sortOrders: IcDataTableSortOrderOptions[]; defaultColumn?: string; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sortable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sortable",
          "reflectToAttr": false,
          "docs": "If `true`, allows table columns to be sorted using applied sort buttons.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "stickyColumnHeaders",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sticky-column-headers",
          "reflectToAttr": false,
          "docs": "If `true`, column headers will remain at the top of the table when scrolling vertically.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "stickyRowHeaders",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sticky-row-headers",
          "reflectToAttr": false,
          "docs": "If `true`, row headers will remain to the left when scrolling horizontally.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "updating",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "updating",
          "reflectToAttr": false,
          "docs": "If `true`, the table displays a linear loading indicator below the header row to indicate an updating state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "updatingOptions",
          "type": "{ appearance?: IcThemeForegroundNoDefault; description?: string; max?: number; min?: number; progress?: number; }",
          "complexType": {
            "original": "{\n    appearance?: IcThemeForegroundNoDefault;\n    description?: string;\n    max?: number;\n    min?: number;\n    progress?: number;\n  }",
            "resolved": "{ appearance?: IcThemeForegroundNoDefault; description?: string; max?: number; min?: number; progress?: number; }",
            "references": {
              "IcThemeForegroundNoDefault": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/utils/types",
                "id": "../web-components/dist/types/utils/types.d.ts::IcThemeForegroundNoDefault"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sets the props for the linear loading indicator used in the updating state.",
          "docsTags": [],
          "values": [
            {
              "type": "{ appearance?: IcThemeForegroundNoDefault; description?: string; max?: number; min?: number; progress?: number; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variableRowHeight",
          "type": "(params: { [key: string]: any; index: number; }) => IcDataTableRowHeights",
          "complexType": {
            "original": "(params: {\n    [key: string]: any;\n    index: number;\n  }) => IcDataTableRowHeights | null",
            "resolved": "(params: { [key: string]: any; index: number; }) => IcDataTableRowHeights",
            "references": {
              "IcDataTableRowHeights": {
                "location": "import",
                "path": "./ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableRowHeights"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Allows for custom setting of row heights on individual rows based on an individual value from the `data` prop and the row index.\nIf the function returns `null`, that row's height will be set to the `globalRowHeight` property.",
          "docsTags": [],
          "values": [
            {
              "type": "(params: { [key: string]: any; index: number; }) => IcDataTableRowHeights"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "resetRowHeights",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "resetRowHeights() => Promise<void>",
          "parameters": [],
          "docs": "Resets the `globalRowHeight` prop to `40px` and sets the `variableRowHeight` prop to `null`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "icRowHeightChange",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the `globalRowHeight` or `variableRowHeight` properties change in the data table.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "icItemsPerPageChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "icPageChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "icTableDensityUpdate",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "height of the table row container"
        }
      ],
      "slots": [
        {
          "name": "empty-state",
          "docs": "Content is slotted below the table header when there is no data and the table is not loading."
        },
        {
          "name": "title-bar",
          "docs": "A custom ic-data-table-title-bar can be slotted above the column headers to display additional information about the table."
        },
        {
          "name": "{COLUMN_KEY}-column-icon",
          "docs": "The icon slot for a column header."
        },
        {
          "name": "{COLUMN_KEY}-{ROW_INDEX}[-icon]",
          "docs": "Each cell should have its own slot, named using the column tag and the row index, allowing for custom elements to be displayed. Include `-icon` at the end for that cell's icon slot."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ic-loading-indicator",
        "ic-typography",
        "ic-link",
        "ic-button",
        "ic-empty-state",
        "ic-pagination-bar"
      ],
      "dependencyGraph": {
        "ic-data-table": [
          "ic-loading-indicator",
          "ic-typography",
          "ic-link",
          "ic-button",
          "ic-empty-state",
          "ic-pagination-bar"
        ],
        "ic-loading-indicator": [
          "ic-typography"
        ],
        "ic-button": [
          "ic-loading-indicator",
          "ic-tooltip"
        ],
        "ic-tooltip": [
          "ic-typography"
        ],
        "ic-empty-state": [
          "ic-typography"
        ],
        "ic-pagination-bar": [
          "ic-typography",
          "ic-select",
          "ic-pagination",
          "ic-tooltip",
          "ic-text-field",
          "ic-button"
        ],
        "ic-select": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-typography",
          "ic-button",
          "ic-menu",
          "ic-input-validation"
        ],
        "ic-input-label": [
          "ic-typography"
        ],
        "ic-menu": [
          "ic-loading-indicator",
          "ic-typography",
          "ic-button"
        ],
        "ic-input-validation": [
          "ic-typography"
        ],
        "ic-pagination": [
          "ic-button",
          "ic-pagination-item"
        ],
        "ic-pagination-item": [
          "ic-typography"
        ],
        "ic-text-field": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-input-validation",
          "ic-typography"
        ]
      }
    },
    {
      "filePath": "src/components/ic-data-table-title-bar/ic-data-table-title-bar.tsx",
      "encapsulation": "shadow",
      "tag": "ic-data-table-title-bar",
      "readme": "# ic-data-table-title-bar\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "primary-action - Render an interactive element that will perform a primary action. Renders to the right of the density select."
        },
        {
          "name": "slot",
          "text": "custom-actions - Render additional custom actions to the left of the density select."
        },
        {
          "name": "slot",
          "text": "heading - The heading to render on the data table title bar."
        },
        {
          "name": "slot",
          "text": "description - Render an alternative description in the description section."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "The description that is displayed below the `heading` and `metadata`. Can be overridden with the `description` slot.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "The heading of the title bar. Can be overridden with the `heading` slot. If used with an `ic-data-table` it will default to the table's `caption` unless overridden.",
          "docsTags": [],
          "default": "DEFAULT_TITLE_BAR_HEADING",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hideDensitySelect",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-density-select",
          "reflectToAttr": false,
          "docs": "When `true`, the density select will not be rendered.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "metadata",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "metadata",
          "reflectToAttr": false,
          "docs": "The metadata displayed next to the `heading`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "icTableDensityUpdate",
          "detail": "IcDensityUpdateEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "IcDensityUpdateEventDetail",
            "resolved": "IcDensityUpdateEventDetail",
            "references": {
              "IcDensityUpdateEventDetail": {
                "location": "import",
                "path": "../ic-data-table/ic-data-table.types",
                "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDensityUpdateEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the table density select value is changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "custom-actions",
          "docs": "Render additional custom actions to the left of the density select."
        },
        {
          "name": "description",
          "docs": "Render an alternative description in the description section."
        },
        {
          "name": "heading",
          "docs": "The heading to render on the data table title bar."
        },
        {
          "name": "primary-action",
          "docs": "Render an interactive element that will perform a primary action. Renders to the right of the density select."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ic-typography",
        "ic-select"
      ],
      "dependencyGraph": {
        "ic-data-table-title-bar": [
          "ic-typography",
          "ic-select"
        ],
        "ic-select": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-typography",
          "ic-button",
          "ic-menu",
          "ic-input-validation"
        ],
        "ic-input-label": [
          "ic-typography"
        ],
        "ic-button": [
          "ic-loading-indicator",
          "ic-tooltip"
        ],
        "ic-loading-indicator": [
          "ic-typography"
        ],
        "ic-tooltip": [
          "ic-typography"
        ],
        "ic-menu": [
          "ic-loading-indicator",
          "ic-typography",
          "ic-button"
        ],
        "ic-input-validation": [
          "ic-typography"
        ]
      }
    },
    {
      "filePath": "src/components/ic-date-input/ic-date-input.tsx",
      "encapsulation": "shadow",
      "tag": "ic-date-input",
      "readme": "# ic-date-input\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "dateFormat",
          "type": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
          "complexType": {
            "original": "IcDateFormat",
            "resolved": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
            "references": {
              "IcDateFormat": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcDateFormat"
              }
            }
          },
          "mutable": false,
          "attr": "date-format",
          "reflectToAttr": false,
          "docs": "The format in which the date will be displayed.",
          "docsTags": [],
          "default": "\"DD/MM/YYYY\"",
          "values": [
            {
              "value": "DD/MM/YYYY",
              "type": "string"
            },
            {
              "value": "MM/DD/YYYY",
              "type": "string"
            },
            {
              "value": "YYYY/MM/DD",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableDays",
          "type": "IcWeekDays[]",
          "complexType": {
            "original": "IcWeekDays[]",
            "resolved": "IcWeekDays[]",
            "references": {
              "IcWeekDays": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcWeekDays"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The days of the week to disable.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "IcWeekDays[]"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableDaysMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-days-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when `disableDays` is set and a disabled date is entered.",
          "docsTags": [],
          "default": "\"The date you have selected is on a day of the week that is not allowed. Please select another date.\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableFuture",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-future",
          "reflectToAttr": false,
          "docs": "If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableFutureMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-future-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when `disableFuture` is true and a date in the future is entered.",
          "docsTags": [],
          "default": "\"Dates in the future are not allowed. Please select a date in the past.\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disablePast",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-past",
          "reflectToAttr": false,
          "docs": "If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disablePastMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-past-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when `disablePast` is true and a date in the past is entered.",
          "docsTags": [],
          "default": "\"Dates in the past are not allowed. Please select a date in the future.\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the disabled state will be set.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helperText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "The helper text that will be displayed for additional field guidance. This will default to the text \"Use format\" along with the `dateFormat` value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "The ID for the input.",
          "docsTags": [],
          "default": "`ic-date-input-${inputIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label for the date input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "max",
          "type": "Date | string",
          "complexType": {
            "original": "string | Date",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.\nThe value of this prop is ignored if `disableFuture` is set to `true`.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "Date | string",
          "complexType": {
            "original": "string | Date",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.\nThe value of this prop is ignored if `disablePast` is set to `true`.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the input will require a value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showClearButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-clear-button",
          "reflectToAttr": false,
          "docs": "If `true`, a button which clears the date input when clicked will be displayed.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"default\" | \"large\" | \"small\"",
          "complexType": {
            "original": "IcSizes",
            "resolved": "\"default\" | \"large\" | \"small\"",
            "references": {
              "IcSizes": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the date input to be displayed.",
          "docsTags": [],
          "default": "\"default\"",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "validationStatus",
          "type": "\"\" | \"error\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "IcInformationStatusOrEmpty",
            "resolved": "\"\" | \"error\" | \"success\" | \"warning\"",
            "references": {
              "IcInformationStatusOrEmpty": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcInformationStatusOrEmpty"
              }
            }
          },
          "mutable": true,
          "attr": "validation-status",
          "reflectToAttr": false,
          "docs": "The validation status - e.g. 'error' | 'warning' | 'success'. This will override the built-in date validation.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "validationText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-text",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message. This will override the built-in date validation.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "Date | string",
          "complexType": {
            "original": "string | Date | null | undefined",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the date input. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getDate",
          "returns": {
            "type": "Promise<Date>",
            "docs": "Date"
          },
          "complexType": {
            "signature": "() => Promise<Date>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            },
            "return": "Promise<Date>"
          },
          "signature": "getDate() => Promise<Date>",
          "parameters": [],
          "docs": "Returns the value as a Date object",
          "docsTags": [
            {
              "name": "returns",
              "text": "Date"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "icBlur",
          "detail": "{ value: Date; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: Date }",
            "resolved": "{ value: Date; }",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "icChange",
          "detail": "{ value: Date; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: Date }",
            "resolved": "{ value: Date; }",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "icFocus",
          "detail": "{ value: Date; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: Date }",
            "resolved": "{ value: Date; }",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input gains focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "ic-date-picker"
      ],
      "dependencies": [
        "ic-input-container",
        "ic-input-label",
        "ic-input-component-container",
        "ic-button",
        "ic-input-validation"
      ],
      "dependencyGraph": {
        "ic-date-input": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-button",
          "ic-input-validation"
        ],
        "ic-input-label": [
          "ic-typography"
        ],
        "ic-button": [
          "ic-loading-indicator",
          "ic-tooltip"
        ],
        "ic-loading-indicator": [
          "ic-typography"
        ],
        "ic-tooltip": [
          "ic-typography"
        ],
        "ic-input-validation": [
          "ic-typography"
        ],
        "ic-date-picker": [
          "ic-date-input"
        ]
      }
    },
    {
      "filePath": "src/components/ic-date-picker/ic-date-picker.tsx",
      "encapsulation": "shadow",
      "tag": "ic-date-picker",
      "readme": "# ic-date-picker\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "dateFormat",
          "type": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
          "complexType": {
            "original": "IcDateFormat",
            "resolved": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
            "references": {
              "IcDateFormat": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcDateFormat"
              }
            }
          },
          "mutable": false,
          "attr": "date-format",
          "reflectToAttr": false,
          "docs": "The format in which the date will be displayed.",
          "docsTags": [],
          "default": "\"DD/MM/YYYY\"",
          "values": [
            {
              "value": "DD/MM/YYYY",
              "type": "string"
            },
            {
              "value": "MM/DD/YYYY",
              "type": "string"
            },
            {
              "value": "YYYY/MM/DD",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableDays",
          "type": "IcWeekDays[]",
          "complexType": {
            "original": "IcWeekDays[]",
            "resolved": "IcWeekDays[]",
            "references": {
              "IcWeekDays": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcWeekDays"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The days of the week to disable.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "IcWeekDays[]"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableDaysMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-days-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when `disableDays` is `true` and a disabled date is entered.",
          "docsTags": [],
          "default": "\"The date you have selected is on a day of the week that is not allowed. Please select another date.\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableFuture",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-future",
          "reflectToAttr": false,
          "docs": "If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableFutureMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-future-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when `disableFuture` is `true` and a date in the future is entered.",
          "docsTags": [],
          "default": "\"Dates in the future are not allowed. Please select a date in the past.\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disablePast",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-past",
          "reflectToAttr": false,
          "docs": "If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disablePastMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-past-message",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message when `disablePast` is `true` and a date in the past is entered.",
          "docsTags": [],
          "default": "\"Dates in the past are not allowed. Please select a date in the future.\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the disabled state will be set.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helperText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "The helper text that will be displayed for additional field guidance. This will default to the text \"Use format\" along with the `dateFormat` value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "The ID for the input field. The default will be an automatically generated value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label for the date input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "max",
          "type": "Date | string",
          "complexType": {
            "original": "string | Date",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.\nThe value of this prop is ignored if `disableFuture` is set to `true`.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "Date | string",
          "complexType": {
            "original": "string | Date",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.\nThe value of this prop is ignored if `disablePast` is set to `true`.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "openAtDate",
          "type": "Date | string",
          "complexType": {
            "original": "string | Date",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "attr": "open-at-date",
          "reflectToAttr": false,
          "docs": "The date visible when the calendar opens. Used if no date is currently selected.\nThe value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the input will require a value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showDaysOutsideMonth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-days-outside-month",
          "reflectToAttr": false,
          "docs": "If `true`, days outside the current month will be visible in the date picker.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showPickerClearButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-picker-clear-button",
          "reflectToAttr": false,
          "docs": "If `true`, the `Clear` button on the date picker will be visible.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showPickerTodayButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-picker-today-button",
          "reflectToAttr": false,
          "docs": "If `true`, the `Go to today` button on the date picker will be visible.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"default\" | \"large\" | \"small\"",
          "complexType": {
            "original": "IcSizes",
            "resolved": "\"default\" | \"large\" | \"small\"",
            "references": {
              "IcSizes": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the date picker to be displayed.",
          "docsTags": [],
          "default": "\"default\"",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "startOfWeek",
          "type": "IcWeekDays.Friday | IcWeekDays.Monday | IcWeekDays.Saturday | IcWeekDays.Sunday | IcWeekDays.Thursday | IcWeekDays.Tuesday | IcWeekDays.Wednesday",
          "complexType": {
            "original": "IcWeekDays",
            "resolved": "IcWeekDays.Friday | IcWeekDays.Monday | IcWeekDays.Saturday | IcWeekDays.Sunday | IcWeekDays.Thursday | IcWeekDays.Tuesday | IcWeekDays.Wednesday",
            "references": {
              "IcWeekDays": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcWeekDays"
              }
            }
          },
          "mutable": false,
          "attr": "start-of-week",
          "reflectToAttr": false,
          "docs": "The first day of the week. `0` for Sunday, `1` for Monday, etc.\nDefault is Monday.",
          "docsTags": [],
          "default": "IcWeekDays.Monday",
          "values": [
            {
              "type": "IcWeekDays.Friday"
            },
            {
              "type": "IcWeekDays.Monday"
            },
            {
              "type": "IcWeekDays.Saturday"
            },
            {
              "type": "IcWeekDays.Sunday"
            },
            {
              "type": "IcWeekDays.Thursday"
            },
            {
              "type": "IcWeekDays.Tuesday"
            },
            {
              "type": "IcWeekDays.Wednesday"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "validationStatus",
          "type": "\"\" | \"error\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "IcInformationStatusOrEmpty",
            "resolved": "\"\" | \"error\" | \"success\" | \"warning\"",
            "references": {
              "IcInformationStatusOrEmpty": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcInformationStatusOrEmpty"
              }
            }
          },
          "mutable": false,
          "attr": "validation-status",
          "reflectToAttr": false,
          "docs": "The validation status - e.g. 'error' | 'warning' | 'success'. This will override the built-in date validation.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "validationText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-text",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message. This will override the built-in date validation.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "Date | string",
          "complexType": {
            "original": "string | Date | null | undefined",
            "resolved": "Date | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the date picker. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "icChange",
          "detail": "{ value: Date; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: Date }",
            "resolved": "{ value: Date; }",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calendarButtonClicked",
          "capture": false,
          "passive": false
        },
        {
          "event": "calendarButtonClicked",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--ic-z-index-date-picker",
          "annotation": "prop",
          "docs": "z-index of date picker."
        },
        {
          "name": "--input-width",
          "annotation": "prop",
          "docs": "Width of the input field"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ic-button",
        "ic-date-input",
        "ic-typography"
      ],
      "dependencyGraph": {
        "ic-date-picker": [
          "ic-button",
          "ic-date-input",
          "ic-typography"
        ],
        "ic-button": [
          "ic-loading-indicator",
          "ic-tooltip"
        ],
        "ic-loading-indicator": [
          "ic-typography"
        ],
        "ic-tooltip": [
          "ic-typography"
        ],
        "ic-date-input": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-button",
          "ic-input-validation"
        ],
        "ic-input-label": [
          "ic-typography"
        ],
        "ic-input-validation": [
          "ic-typography"
        ]
      }
    },
    {
      "filePath": "src/components/ic-menu-with-multi/ic-menu.tsx",
      "encapsulation": "scoped",
      "tag": "ic-menu-with-multi",
      "readme": "# ic-menu-with-multi\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activationType",
          "type": "\"automatic\" | \"manual\"",
          "complexType": {
            "original": "IcActivationTypes",
            "resolved": "\"automatic\" | \"manual\"",
            "references": {
              "IcActivationTypes": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/utils/types",
                "id": "../web-components/dist/types/utils/types.d.ts::IcActivationTypes"
              }
            }
          },
          "mutable": false,
          "attr": "activation-type",
          "reflectToAttr": false,
          "docs": "Determines whether options manually set as values (by pressing 'Enter') when they receive focus using keyboard navigation.",
          "docsTags": [],
          "default": "\"automatic\"",
          "values": [
            {
              "value": "automatic",
              "type": "string"
            },
            {
              "value": "manual",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "anchorEl",
          "type": "HTMLElement",
          "complexType": {
            "original": "HTMLElement",
            "resolved": "HTMLElement",
            "references": {
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The reference to an anchor element the menu will position itself from when rendered.",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "closeOnSelect",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "close-on-select",
          "reflectToAttr": false,
          "docs": "If `true`, the menu will close when an option is selected.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fullWidth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "full-width",
          "reflectToAttr": false,
          "docs": "If `true`, the menu will fill the width of the container.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputEl",
          "type": "HTMLElement",
          "complexType": {
            "original": "HTMLElement",
            "resolved": "HTMLElement",
            "references": {
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The reference to the input element.",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "inputLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-label",
          "reflectToAttr": false,
          "docs": "The label for the input element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelField",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label-field",
          "reflectToAttr": false,
          "docs": "The custom name for the label field for IcMenuOption.",
          "docsTags": [],
          "default": "\"label\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "menuId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "menu-id",
          "reflectToAttr": false,
          "docs": "The ID of the menu.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "If `true`, the menu will be displayed open.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "options",
          "type": "IcMenuOption[]",
          "complexType": {
            "original": "IcMenuOption[]",
            "resolved": "IcMenuOption[]",
            "references": {
              "IcMenuOption": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/utils/types",
                "id": "../web-components/dist/types/utils/types.d.ts::IcMenuOption"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The possible menu selection options.",
          "docsTags": [],
          "values": [
            {
              "type": "IcMenuOption[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "searchMode",
          "type": "\"navigation\" | \"query\"",
          "complexType": {
            "original": "IcSearchBarSearchModes",
            "resolved": "\"navigation\" | \"query\"",
            "references": {
              "IcSearchBarSearchModes": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/components",
                "id": "../web-components/dist/types/components.d.ts::IcSearchBarSearchModes"
              }
            }
          },
          "mutable": false,
          "attr": "search-mode",
          "reflectToAttr": false,
          "docs": "Specify the mode search bar uses to search. `navigation` allows for quick lookups of a set of values, `query` allows for more general searches.",
          "docsTags": [],
          "default": "\"navigation\"",
          "values": [
            {
              "value": "navigation",
              "type": "string"
            },
            {
              "value": "query",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"default\" | \"large\" | \"small\"",
          "complexType": {
            "original": "IcSizes",
            "resolved": "\"default\" | \"large\" | \"small\"",
            "references": {
              "IcSizes": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the menu.",
          "docsTags": [],
          "default": "\"default\"",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "small",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "small",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "This prop should not be used anymore. Set prop `size` to \"small\" instead."
            }
          ],
          "default": "false",
          "deprecation": "This prop should not be used anymore. Set prop `size` to \"small\" instead.",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string | string[]",
          "complexType": {
            "original": "string | string[]",
            "resolved": "string | string[]",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the currently selected option - or array of values (if multiple options allowed).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "valueField",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value-field",
          "reflectToAttr": false,
          "docs": "The custom name for the value field for IcMenuOption.",
          "docsTags": [],
          "default": "\"value\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "handleKeyboardOpen",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(event: KeyboardEvent) => Promise<void>",
            "parameters": [
              {
                "name": "event",
                "type": "KeyboardEvent",
                "docs": "- keyboard event"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "KeyboardEvent": {
                "location": "global",
                "id": "global::KeyboardEvent"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "handleKeyboardOpen(event: KeyboardEvent) => Promise<void>",
          "parameters": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "docs": "- keyboard event"
            }
          ],
          "docs": "Used alongside activationType\nIf menu is opened via keyboard navigation (i.e. Enter, ArrowUp or ArrowDown), emit optionSelect custom event.",
          "docsTags": [
            {
              "name": "param",
              "text": "event - keyboard event"
            }
          ]
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--ic-z-index-menu",
          "annotation": "prop",
          "docs": "z-index of menu"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "ic-select-with-multi"
      ],
      "dependencies": [
        "ic-loading-indicator",
        "ic-typography",
        "ic-button"
      ],
      "dependencyGraph": {
        "ic-menu-with-multi": [
          "ic-loading-indicator",
          "ic-typography",
          "ic-button"
        ],
        "ic-loading-indicator": [
          "ic-typography"
        ],
        "ic-button": [
          "ic-loading-indicator",
          "ic-tooltip"
        ],
        "ic-tooltip": [
          "ic-typography"
        ],
        "ic-select-with-multi": [
          "ic-menu-with-multi"
        ]
      }
    },
    {
      "filePath": "src/components/ic-pagination-bar/ic-pagination-bar.tsx",
      "encapsulation": "shadow",
      "tag": "ic-pagination-bar",
      "readme": "# ic-pagination-bar\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "alignment",
          "type": "\"left\" | \"right\" | \"space-between\"",
          "complexType": {
            "original": "IcPaginationAlignmentOptions",
            "resolved": "\"left\" | \"right\" | \"space-between\"",
            "references": {
              "IcPaginationAlignmentOptions": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/components/ic-pagination/ic-pagination.types",
                "id": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationAlignmentOptions"
              }
            }
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": false,
          "docs": "Sets the alignment of the items in the pagination bar.",
          "docsTags": [],
          "default": "\"right\"",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "space-between",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "appearance",
          "type": "\"dark\" | \"default\" | \"light\"",
          "complexType": {
            "original": "IcThemeForeground",
            "resolved": "\"dark\" | \"default\" | \"light\"",
            "references": {
              "IcThemeForeground": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/interface",
                "id": "../web-components/dist/types/interface.d.ts::IcThemeForeground"
              }
            }
          },
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": false,
          "docs": "Sets the styling for the items in the pagination bar.",
          "docsTags": [],
          "default": "\"default\"",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hideRangeLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-range-label",
          "reflectToAttr": false,
          "docs": "If `true`, the number of total items and current item range or number of total pages and current page will be hidden.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "itemsPerPageOptions",
          "type": "{ label: string; value: string; }[]",
          "complexType": {
            "original": "{\n    label: string;\n    value: string;\n  }[]",
            "resolved": "{ label: string; value: string; }[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The options which will be displayed for 'items per page' select input. Set a maximum of 4 options including a required 'All' option with value equal to total number of items.",
          "docsTags": [],
          "values": [
            {
              "type": "{ label: string; value: string; }[]"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pageLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "page-label",
          "reflectToAttr": false,
          "docs": "The label which will be used in place of 'Page' if rangeLabelType is page. Should be capitalised.",
          "docsTags": [],
          "default": "\"Page\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rangeItemLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "range-item-label",
          "reflectToAttr": false,
          "docs": "The label which will be used in place of 'items' if type is data. Should be capitalised.",
          "docsTags": [],
          "default": "\"Item\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rangeLabelType",
          "type": "\"data\" | \"page\"",
          "complexType": {
            "original": "IcPaginationLabelTypes",
            "resolved": "\"data\" | \"page\"",
            "references": {
              "IcPaginationLabelTypes": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/components/ic-pagination/ic-pagination.types",
                "id": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationLabelTypes"
              }
            }
          },
          "mutable": false,
          "attr": "range-label-type",
          "reflectToAttr": false,
          "docs": "Whether total number of items and current item range or total number of pages and current page is displayed.",
          "docsTags": [],
          "default": "\"page\"",
          "values": [
            {
              "value": "data",
              "type": "string"
            },
            {
              "value": "page",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showGoToPageControl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-go-to-page-control",
          "reflectToAttr": false,
          "docs": "If `true`, the 'go to page' control should be displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showItemsPerPageControl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-items-per-page-control",
          "reflectToAttr": false,
          "docs": "If `true`, the select input to control 'items per page' should be displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "totalItems",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "total-items",
          "reflectToAttr": false,
          "docs": "Total number of items to be displayed across all pages.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "type",
          "type": "\"complex\" | \"simple\"",
          "complexType": {
            "original": "IcPaginationTypes",
            "resolved": "\"complex\" | \"simple\"",
            "references": {
              "IcPaginationTypes": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/components/ic-pagination/ic-pagination.types",
                "id": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationTypes"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Whether the displayed pagination is simple or complex.",
          "docsTags": [],
          "default": "\"simple\"",
          "values": [
            {
              "value": "complex",
              "type": "string"
            },
            {
              "value": "simple",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "icItemsPerPageChange",
          "detail": "{ value: number; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: number }",
            "resolved": "{ value: number; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the items per page option is changed.",
          "docsTags": []
        },
        {
          "event": "icPageChange",
          "detail": "{ value: number; }",
          "bubbles": true,
          "complexType": {
            "original": "{ value: number }",
            "resolved": "{ value: number; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a page is navigated to via the 'go to' input.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "icPageChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "ic-data-table"
      ],
      "dependencies": [
        "ic-typography",
        "ic-select",
        "ic-pagination",
        "ic-tooltip",
        "ic-text-field",
        "ic-button"
      ],
      "dependencyGraph": {
        "ic-pagination-bar": [
          "ic-typography",
          "ic-select",
          "ic-pagination",
          "ic-tooltip",
          "ic-text-field",
          "ic-button"
        ],
        "ic-select": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-typography",
          "ic-button",
          "ic-menu",
          "ic-input-validation"
        ],
        "ic-input-label": [
          "ic-typography"
        ],
        "ic-button": [
          "ic-loading-indicator",
          "ic-tooltip"
        ],
        "ic-loading-indicator": [
          "ic-typography"
        ],
        "ic-tooltip": [
          "ic-typography"
        ],
        "ic-menu": [
          "ic-loading-indicator",
          "ic-typography",
          "ic-button"
        ],
        "ic-input-validation": [
          "ic-typography"
        ],
        "ic-pagination": [
          "ic-button",
          "ic-pagination-item"
        ],
        "ic-pagination-item": [
          "ic-typography"
        ],
        "ic-text-field": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-input-validation",
          "ic-typography"
        ],
        "ic-data-table": [
          "ic-pagination-bar"
        ]
      }
    },
    {
      "filePath": "src/components/ic-select-with-multi/ic-select.tsx",
      "encapsulation": "shadow",
      "tag": "ic-select-with-multi",
      "readme": "# ic-select\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "charactersUntilSuggestions",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "characters-until-suggestions",
          "reflectToAttr": false,
          "docs": "**[DEPRECATED]** This prop should not be used anymore.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableFilter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-filter",
          "reflectToAttr": false,
          "docs": "If `true`, the built in filtering will be disabled for a searchable variant. For example, if options will already be filtered from external source.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If `true`, the disabled state will be set.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "emptyOptionListText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "empty-option-list-text",
          "reflectToAttr": false,
          "docs": "The text displayed when there are no options in the option list.",
          "docsTags": [],
          "default": "\"No results found\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": false,
          "docs": "The <form> element to associate the select with.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "formaction",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "formaction",
          "reflectToAttr": false,
          "docs": "The URL that processes the information submitted by the select. It overrides the action attribute of the select's form owner. Does nothing if there is no form owner.\nThis prop should only be used with searchable select and will only be applied if searchable is true.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "formenctype",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "formenctype",
          "reflectToAttr": false,
          "docs": "The way the submitted form data is encoded. This prop should only be used with searchable select and will only be applied if searchable is true.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "formmethod",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "formmethod",
          "reflectToAttr": false,
          "docs": "The HTTP method used to submit the form. This prop should only be used with searchable select and will only be applied if searchable is true.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "formnovalidate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "formnovalidate",
          "reflectToAttr": false,
          "docs": "If `true`, the form will not be validated when submitted. This prop should only be used with searchable select and will only be applied if searchable is true.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "formtarget",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "formtarget",
          "reflectToAttr": false,
          "docs": "The place to display the response from submitting the form. It overrides the target attribute of the select's form owner.\nThis prop should only be used with searchable select and will only be applied if searchable is true.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fullWidth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "full-width",
          "reflectToAttr": false,
          "docs": "If `true`, the select element will fill the width of the container. This prop should only be used with searchable select and will only be applied if searchable is true.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helperText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "The helper text that will be displayed for additional field guidance.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hideLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-label",
          "reflectToAttr": false,
          "docs": "If `true`, the label will be hidden and the required label value will be applied as an aria-label.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "includeDescriptionsInSearch",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "include-descriptions-in-search",
          "reflectToAttr": false,
          "docs": "If `true`, descriptions of options will be included when filtering options in a searchable select. Only applies to built in filtering.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "includeGroupTitlesInSearch",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "include-group-titles-in-search",
          "reflectToAttr": false,
          "docs": "If `true`, group titles of grouped options will be included when filtering options in a searchable select. Only applies to built in filtering.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label for the select.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "If `true`, the loading state will be triggered when fetching options asynchronously.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loadingErrorLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "loading-error-label",
          "reflectToAttr": false,
          "docs": "The message displayed when external loading times out.",
          "docsTags": [],
          "default": "\"Loading Error\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loadingLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "loading-label",
          "reflectToAttr": false,
          "docs": "The message displayed whilst the options are being loaded externally.",
          "docsTags": [],
          "default": "\"Loading...\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "If `true`, multiple options can be selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "options",
          "type": "IcMenuOption[]",
          "complexType": {
            "original": "IcMenuOption[]",
            "resolved": "IcMenuOption[]",
            "references": {
              "IcMenuOption": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/utils/types",
                "id": "../web-components/dist/types/utils/types.d.ts::IcMenuOption"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The possible selection options.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "IcMenuOption[]"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The placeholder value to be displayed.",
          "docsTags": [],
          "default": "\"Select an option\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true`, the readonly state will be set.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the select will require a value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "searchMatchPosition",
          "type": "\"anywhere\" | \"start\"",
          "complexType": {
            "original": "IcSearchMatchPositions",
            "resolved": "\"anywhere\" | \"start\"",
            "references": {
              "IcSearchMatchPositions": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcSearchMatchPositions"
              }
            }
          },
          "mutable": false,
          "attr": "search-match-position",
          "reflectToAttr": false,
          "docs": "Whether the search string of the searchable select should match the start of or anywhere in the options. Only applies to built in filtering.",
          "docsTags": [],
          "default": "\"anywhere\"",
          "values": [
            {
              "value": "anywhere",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "searchable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "searchable",
          "reflectToAttr": false,
          "docs": "If `true`, a searchable variant of the select will be displayed which can be typed in to filter options.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selectOnEnter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "select-on-enter",
          "reflectToAttr": false,
          "docs": "If `true`, the icOptionSelect event will be fired on enter instead of ArrowUp and ArrowDown.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showClearButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-clear-button",
          "reflectToAttr": false,
          "docs": "If `true`, a button which clears the select input when clicked will be displayed. The button will always appear on the searchable select.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"default\" | \"large\" | \"small\"",
          "complexType": {
            "original": "IcSizes",
            "resolved": "\"default\" | \"large\" | \"small\"",
            "references": {
              "IcSizes": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the select.",
          "docsTags": [],
          "default": "\"default\"",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "small",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "small",
          "reflectToAttr": false,
          "docs": "**[DEPRECATED]** This prop should not be used anymore. Set prop `size` to \"small\" instead.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "timeout",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "timeout",
          "reflectToAttr": false,
          "docs": "If using external filtering, set a timeout for when loading takes too long.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "validationStatus",
          "type": "\"\" | \"error\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "IcInformationStatusOrEmpty",
            "resolved": "\"\" | \"error\" | \"success\" | \"warning\"",
            "references": {
              "IcInformationStatusOrEmpty": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcInformationStatusOrEmpty"
              }
            }
          },
          "mutable": false,
          "attr": "validation-status",
          "reflectToAttr": false,
          "docs": "The validation status - e.g. 'error' | 'warning' | 'success'.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "validationText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "validation-text",
          "reflectToAttr": false,
          "docs": "The text to display as the validation message.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string | string[]",
          "complexType": {
            "original": "string | string[]",
            "resolved": "string | string[]",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the select, reflected by the value of the currently selected option.\nFor the searchable variant, the value is also reflected by the user input.\nFor the multi-select variant, the value must be an array of option values.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the input box.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "icBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the select loses focus.",
          "docsTags": []
        },
        {
          "event": "icChange",
          "detail": "IcValueEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "IcValueEventDetail",
            "resolved": "IcValueEventDetail",
            "references": {
              "IcValueEventDetail": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcValueEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value changes.",
          "docsTags": []
        },
        {
          "event": "icClear",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the clear button is clicked.",
          "docsTags": []
        },
        {
          "event": "icFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the select gains focus.",
          "docsTags": []
        },
        {
          "event": "icInput",
          "detail": "IcValueEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "IcValueEventDetail",
            "resolved": "IcValueEventDetail",
            "references": {
              "IcValueEventDetail": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcValueEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "icOptionDeselect",
          "detail": "IcOptionSelectEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "IcOptionSelectEventDetail",
            "resolved": "IcOptionSelectEventDetail",
            "references": {
              "IcOptionSelectEventDetail": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/components",
                "id": "../web-components/dist/types/components.d.ts::IcOptionSelectEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when `multiple` is `true` and an option is deselected.",
          "docsTags": []
        },
        {
          "event": "icOptionSelect",
          "detail": "IcOptionSelectEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "IcOptionSelectEventDetail",
            "resolved": "IcOptionSelectEventDetail",
            "references": {
              "IcOptionSelectEventDetail": {
                "location": "import",
                "path": "@ukic/web-components/dist/types/components",
                "id": "../web-components/dist/types/components.d.ts::IcOptionSelectEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when an option is selected.\nSelecting an option will also trigger an `icChange/onIcChange` due to the value being updated.",
          "docsTags": []
        },
        {
          "event": "icRetryLoad",
          "detail": "IcValueEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "IcValueEventDetail",
            "resolved": "IcValueEventDetail",
            "references": {
              "IcValueEventDetail": {
                "location": "import",
                "path": "../../utils/types",
                "id": "src/utils/types.ts::IcValueEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the 'retry loading' button is clicked for a searchable variant.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--ic-z-index-menu",
          "annotation": "prop",
          "docs": "z-index of select menu"
        },
        {
          "name": "--input-width",
          "annotation": "prop",
          "docs": "Width of the input field"
        },
        {
          "name": "--menu-width",
          "annotation": "prop",
          "docs": "Width of the dropdown menu"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ic-input-container",
        "ic-input-label",
        "ic-input-component-container",
        "ic-typography",
        "ic-button",
        "ic-menu-with-multi",
        "ic-input-validation"
      ],
      "dependencyGraph": {
        "ic-select-with-multi": [
          "ic-input-container",
          "ic-input-label",
          "ic-input-component-container",
          "ic-typography",
          "ic-button",
          "ic-menu-with-multi",
          "ic-input-validation"
        ],
        "ic-input-label": [
          "ic-typography"
        ],
        "ic-button": [
          "ic-loading-indicator",
          "ic-tooltip"
        ],
        "ic-loading-indicator": [
          "ic-typography"
        ],
        "ic-tooltip": [
          "ic-typography"
        ],
        "ic-menu-with-multi": [
          "ic-loading-indicator",
          "ic-typography",
          "ic-button"
        ],
        "ic-input-validation": [
          "ic-typography"
        ]
      }
    }
  ],
  "typeLibrary": {
    "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableColumnObject": {
      "declaration": "{\n  key: string;\n  title: string;\n  dataType: IcDataTableColumnDataTypes;\n  columnAlignment?: {\n    horizontal?: string;\n    vertical?: string;\n  };\n  cellAlignment?: string;\n  emphasis?: string;\n  colspan?: number;\n  icon?: {\n    icon: string;\n    onAllCells?: boolean;\n    hideOnHeader?: boolean;\n  };\n}",
      "docstring": "",
      "path": "src/components/ic-data-table/ic-data-table.types.tsx"
    },
    "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableDensityOptions": {
      "declaration": "export type IcDataTableDensityOptions = \"default\" | \"dense\" | \"spacious\";",
      "docstring": "",
      "path": "src/components/ic-data-table/ic-data-table.types.tsx"
    },
    "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableRowHeights": {
      "declaration": "export type IcDataTableRowHeights = number | \"auto\";",
      "docstring": "",
      "path": "src/components/ic-data-table/ic-data-table.types.tsx"
    },
    "../web-components/dist/types/utils/types.d.ts::IcThemeForegroundNoDefault": {
      "declaration": "export type IcThemeForegroundNoDefault = \"dark\" | \"light\";",
      "docstring": "",
      "path": "../web-components/dist/types/utils/types.d.ts"
    },
    "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationLabelTypes": {
      "declaration": "export type IcPaginationLabelTypes = \"page\" | \"data\";",
      "docstring": "",
      "path": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts"
    },
    "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationTypes": {
      "declaration": "export type IcPaginationTypes = \"simple\" | \"complex\";",
      "docstring": "",
      "path": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts"
    },
    "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts::IcPaginationAlignmentOptions": {
      "declaration": "export type IcPaginationAlignmentOptions = \"left\" | \"right\" | \"space-between\";",
      "docstring": "",
      "path": "../web-components/dist/types/components/ic-pagination/ic-pagination.types.d.ts"
    },
    "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableSortOrderOptions": {
      "declaration": "export type IcDataTableSortOrderOptions =\n  | \"unsorted\"\n  | \"ascending\"\n  | \"descending\";",
      "docstring": "",
      "path": "src/components/ic-data-table/ic-data-table.types.tsx"
    },
    "../web-components/dist/types/interface.d.ts::IcThemeForeground": {
      "declaration": "any",
      "docstring": "",
      "path": "../web-components/dist/types/interface.d.ts"
    },
    "src/components/ic-data-table/ic-data-table.types.tsx::IcDensityUpdateEventDetail": {
      "declaration": "export interface IcDensityUpdateEventDetail {\n  value: IcDataTableDensityOptions;\n}",
      "docstring": "",
      "path": "src/components/ic-data-table/ic-data-table.types.tsx"
    },
    "src/utils/types.ts::IcDateFormat": {
      "declaration": "export type IcDateFormat = \"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\";",
      "docstring": "",
      "path": "src/utils/types.ts"
    },
    "src/utils/types.ts::IcWeekDays": {
      "declaration": "export enum IcWeekDays {\n  Sunday = 0,\n  Monday = 1,\n  Tuesday = 2,\n  Wednesday = 3,\n  Thursday = 4,\n  Friday = 5,\n  Saturday = 6,\n}",
      "docstring": "",
      "path": "src/utils/types.ts"
    },
    "src/utils/types.ts::IcSizes": {
      "declaration": "export type IcSizes = \"default\" | \"large\" | \"small\";",
      "docstring": "",
      "path": "src/utils/types.ts"
    },
    "src/utils/types.ts::IcInformationStatusOrEmpty": {
      "declaration": "export type IcInformationStatusOrEmpty = \"warning\" | \"error\" | \"success\" | \"\";",
      "docstring": "",
      "path": "src/utils/types.ts"
    },
    "../web-components/dist/types/utils/types.d.ts::IcActivationTypes": {
      "declaration": "export type IcActivationTypes = \"automatic\" | \"manual\";",
      "docstring": "",
      "path": "../web-components/dist/types/utils/types.d.ts"
    },
    "../web-components/dist/types/components.d.ts::IcSearchBarSearchModes": {
      "declaration": "any",
      "docstring": "",
      "path": "../web-components/dist/types/components.d.ts"
    },
    "../web-components/dist/types/utils/types.d.ts::IcMenuOption": {
      "declaration": "export interface IcMenuOption {\n    description?: string;\n    disabled?: boolean;\n    recommended?: boolean;\n    children?: IcMenuOption[];\n    loading?: boolean;\n    timedOut?: boolean;\n    [key: string]: any;\n    element?: {\n        component: any;\n        ariaLabel: string;\n    };\n    icon?: any;\n}",
      "docstring": "",
      "path": "../web-components/dist/types/utils/types.d.ts"
    },
    "../web-components/dist/types/components.d.ts::IcMenuOptionIdEventDetail": {
      "declaration": "any",
      "docstring": "",
      "path": "../web-components/dist/types/components.d.ts"
    },
    "../web-components/dist/types/components.d.ts::IcOptionSelectEventDetail": {
      "declaration": "any",
      "docstring": "",
      "path": "../web-components/dist/types/components.d.ts"
    },
    "../web-components/dist/types/components.d.ts::IcMenuChangeEventDetail": {
      "declaration": "any",
      "docstring": "",
      "path": "../web-components/dist/types/components.d.ts"
    },
    "src/utils/types.ts::IcValueEventDetail": {
      "declaration": "export interface IcValueEventDetail {\n  value: string | string[];\n  keyPressed?: string;\n}",
      "docstring": "",
      "path": "src/utils/types.ts"
    },
    "src/utils/types.ts::IcSearchMatchPositions": {
      "declaration": "export type IcSearchMatchPositions = \"start\" | \"anywhere\";",
      "docstring": "",
      "path": "src/utils/types.ts"
    }
  }
}