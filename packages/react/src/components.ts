'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import { type IcButtonCustomEvent, type IcChangeEventDetail, type IcCheckboxGroupCustomEvent, type IcExpandedDetail, type IcMenuChangeEventDetail, type IcMultiValueEventDetail, type IcOptionSelectEventDetail, type IcPaginationCustomEvent, type IcPopoverMenuCustomEvent, type IcRadioGroupCustomEvent, type IcRadioOptionCustomEvent, type IcSearchBarBlurEventDetail, type IcSearchBarCustomEvent, type IcSelectCustomEvent, type IcSideNavigationCustomEvent, type IcSwitchChangeEventDetail, type IcSwitchCustomEvent, type IcTabContextCustomEvent, type IcTabSelectEventDetail, type IcTextFieldCustomEvent, type IcThemeCustomEvent, type IcThemeSettings, type IcToggleButtonGroupCustomEvent, type IcValueEventDetail } from "@ukic/web-components";
import { IcAccordionGroup as IcAccordionGroupElement, defineCustomElement as defineIcAccordionGroup } from "@ukic/web-components/dist/components/ic-accordion-group.js";
import { IcAccordion as IcAccordionElement, defineCustomElement as defineIcAccordion } from "@ukic/web-components/dist/components/ic-accordion.js";
import { IcActionChip as IcActionChipElement, defineCustomElement as defineIcActionChip } from "@ukic/web-components/dist/components/ic-action-chip.js";
import { IcAlert as IcAlertElement, defineCustomElement as defineIcAlert } from "@ukic/web-components/dist/components/ic-alert.js";
import { IcBackToTop as IcBackToTopElement, defineCustomElement as defineIcBackToTop } from "@ukic/web-components/dist/components/ic-back-to-top.js";
import { IcBadge as IcBadgeElement, defineCustomElement as defineIcBadge } from "@ukic/web-components/dist/components/ic-badge.js";
import { IcBreadcrumbGroup as IcBreadcrumbGroupElement, defineCustomElement as defineIcBreadcrumbGroup } from "@ukic/web-components/dist/components/ic-breadcrumb-group.js";
import { IcBreadcrumb as IcBreadcrumbElement, defineCustomElement as defineIcBreadcrumb } from "@ukic/web-components/dist/components/ic-breadcrumb.js";
import { IcButton as IcButtonElement, defineCustomElement as defineIcButton } from "@ukic/web-components/dist/components/ic-button.js";
import { IcCardVertical as IcCardVerticalElement, defineCustomElement as defineIcCardVertical } from "@ukic/web-components/dist/components/ic-card-vertical.js";
import { IcCheckboxGroup as IcCheckboxGroupElement, defineCustomElement as defineIcCheckboxGroup } from "@ukic/web-components/dist/components/ic-checkbox-group.js";
import { IcCheckbox as IcCheckboxElement, defineCustomElement as defineIcCheckbox } from "@ukic/web-components/dist/components/ic-checkbox.js";
import { IcChip as IcChipElement, defineCustomElement as defineIcChip } from "@ukic/web-components/dist/components/ic-chip.js";
import { IcClassificationBanner as IcClassificationBannerElement, defineCustomElement as defineIcClassificationBanner } from "@ukic/web-components/dist/components/ic-classification-banner.js";
import { IcDataList as IcDataListElement, defineCustomElement as defineIcDataList } from "@ukic/web-components/dist/components/ic-data-list.js";
import { IcDataRow as IcDataRowElement, defineCustomElement as defineIcDataRow } from "@ukic/web-components/dist/components/ic-data-row.js";
import { IcDialog as IcDialogElement, defineCustomElement as defineIcDialog } from "@ukic/web-components/dist/components/ic-dialog.js";
import { IcDivider as IcDividerElement, defineCustomElement as defineIcDivider } from "@ukic/web-components/dist/components/ic-divider.js";
import { IcEmptyState as IcEmptyStateElement, defineCustomElement as defineIcEmptyState } from "@ukic/web-components/dist/components/ic-empty-state.js";
import { IcFooterLinkGroup as IcFooterLinkGroupElement, defineCustomElement as defineIcFooterLinkGroup } from "@ukic/web-components/dist/components/ic-footer-link-group.js";
import { IcFooterLink as IcFooterLinkElement, defineCustomElement as defineIcFooterLink } from "@ukic/web-components/dist/components/ic-footer-link.js";
import { IcFooter as IcFooterElement, defineCustomElement as defineIcFooter } from "@ukic/web-components/dist/components/ic-footer.js";
import { IcHero as IcHeroElement, defineCustomElement as defineIcHero } from "@ukic/web-components/dist/components/ic-hero.js";
import { IcHorizontalScroll as IcHorizontalScrollElement, defineCustomElement as defineIcHorizontalScroll } from "@ukic/web-components/dist/components/ic-horizontal-scroll.js";
import { IcInputComponentContainer as IcInputComponentContainerElement, defineCustomElement as defineIcInputComponentContainer } from "@ukic/web-components/dist/components/ic-input-component-container.js";
import { IcInputContainer as IcInputContainerElement, defineCustomElement as defineIcInputContainer } from "@ukic/web-components/dist/components/ic-input-container.js";
import { IcInputLabel as IcInputLabelElement, defineCustomElement as defineIcInputLabel } from "@ukic/web-components/dist/components/ic-input-label.js";
import { IcInputValidation as IcInputValidationElement, defineCustomElement as defineIcInputValidation } from "@ukic/web-components/dist/components/ic-input-validation.js";
import { IcLink as IcLinkElement, defineCustomElement as defineIcLink } from "@ukic/web-components/dist/components/ic-link.js";
import { IcLoadingIndicator as IcLoadingIndicatorElement, defineCustomElement as defineIcLoadingIndicator } from "@ukic/web-components/dist/components/ic-loading-indicator.js";
import { IcMenuGroup as IcMenuGroupElement, defineCustomElement as defineIcMenuGroup } from "@ukic/web-components/dist/components/ic-menu-group.js";
import { IcMenuItem as IcMenuItemElement, defineCustomElement as defineIcMenuItem } from "@ukic/web-components/dist/components/ic-menu-item.js";
import { IcMenu as IcMenuElement, defineCustomElement as defineIcMenu } from "@ukic/web-components/dist/components/ic-menu.js";
import { IcNavigationButton as IcNavigationButtonElement, defineCustomElement as defineIcNavigationButton } from "@ukic/web-components/dist/components/ic-navigation-button.js";
import { IcNavigationGroup as IcNavigationGroupElement, defineCustomElement as defineIcNavigationGroup } from "@ukic/web-components/dist/components/ic-navigation-group.js";
import { IcNavigationItem as IcNavigationItemElement, defineCustomElement as defineIcNavigationItem } from "@ukic/web-components/dist/components/ic-navigation-item.js";
import { IcNavigationMenu as IcNavigationMenuElement, defineCustomElement as defineIcNavigationMenu } from "@ukic/web-components/dist/components/ic-navigation-menu.js";
import { IcPageHeader as IcPageHeaderElement, defineCustomElement as defineIcPageHeader } from "@ukic/web-components/dist/components/ic-page-header.js";
import { IcPaginationItem as IcPaginationItemElement, defineCustomElement as defineIcPaginationItem } from "@ukic/web-components/dist/components/ic-pagination-item.js";
import { IcPagination as IcPaginationElement, defineCustomElement as defineIcPagination } from "@ukic/web-components/dist/components/ic-pagination.js";
import { IcPopoverMenu as IcPopoverMenuElement, defineCustomElement as defineIcPopoverMenu } from "@ukic/web-components/dist/components/ic-popover-menu.js";
import { IcRadioGroup as IcRadioGroupElement, defineCustomElement as defineIcRadioGroup } from "@ukic/web-components/dist/components/ic-radio-group.js";
import { IcRadioOption as IcRadioOptionElement, defineCustomElement as defineIcRadioOption } from "@ukic/web-components/dist/components/ic-radio-option.js";
import { IcSearchBar as IcSearchBarElement, defineCustomElement as defineIcSearchBar } from "@ukic/web-components/dist/components/ic-search-bar.js";
import { IcSectionContainer as IcSectionContainerElement, defineCustomElement as defineIcSectionContainer } from "@ukic/web-components/dist/components/ic-section-container.js";
import { IcSelect as IcSelectElement, defineCustomElement as defineIcSelect } from "@ukic/web-components/dist/components/ic-select.js";
import { IcSideNavigation as IcSideNavigationElement, defineCustomElement as defineIcSideNavigation } from "@ukic/web-components/dist/components/ic-side-navigation.js";
import { IcSkeleton as IcSkeletonElement, defineCustomElement as defineIcSkeleton } from "@ukic/web-components/dist/components/ic-skeleton.js";
import { IcSkipLink as IcSkipLinkElement, defineCustomElement as defineIcSkipLink } from "@ukic/web-components/dist/components/ic-skip-link.js";
import { IcStatusTag as IcStatusTagElement, defineCustomElement as defineIcStatusTag } from "@ukic/web-components/dist/components/ic-status-tag.js";
import { IcStep as IcStepElement, defineCustomElement as defineIcStep } from "@ukic/web-components/dist/components/ic-step.js";
import { IcStepper as IcStepperElement, defineCustomElement as defineIcStepper } from "@ukic/web-components/dist/components/ic-stepper.js";
import { IcSwitch as IcSwitchElement, defineCustomElement as defineIcSwitch } from "@ukic/web-components/dist/components/ic-switch.js";
import { IcTabContext as IcTabContextElement, defineCustomElement as defineIcTabContext } from "@ukic/web-components/dist/components/ic-tab-context.js";
import { IcTabGroup as IcTabGroupElement, defineCustomElement as defineIcTabGroup } from "@ukic/web-components/dist/components/ic-tab-group.js";
import { IcTabPanel as IcTabPanelElement, defineCustomElement as defineIcTabPanel } from "@ukic/web-components/dist/components/ic-tab-panel.js";
import { IcTab as IcTabElement, defineCustomElement as defineIcTab } from "@ukic/web-components/dist/components/ic-tab.js";
import { IcTextField as IcTextFieldElement, defineCustomElement as defineIcTextField } from "@ukic/web-components/dist/components/ic-text-field.js";
import { IcTheme as IcThemeElement, defineCustomElement as defineIcTheme } from "@ukic/web-components/dist/components/ic-theme.js";
import { IcToastRegion as IcToastRegionElement, defineCustomElement as defineIcToastRegion } from "@ukic/web-components/dist/components/ic-toast-region.js";
import { IcToast as IcToastElement, defineCustomElement as defineIcToast } from "@ukic/web-components/dist/components/ic-toast.js";
import { IcToggleButtonGroup as IcToggleButtonGroupElement, defineCustomElement as defineIcToggleButtonGroup } from "@ukic/web-components/dist/components/ic-toggle-button-group.js";
import { IcToggleButton as IcToggleButtonElement, defineCustomElement as defineIcToggleButton } from "@ukic/web-components/dist/components/ic-toggle-button.js";
import { IcTooltip as IcTooltipElement, defineCustomElement as defineIcTooltip } from "@ukic/web-components/dist/components/ic-tooltip.js";
import { IcTopNavigation as IcTopNavigationElement, defineCustomElement as defineIcTopNavigation } from "@ukic/web-components/dist/components/ic-top-navigation.js";
import { IcTypography as IcTypographyElement, defineCustomElement as defineIcTypography } from "@ukic/web-components/dist/components/ic-typography.js";
import React from 'react';

export type IcAccordionEvents = NonNullable<unknown>;

export const IcAccordion: StencilReactComponent<IcAccordionElement, IcAccordionEvents> = /*@__PURE__*/ createComponent<IcAccordionElement, IcAccordionEvents>({
    tagName: 'ic-accordion',
    elementClass: IcAccordionElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcAccordionEvents,
    defineCustomElement: defineIcAccordion
});

export type IcAccordionGroupEvents = NonNullable<unknown>;

export const IcAccordionGroup: StencilReactComponent<IcAccordionGroupElement, IcAccordionGroupEvents> = /*@__PURE__*/ createComponent<IcAccordionGroupElement, IcAccordionGroupEvents>({
    tagName: 'ic-accordion-group',
    elementClass: IcAccordionGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcAccordionGroupEvents,
    defineCustomElement: defineIcAccordionGroup
});

export type IcActionChipEvents = NonNullable<unknown>;

export const IcActionChip: StencilReactComponent<IcActionChipElement, IcActionChipEvents> = /*@__PURE__*/ createComponent<IcActionChipElement, IcActionChipEvents>({
    tagName: 'ic-action-chip',
    elementClass: IcActionChipElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcActionChipEvents,
    defineCustomElement: defineIcActionChip
});

export type IcAlertEvents = { onIcDismiss: EventName<CustomEvent<void>> };

export const IcAlert: StencilReactComponent<IcAlertElement, IcAlertEvents> = /*@__PURE__*/ createComponent<IcAlertElement, IcAlertEvents>({
    tagName: 'ic-alert',
    elementClass: IcAlertElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcDismiss: 'icDismiss' } as IcAlertEvents,
    defineCustomElement: defineIcAlert
});

export type IcBackToTopEvents = NonNullable<unknown>;

export const IcBackToTop: StencilReactComponent<IcBackToTopElement, IcBackToTopEvents> = /*@__PURE__*/ createComponent<IcBackToTopElement, IcBackToTopEvents>({
    tagName: 'ic-back-to-top',
    elementClass: IcBackToTopElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcBackToTopEvents,
    defineCustomElement: defineIcBackToTop
});

export type IcBadgeEvents = NonNullable<unknown>;

export const IcBadge: StencilReactComponent<IcBadgeElement, IcBadgeEvents> = /*@__PURE__*/ createComponent<IcBadgeElement, IcBadgeEvents>({
    tagName: 'ic-badge',
    elementClass: IcBadgeElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcBadgeEvents,
    defineCustomElement: defineIcBadge
});

export type IcBreadcrumbEvents = NonNullable<unknown>;

export const IcBreadcrumb: StencilReactComponent<IcBreadcrumbElement, IcBreadcrumbEvents> = /*@__PURE__*/ createComponent<IcBreadcrumbElement, IcBreadcrumbEvents>({
    tagName: 'ic-breadcrumb',
    elementClass: IcBreadcrumbElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcBreadcrumbEvents,
    defineCustomElement: defineIcBreadcrumb
});

export type IcBreadcrumbGroupEvents = NonNullable<unknown>;

export const IcBreadcrumbGroup: StencilReactComponent<IcBreadcrumbGroupElement, IcBreadcrumbGroupEvents> = /*@__PURE__*/ createComponent<IcBreadcrumbGroupElement, IcBreadcrumbGroupEvents>({
    tagName: 'ic-breadcrumb-group',
    elementClass: IcBreadcrumbGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcBreadcrumbGroupEvents,
    defineCustomElement: defineIcBreadcrumbGroup
});

export type IcButtonEvents = {
    onIcBlur: EventName<CustomEvent<void>>,
    onIcFileSelection: EventName<IcButtonCustomEvent<FileList>>,
    onIcFocus: EventName<CustomEvent<void>>
};

export const IcButton: StencilReactComponent<IcButtonElement, IcButtonEvents> = /*@__PURE__*/ createComponent<IcButtonElement, IcButtonEvents>({
    tagName: 'ic-button',
    elementClass: IcButtonElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onIcBlur: 'icBlur',
        onIcFileSelection: 'icFileSelection',
        onIcFocus: 'icFocus'
    } as IcButtonEvents,
    defineCustomElement: defineIcButton
});

export type IcCardVerticalEvents = NonNullable<unknown>;

export const IcCardVertical: StencilReactComponent<IcCardVerticalElement, IcCardVerticalEvents> = /*@__PURE__*/ createComponent<IcCardVerticalElement, IcCardVerticalEvents>({
    tagName: 'ic-card-vertical',
    elementClass: IcCardVerticalElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcCardVerticalEvents,
    defineCustomElement: defineIcCardVertical
});

export type IcCheckboxEvents = { onIcCheck: EventName<CustomEvent<void>> };

export const IcCheckbox: StencilReactComponent<IcCheckboxElement, IcCheckboxEvents> = /*@__PURE__*/ createComponent<IcCheckboxElement, IcCheckboxEvents>({
    tagName: 'ic-checkbox',
    elementClass: IcCheckboxElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcCheck: 'icCheck' } as IcCheckboxEvents,
    defineCustomElement: defineIcCheckbox
});

export type IcCheckboxGroupEvents = { onIcChange: EventName<IcCheckboxGroupCustomEvent<IcChangeEventDetail>> };

export const IcCheckboxGroup: StencilReactComponent<IcCheckboxGroupElement, IcCheckboxGroupEvents> = /*@__PURE__*/ createComponent<IcCheckboxGroupElement, IcCheckboxGroupEvents>({
    tagName: 'ic-checkbox-group',
    elementClass: IcCheckboxGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcChange: 'icChange' } as IcCheckboxGroupEvents,
    defineCustomElement: defineIcCheckboxGroup
});

export type IcChipEvents = { onIcDismiss: EventName<CustomEvent<void>> };

export const IcChip: StencilReactComponent<IcChipElement, IcChipEvents> = /*@__PURE__*/ createComponent<IcChipElement, IcChipEvents>({
    tagName: 'ic-chip',
    elementClass: IcChipElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcDismiss: 'icDismiss' } as IcChipEvents,
    defineCustomElement: defineIcChip
});

export type IcClassificationBannerEvents = NonNullable<unknown>;

export const IcClassificationBanner: StencilReactComponent<IcClassificationBannerElement, IcClassificationBannerEvents> = /*@__PURE__*/ createComponent<IcClassificationBannerElement, IcClassificationBannerEvents>({
    tagName: 'ic-classification-banner',
    elementClass: IcClassificationBannerElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcClassificationBannerEvents,
    defineCustomElement: defineIcClassificationBanner
});

export type IcDataListEvents = NonNullable<unknown>;

export const IcDataList: StencilReactComponent<IcDataListElement, IcDataListEvents> = /*@__PURE__*/ createComponent<IcDataListElement, IcDataListEvents>({
    tagName: 'ic-data-list',
    elementClass: IcDataListElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcDataListEvents,
    defineCustomElement: defineIcDataList
});

export type IcDataRowEvents = NonNullable<unknown>;

export const IcDataRow: StencilReactComponent<IcDataRowElement, IcDataRowEvents> = /*@__PURE__*/ createComponent<IcDataRowElement, IcDataRowEvents>({
    tagName: 'ic-data-row',
    elementClass: IcDataRowElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcDataRowEvents,
    defineCustomElement: defineIcDataRow
});

export type IcDialogEvents = {
    onIcDialogCancelled: EventName<CustomEvent<void>>,
    onIcDialogClosed: EventName<CustomEvent<void>>,
    onIcDialogConfirmed: EventName<CustomEvent<void>>,
    onIcDialogOpened: EventName<CustomEvent<void>>
};

export const IcDialog: StencilReactComponent<IcDialogElement, IcDialogEvents> = /*@__PURE__*/ createComponent<IcDialogElement, IcDialogEvents>({
    tagName: 'ic-dialog',
    elementClass: IcDialogElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onIcDialogCancelled: 'icDialogCancelled',
        onIcDialogClosed: 'icDialogClosed',
        onIcDialogConfirmed: 'icDialogConfirmed',
        onIcDialogOpened: 'icDialogOpened'
    } as IcDialogEvents,
    defineCustomElement: defineIcDialog
});

export type IcDividerEvents = NonNullable<unknown>;

export const IcDivider: StencilReactComponent<IcDividerElement, IcDividerEvents> = /*@__PURE__*/ createComponent<IcDividerElement, IcDividerEvents>({
    tagName: 'ic-divider',
    elementClass: IcDividerElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcDividerEvents,
    defineCustomElement: defineIcDivider
});

export type IcEmptyStateEvents = NonNullable<unknown>;

export const IcEmptyState: StencilReactComponent<IcEmptyStateElement, IcEmptyStateEvents> = /*@__PURE__*/ createComponent<IcEmptyStateElement, IcEmptyStateEvents>({
    tagName: 'ic-empty-state',
    elementClass: IcEmptyStateElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcEmptyStateEvents,
    defineCustomElement: defineIcEmptyState
});

export type IcFooterEvents = NonNullable<unknown>;

export const IcFooter: StencilReactComponent<IcFooterElement, IcFooterEvents> = /*@__PURE__*/ createComponent<IcFooterElement, IcFooterEvents>({
    tagName: 'ic-footer',
    elementClass: IcFooterElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcFooterEvents,
    defineCustomElement: defineIcFooter
});

export type IcFooterLinkEvents = NonNullable<unknown>;

export const IcFooterLink: StencilReactComponent<IcFooterLinkElement, IcFooterLinkEvents> = /*@__PURE__*/ createComponent<IcFooterLinkElement, IcFooterLinkEvents>({
    tagName: 'ic-footer-link',
    elementClass: IcFooterLinkElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcFooterLinkEvents,
    defineCustomElement: defineIcFooterLink
});

export type IcFooterLinkGroupEvents = NonNullable<unknown>;

export const IcFooterLinkGroup: StencilReactComponent<IcFooterLinkGroupElement, IcFooterLinkGroupEvents> = /*@__PURE__*/ createComponent<IcFooterLinkGroupElement, IcFooterLinkGroupEvents>({
    tagName: 'ic-footer-link-group',
    elementClass: IcFooterLinkGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcFooterLinkGroupEvents,
    defineCustomElement: defineIcFooterLinkGroup
});

export type IcHeroEvents = NonNullable<unknown>;

export const IcHero: StencilReactComponent<IcHeroElement, IcHeroEvents> = /*@__PURE__*/ createComponent<IcHeroElement, IcHeroEvents>({
    tagName: 'ic-hero',
    elementClass: IcHeroElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcHeroEvents,
    defineCustomElement: defineIcHero
});

export type IcHorizontalScrollEvents = NonNullable<unknown>;

export const IcHorizontalScroll: StencilReactComponent<IcHorizontalScrollElement, IcHorizontalScrollEvents> = /*@__PURE__*/ createComponent<IcHorizontalScrollElement, IcHorizontalScrollEvents>({
    tagName: 'ic-horizontal-scroll',
    elementClass: IcHorizontalScrollElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcHorizontalScrollEvents,
    defineCustomElement: defineIcHorizontalScroll
});

export type IcInputComponentContainerEvents = NonNullable<unknown>;

export const IcInputComponentContainer: StencilReactComponent<IcInputComponentContainerElement, IcInputComponentContainerEvents> = /*@__PURE__*/ createComponent<IcInputComponentContainerElement, IcInputComponentContainerEvents>({
    tagName: 'ic-input-component-container',
    elementClass: IcInputComponentContainerElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcInputComponentContainerEvents,
    defineCustomElement: defineIcInputComponentContainer
});

export type IcInputContainerEvents = NonNullable<unknown>;

export const IcInputContainer: StencilReactComponent<IcInputContainerElement, IcInputContainerEvents> = /*@__PURE__*/ createComponent<IcInputContainerElement, IcInputContainerEvents>({
    tagName: 'ic-input-container',
    elementClass: IcInputContainerElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcInputContainerEvents,
    defineCustomElement: defineIcInputContainer
});

export type IcInputLabelEvents = NonNullable<unknown>;

export const IcInputLabel: StencilReactComponent<IcInputLabelElement, IcInputLabelEvents> = /*@__PURE__*/ createComponent<IcInputLabelElement, IcInputLabelEvents>({
    tagName: 'ic-input-label',
    elementClass: IcInputLabelElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcInputLabelEvents,
    defineCustomElement: defineIcInputLabel
});

export type IcInputValidationEvents = NonNullable<unknown>;

export const IcInputValidation: StencilReactComponent<IcInputValidationElement, IcInputValidationEvents> = /*@__PURE__*/ createComponent<IcInputValidationElement, IcInputValidationEvents>({
    tagName: 'ic-input-validation',
    elementClass: IcInputValidationElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcInputValidationEvents,
    defineCustomElement: defineIcInputValidation
});

export type IcLinkEvents = NonNullable<unknown>;

export const IcLink: StencilReactComponent<IcLinkElement, IcLinkEvents> = /*@__PURE__*/ createComponent<IcLinkElement, IcLinkEvents>({
    tagName: 'ic-link',
    elementClass: IcLinkElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcLinkEvents,
    defineCustomElement: defineIcLink
});

export type IcLoadingIndicatorEvents = NonNullable<unknown>;

export const IcLoadingIndicator: StencilReactComponent<IcLoadingIndicatorElement, IcLoadingIndicatorEvents> = /*@__PURE__*/ createComponent<IcLoadingIndicatorElement, IcLoadingIndicatorEvents>({
    tagName: 'ic-loading-indicator',
    elementClass: IcLoadingIndicatorElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcLoadingIndicatorEvents,
    defineCustomElement: defineIcLoadingIndicator
});

export type IcMenuEvents = { onIcClear: EventName<CustomEvent<void>> };

export const IcMenu: StencilReactComponent<IcMenuElement, IcMenuEvents> = /*@__PURE__*/ createComponent<IcMenuElement, IcMenuEvents>({
    tagName: 'ic-menu',
    elementClass: IcMenuElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcClear: 'icClear' } as IcMenuEvents,
    defineCustomElement: defineIcMenu
});

export type IcMenuGroupEvents = NonNullable<unknown>;

export const IcMenuGroup: StencilReactComponent<IcMenuGroupElement, IcMenuGroupEvents> = /*@__PURE__*/ createComponent<IcMenuGroupElement, IcMenuGroupEvents>({
    tagName: 'ic-menu-group',
    elementClass: IcMenuGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcMenuGroupEvents,
    defineCustomElement: defineIcMenuGroup
});

export type IcMenuItemEvents = {
    onIcToggleChecked: EventName<CustomEvent<{
        checked: boolean;
    }>>
};

export const IcMenuItem: StencilReactComponent<IcMenuItemElement, IcMenuItemEvents> = /*@__PURE__*/ createComponent<IcMenuItemElement, IcMenuItemEvents>({
    tagName: 'ic-menu-item',
    elementClass: IcMenuItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcToggleChecked: 'icToggleChecked' } as IcMenuItemEvents,
    defineCustomElement: defineIcMenuItem
});

export type IcNavigationButtonEvents = NonNullable<unknown>;

export const IcNavigationButton: StencilReactComponent<IcNavigationButtonElement, IcNavigationButtonEvents> = /*@__PURE__*/ createComponent<IcNavigationButtonElement, IcNavigationButtonEvents>({
    tagName: 'ic-navigation-button',
    elementClass: IcNavigationButtonElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcNavigationButtonEvents,
    defineCustomElement: defineIcNavigationButton
});

export type IcNavigationGroupEvents = NonNullable<unknown>;

export const IcNavigationGroup: StencilReactComponent<IcNavigationGroupElement, IcNavigationGroupEvents> = /*@__PURE__*/ createComponent<IcNavigationGroupElement, IcNavigationGroupEvents>({
    tagName: 'ic-navigation-group',
    elementClass: IcNavigationGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcNavigationGroupEvents,
    defineCustomElement: defineIcNavigationGroup
});

export type IcNavigationItemEvents = NonNullable<unknown>;

export const IcNavigationItem: StencilReactComponent<IcNavigationItemElement, IcNavigationItemEvents> = /*@__PURE__*/ createComponent<IcNavigationItemElement, IcNavigationItemEvents>({
    tagName: 'ic-navigation-item',
    elementClass: IcNavigationItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcNavigationItemEvents,
    defineCustomElement: defineIcNavigationItem
});

export type IcNavigationMenuEvents = NonNullable<unknown>;

export const IcNavigationMenu: StencilReactComponent<IcNavigationMenuElement, IcNavigationMenuEvents> = /*@__PURE__*/ createComponent<IcNavigationMenuElement, IcNavigationMenuEvents>({
    tagName: 'ic-navigation-menu',
    elementClass: IcNavigationMenuElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcNavigationMenuEvents,
    defineCustomElement: defineIcNavigationMenu
});

export type IcPageHeaderEvents = NonNullable<unknown>;

export const IcPageHeader: StencilReactComponent<IcPageHeaderElement, IcPageHeaderEvents> = /*@__PURE__*/ createComponent<IcPageHeaderElement, IcPageHeaderEvents>({
    tagName: 'ic-page-header',
    elementClass: IcPageHeaderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcPageHeaderEvents,
    defineCustomElement: defineIcPageHeader
});

export type IcPaginationEvents = { onIcPageChange: EventName<IcPaginationCustomEvent<IcChangeEventDetail>> };

export const IcPagination: StencilReactComponent<IcPaginationElement, IcPaginationEvents> = /*@__PURE__*/ createComponent<IcPaginationElement, IcPaginationEvents>({
    tagName: 'ic-pagination',
    elementClass: IcPaginationElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcPageChange: 'icPageChange' } as IcPaginationEvents,
    defineCustomElement: defineIcPagination
});

export type IcPaginationItemEvents = NonNullable<unknown>;

export const IcPaginationItem: StencilReactComponent<IcPaginationItemElement, IcPaginationItemEvents> = /*@__PURE__*/ createComponent<IcPaginationItemElement, IcPaginationItemEvents>({
    tagName: 'ic-pagination-item',
    elementClass: IcPaginationItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcPaginationItemEvents,
    defineCustomElement: defineIcPaginationItem
});

export type IcPopoverMenuEvents = { onIcPopoverClosed: EventName<IcPopoverMenuCustomEvent<HTMLIcMenuItemElement>> };

export const IcPopoverMenu: StencilReactComponent<IcPopoverMenuElement, IcPopoverMenuEvents> = /*@__PURE__*/ createComponent<IcPopoverMenuElement, IcPopoverMenuEvents>({
    tagName: 'ic-popover-menu',
    elementClass: IcPopoverMenuElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcPopoverClosed: 'icPopoverClosed' } as IcPopoverMenuEvents,
    defineCustomElement: defineIcPopoverMenu
});

export type IcRadioGroupEvents = { onIcChange: EventName<IcRadioGroupCustomEvent<IcChangeEventDetail>> };

export const IcRadioGroup: StencilReactComponent<IcRadioGroupElement, IcRadioGroupEvents> = /*@__PURE__*/ createComponent<IcRadioGroupElement, IcRadioGroupEvents>({
    tagName: 'ic-radio-group',
    elementClass: IcRadioGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcChange: 'icChange' } as IcRadioGroupEvents,
    defineCustomElement: defineIcRadioGroup
});

export type IcRadioOptionEvents = {
    onIcCheck: EventName<IcRadioOptionCustomEvent<IcValueEventDetail>>,
    onIcSelectedChange: EventName<CustomEvent<void>>
};

export const IcRadioOption: StencilReactComponent<IcRadioOptionElement, IcRadioOptionEvents> = /*@__PURE__*/ createComponent<IcRadioOptionElement, IcRadioOptionEvents>({
    tagName: 'ic-radio-option',
    elementClass: IcRadioOptionElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onIcCheck: 'icCheck',
        onIcSelectedChange: 'icSelectedChange'
    } as IcRadioOptionEvents,
    defineCustomElement: defineIcRadioOption
});

export type IcSearchBarEvents = {
    onIcChange: EventName<IcSearchBarCustomEvent<IcValueEventDetail>>,
    onIcClear: EventName<CustomEvent<void>>,
    onIcInput: EventName<IcSearchBarCustomEvent<IcValueEventDetail>>,
    onIcOptionSelect: EventName<IcSearchBarCustomEvent<IcOptionSelectEventDetail>>,
    onIcMenuChange: EventName<IcSearchBarCustomEvent<IcMenuChangeEventDetail>>,
    onIcRetryLoad: EventName<IcSearchBarCustomEvent<IcMultiValueEventDetail>>,
    onIcSubmitSearch: EventName<IcSearchBarCustomEvent<IcValueEventDetail>>,
    onIcSearchBarBlur: EventName<IcSearchBarCustomEvent<IcSearchBarBlurEventDetail>>,
    onIcSearchBarFocus: EventName<IcSearchBarCustomEvent<IcValueEventDetail>>,
    onIcKeydown: EventName<IcSearchBarCustomEvent<{ event: KeyboardEvent }>>
};

export const IcSearchBar: StencilReactComponent<IcSearchBarElement, IcSearchBarEvents> = /*@__PURE__*/ createComponent<IcSearchBarElement, IcSearchBarEvents>({
    tagName: 'ic-search-bar',
    elementClass: IcSearchBarElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onIcChange: 'icChange',
        onIcClear: 'icClear',
        onIcInput: 'icInput',
        onIcOptionSelect: 'icOptionSelect',
        onIcMenuChange: 'icMenuChange',
        onIcRetryLoad: 'icRetryLoad',
        onIcSubmitSearch: 'icSubmitSearch',
        onIcSearchBarBlur: 'icSearchBarBlur',
        onIcSearchBarFocus: 'icSearchBarFocus',
        onIcKeydown: 'icKeydown'
    } as IcSearchBarEvents,
    defineCustomElement: defineIcSearchBar
});

export type IcSectionContainerEvents = NonNullable<unknown>;

export const IcSectionContainer: StencilReactComponent<IcSectionContainerElement, IcSectionContainerEvents> = /*@__PURE__*/ createComponent<IcSectionContainerElement, IcSectionContainerEvents>({
    tagName: 'ic-section-container',
    elementClass: IcSectionContainerElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcSectionContainerEvents,
    defineCustomElement: defineIcSectionContainer
});

export type IcSelectEvents = {
    onIcBlur: EventName<CustomEvent<void>>,
    onIcChange: EventName<IcSelectCustomEvent<IcMultiValueEventDetail>>,
    onIcClear: EventName<CustomEvent<void>>,
    onIcClose: EventName<CustomEvent<void>>,
    onIcFocus: EventName<CustomEvent<void>>,
    onIcInput: EventName<IcSelectCustomEvent<IcMultiValueEventDetail>>,
    onIcOpen: EventName<CustomEvent<void>>,
    onIcOptionSelect: EventName<IcSelectCustomEvent<IcOptionSelectEventDetail>>,
    onIcOptionDeselect: EventName<IcSelectCustomEvent<IcOptionSelectEventDetail>>,
    onIcRetryLoad: EventName<IcSelectCustomEvent<IcMultiValueEventDetail>>
};

export const IcSelect: StencilReactComponent<IcSelectElement, IcSelectEvents> = /*@__PURE__*/ createComponent<IcSelectElement, IcSelectEvents>({
    tagName: 'ic-select',
    elementClass: IcSelectElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onIcBlur: 'icBlur',
        onIcChange: 'icChange',
        onIcClear: 'icClear',
        onIcClose: 'icClose',
        onIcFocus: 'icFocus',
        onIcInput: 'icInput',
        onIcOpen: 'icOpen',
        onIcOptionSelect: 'icOptionSelect',
        onIcOptionDeselect: 'icOptionDeselect',
        onIcRetryLoad: 'icRetryLoad'
    } as IcSelectEvents,
    defineCustomElement: defineIcSelect
});

export type IcSideNavigationEvents = { onIcSideNavExpanded: EventName<IcSideNavigationCustomEvent<IcExpandedDetail>> };

export const IcSideNavigation: StencilReactComponent<IcSideNavigationElement, IcSideNavigationEvents> = /*@__PURE__*/ createComponent<IcSideNavigationElement, IcSideNavigationEvents>({
    tagName: 'ic-side-navigation',
    elementClass: IcSideNavigationElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcSideNavExpanded: 'icSideNavExpanded' } as IcSideNavigationEvents,
    defineCustomElement: defineIcSideNavigation
});

export type IcSkeletonEvents = NonNullable<unknown>;

export const IcSkeleton: StencilReactComponent<IcSkeletonElement, IcSkeletonEvents> = /*@__PURE__*/ createComponent<IcSkeletonElement, IcSkeletonEvents>({
    tagName: 'ic-skeleton',
    elementClass: IcSkeletonElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcSkeletonEvents,
    defineCustomElement: defineIcSkeleton
});

export type IcSkipLinkEvents = NonNullable<unknown>;

export const IcSkipLink: StencilReactComponent<IcSkipLinkElement, IcSkipLinkEvents> = /*@__PURE__*/ createComponent<IcSkipLinkElement, IcSkipLinkEvents>({
    tagName: 'ic-skip-link',
    elementClass: IcSkipLinkElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcSkipLinkEvents,
    defineCustomElement: defineIcSkipLink
});

export type IcStatusTagEvents = NonNullable<unknown>;

export const IcStatusTag: StencilReactComponent<IcStatusTagElement, IcStatusTagEvents> = /*@__PURE__*/ createComponent<IcStatusTagElement, IcStatusTagEvents>({
    tagName: 'ic-status-tag',
    elementClass: IcStatusTagElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcStatusTagEvents,
    defineCustomElement: defineIcStatusTag
});

export type IcStepEvents = NonNullable<unknown>;

export const IcStep: StencilReactComponent<IcStepElement, IcStepEvents> = /*@__PURE__*/ createComponent<IcStepElement, IcStepEvents>({
    tagName: 'ic-step',
    elementClass: IcStepElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcStepEvents,
    defineCustomElement: defineIcStep
});

export type IcStepperEvents = NonNullable<unknown>;

export const IcStepper: StencilReactComponent<IcStepperElement, IcStepperEvents> = /*@__PURE__*/ createComponent<IcStepperElement, IcStepperEvents>({
    tagName: 'ic-stepper',
    elementClass: IcStepperElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcStepperEvents,
    defineCustomElement: defineIcStepper
});

export type IcSwitchEvents = {
    onIcBlur: EventName<CustomEvent<void>>,
    onIcChange: EventName<IcSwitchCustomEvent<IcSwitchChangeEventDetail>>,
    onIcFocus: EventName<CustomEvent<void>>
};

export const IcSwitch: StencilReactComponent<IcSwitchElement, IcSwitchEvents> = /*@__PURE__*/ createComponent<IcSwitchElement, IcSwitchEvents>({
    tagName: 'ic-switch',
    elementClass: IcSwitchElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onIcBlur: 'icBlur',
        onIcChange: 'icChange',
        onIcFocus: 'icFocus'
    } as IcSwitchEvents,
    defineCustomElement: defineIcSwitch
});

export type IcTabEvents = NonNullable<unknown>;

export const IcTab: StencilReactComponent<IcTabElement, IcTabEvents> = /*@__PURE__*/ createComponent<IcTabElement, IcTabEvents>({
    tagName: 'ic-tab',
    elementClass: IcTabElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcTabEvents,
    defineCustomElement: defineIcTab
});

export type IcTabContextEvents = { onIcTabSelect: EventName<IcTabContextCustomEvent<IcTabSelectEventDetail>> };

export const IcTabContext: StencilReactComponent<IcTabContextElement, IcTabContextEvents> = /*@__PURE__*/ createComponent<IcTabContextElement, IcTabContextEvents>({
    tagName: 'ic-tab-context',
    elementClass: IcTabContextElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcTabSelect: 'icTabSelect' } as IcTabContextEvents,
    defineCustomElement: defineIcTabContext
});

export type IcTabGroupEvents = NonNullable<unknown>;

export const IcTabGroup: StencilReactComponent<IcTabGroupElement, IcTabGroupEvents> = /*@__PURE__*/ createComponent<IcTabGroupElement, IcTabGroupEvents>({
    tagName: 'ic-tab-group',
    elementClass: IcTabGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcTabGroupEvents,
    defineCustomElement: defineIcTabGroup
});

export type IcTabPanelEvents = NonNullable<unknown>;

export const IcTabPanel: StencilReactComponent<IcTabPanelElement, IcTabPanelEvents> = /*@__PURE__*/ createComponent<IcTabPanelElement, IcTabPanelEvents>({
    tagName: 'ic-tab-panel',
    elementClass: IcTabPanelElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcTabPanelEvents,
    defineCustomElement: defineIcTabPanel
});

export type IcTextFieldEvents = {
    onIcBlur: EventName<IcTextFieldCustomEvent<IcValueEventDetail>>,
    onIcChange: EventName<IcTextFieldCustomEvent<IcValueEventDetail>>,
    onIcFocus: EventName<IcTextFieldCustomEvent<IcValueEventDetail>>,
    onIcInput: EventName<IcTextFieldCustomEvent<IcValueEventDetail>>,
    onIcKeydown: EventName<IcTextFieldCustomEvent<{ event: KeyboardEvent }>>,
    onIcScroll: EventName<CustomEvent<any>>
};

export const IcTextField: StencilReactComponent<IcTextFieldElement, IcTextFieldEvents> = /*@__PURE__*/ createComponent<IcTextFieldElement, IcTextFieldEvents>({
    tagName: 'ic-text-field',
    elementClass: IcTextFieldElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onIcBlur: 'icBlur',
        onIcChange: 'icChange',
        onIcFocus: 'icFocus',
        onIcInput: 'icInput',
        onIcKeydown: 'icKeydown',
        onIcScroll: 'icScroll'
    } as IcTextFieldEvents,
    defineCustomElement: defineIcTextField
});

export type IcThemeEvents = { onIcThemeChange: EventName<IcThemeCustomEvent<IcThemeSettings>> };

export const IcTheme: StencilReactComponent<IcThemeElement, IcThemeEvents> = /*@__PURE__*/ createComponent<IcThemeElement, IcThemeEvents>({
    tagName: 'ic-theme',
    elementClass: IcThemeElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcThemeChange: 'icThemeChange' } as IcThemeEvents,
    defineCustomElement: defineIcTheme
});

export type IcToastEvents = { onIcDismiss: EventName<CustomEvent<void>> };

export const IcToast: StencilReactComponent<IcToastElement, IcToastEvents> = /*@__PURE__*/ createComponent<IcToastElement, IcToastEvents>({
    tagName: 'ic-toast',
    elementClass: IcToastElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcDismiss: 'icDismiss' } as IcToastEvents,
    defineCustomElement: defineIcToast
});

export type IcToastRegionEvents = NonNullable<unknown>;

export const IcToastRegion: StencilReactComponent<IcToastRegionElement, IcToastRegionEvents> = /*@__PURE__*/ createComponent<IcToastRegionElement, IcToastRegionEvents>({
    tagName: 'ic-toast-region',
    elementClass: IcToastRegionElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcToastRegionEvents,
    defineCustomElement: defineIcToastRegion
});

export type IcToggleButtonEvents = {
    onIcToggleChecked: EventName<CustomEvent<{
        checked: boolean;
    }>>
};

export const IcToggleButton: StencilReactComponent<IcToggleButtonElement, IcToggleButtonEvents> = /*@__PURE__*/ createComponent<IcToggleButtonElement, IcToggleButtonEvents>({
    tagName: 'ic-toggle-button',
    elementClass: IcToggleButtonElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcToggleChecked: 'icToggleChecked' } as IcToggleButtonEvents,
    defineCustomElement: defineIcToggleButton
});

export type IcToggleButtonGroupEvents = { onIcChange: EventName<IcToggleButtonGroupCustomEvent<IcChangeEventDetail>> };

export const IcToggleButtonGroup: StencilReactComponent<IcToggleButtonGroupElement, IcToggleButtonGroupEvents> = /*@__PURE__*/ createComponent<IcToggleButtonGroupElement, IcToggleButtonGroupEvents>({
    tagName: 'ic-toggle-button-group',
    elementClass: IcToggleButtonGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcChange: 'icChange' } as IcToggleButtonGroupEvents,
    defineCustomElement: defineIcToggleButtonGroup
});

export type IcTooltipEvents = NonNullable<unknown>;

export const IcTooltip: StencilReactComponent<IcTooltipElement, IcTooltipEvents> = /*@__PURE__*/ createComponent<IcTooltipElement, IcTooltipEvents>({
    tagName: 'ic-tooltip',
    elementClass: IcTooltipElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcTooltipEvents,
    defineCustomElement: defineIcTooltip
});

export type IcTopNavigationEvents = { onIcTopNavResized: EventName<CustomEvent<{ size: number }>> };

export const IcTopNavigation: StencilReactComponent<IcTopNavigationElement, IcTopNavigationEvents> = /*@__PURE__*/ createComponent<IcTopNavigationElement, IcTopNavigationEvents>({
    tagName: 'ic-top-navigation',
    elementClass: IcTopNavigationElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onIcTopNavResized: 'icTopNavResized' } as IcTopNavigationEvents,
    defineCustomElement: defineIcTopNavigation
});

export type IcTypographyEvents = NonNullable<unknown>;

export const IcTypography: StencilReactComponent<IcTypographyElement, IcTypographyEvents> = /*@__PURE__*/ createComponent<IcTypographyElement, IcTypographyEvents>({
    tagName: 'ic-typography',
    elementClass: IcTypographyElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as IcTypographyEvents,
    defineCustomElement: defineIcTypography
});
