/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

// @ts-ignore - ignore potential type issues as the project is importing itself
import * as clientComponents from 'react';

import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent, type HydrateModule, type ReactWebComponent, type SerializeShadowRootOptions } from '@stencil/react-output-target/ssr';
import { type IcButtonCustomEvent, type IcChangeEventDetail, type IcCheckboxGroupCustomEvent, type IcExpandedDetail, type IcMenuChangeEventDetail, type IcMultiValueEventDetail, type IcOptionSelectEventDetail, type IcPaginationCustomEvent, type IcPopoverMenuCustomEvent, type IcRadioGroupCustomEvent, type IcRadioOptionCustomEvent, type IcSearchBarBlurEventDetail, type IcSearchBarCustomEvent, type IcSelectCustomEvent, type IcSideNavigationCustomEvent, type IcSwitchChangeEventDetail, type IcSwitchCustomEvent, type IcTabContextCustomEvent, type IcTabSelectEventDetail, type IcTextFieldCustomEvent, type IcThemeCustomEvent, type IcThemeSettings, type IcToggleButtonGroupCustomEvent, type IcValueEventDetail } from "@ukic/web-components";
import { IcAccordionGroup as IcAccordionGroupElement } from "@ukic/web-components/dist/components/ic-accordion-group.js";
import { IcAccordion as IcAccordionElement } from "@ukic/web-components/dist/components/ic-accordion.js";
import { IcAlert as IcAlertElement } from "@ukic/web-components/dist/components/ic-alert.js";
import { IcBackToTop as IcBackToTopElement } from "@ukic/web-components/dist/components/ic-back-to-top.js";
import { IcBadge as IcBadgeElement } from "@ukic/web-components/dist/components/ic-badge.js";
import { IcBreadcrumbGroup as IcBreadcrumbGroupElement } from "@ukic/web-components/dist/components/ic-breadcrumb-group.js";
import { IcBreadcrumb as IcBreadcrumbElement } from "@ukic/web-components/dist/components/ic-breadcrumb.js";
import { IcButton as IcButtonElement } from "@ukic/web-components/dist/components/ic-button.js";
import { IcCardVertical as IcCardVerticalElement } from "@ukic/web-components/dist/components/ic-card-vertical.js";
import { IcCheckboxGroup as IcCheckboxGroupElement } from "@ukic/web-components/dist/components/ic-checkbox-group.js";
import { IcCheckbox as IcCheckboxElement } from "@ukic/web-components/dist/components/ic-checkbox.js";
import { IcChip as IcChipElement } from "@ukic/web-components/dist/components/ic-chip.js";
import { IcClassificationBanner as IcClassificationBannerElement } from "@ukic/web-components/dist/components/ic-classification-banner.js";
import { IcDataList as IcDataListElement } from "@ukic/web-components/dist/components/ic-data-list.js";
import { IcDataRow as IcDataRowElement } from "@ukic/web-components/dist/components/ic-data-row.js";
import { IcDialog as IcDialogElement } from "@ukic/web-components/dist/components/ic-dialog.js";
import { IcDivider as IcDividerElement } from "@ukic/web-components/dist/components/ic-divider.js";
import { IcEmptyState as IcEmptyStateElement } from "@ukic/web-components/dist/components/ic-empty-state.js";
import { IcFooterLinkGroup as IcFooterLinkGroupElement } from "@ukic/web-components/dist/components/ic-footer-link-group.js";
import { IcFooterLink as IcFooterLinkElement } from "@ukic/web-components/dist/components/ic-footer-link.js";
import { IcFooter as IcFooterElement } from "@ukic/web-components/dist/components/ic-footer.js";
import { IcHero as IcHeroElement } from "@ukic/web-components/dist/components/ic-hero.js";
import { IcHorizontalScroll as IcHorizontalScrollElement } from "@ukic/web-components/dist/components/ic-horizontal-scroll.js";
import { IcInputComponentContainer as IcInputComponentContainerElement } from "@ukic/web-components/dist/components/ic-input-component-container.js";
import { IcInputContainer as IcInputContainerElement } from "@ukic/web-components/dist/components/ic-input-container.js";
import { IcInputLabel as IcInputLabelElement } from "@ukic/web-components/dist/components/ic-input-label.js";
import { IcInputValidation as IcInputValidationElement } from "@ukic/web-components/dist/components/ic-input-validation.js";
import { IcLink as IcLinkElement } from "@ukic/web-components/dist/components/ic-link.js";
import { IcLoadingIndicator as IcLoadingIndicatorElement } from "@ukic/web-components/dist/components/ic-loading-indicator.js";
import { IcMenuGroup as IcMenuGroupElement } from "@ukic/web-components/dist/components/ic-menu-group.js";
import { IcMenuItem as IcMenuItemElement } from "@ukic/web-components/dist/components/ic-menu-item.js";
import { IcMenu as IcMenuElement } from "@ukic/web-components/dist/components/ic-menu.js";
import { IcNavigationButton as IcNavigationButtonElement } from "@ukic/web-components/dist/components/ic-navigation-button.js";
import { IcNavigationGroup as IcNavigationGroupElement } from "@ukic/web-components/dist/components/ic-navigation-group.js";
import { IcNavigationItem as IcNavigationItemElement } from "@ukic/web-components/dist/components/ic-navigation-item.js";
import { IcNavigationMenu as IcNavigationMenuElement } from "@ukic/web-components/dist/components/ic-navigation-menu.js";
import { IcPageHeader as IcPageHeaderElement } from "@ukic/web-components/dist/components/ic-page-header.js";
import { IcPaginationItem as IcPaginationItemElement } from "@ukic/web-components/dist/components/ic-pagination-item.js";
import { IcPagination as IcPaginationElement } from "@ukic/web-components/dist/components/ic-pagination.js";
import { IcPopoverMenu as IcPopoverMenuElement } from "@ukic/web-components/dist/components/ic-popover-menu.js";
import { IcRadioGroup as IcRadioGroupElement } from "@ukic/web-components/dist/components/ic-radio-group.js";
import { IcRadioOption as IcRadioOptionElement } from "@ukic/web-components/dist/components/ic-radio-option.js";
import { IcSearchBar as IcSearchBarElement } from "@ukic/web-components/dist/components/ic-search-bar.js";
import { IcSectionContainer as IcSectionContainerElement } from "@ukic/web-components/dist/components/ic-section-container.js";
import { IcSelect as IcSelectElement } from "@ukic/web-components/dist/components/ic-select.js";
import { IcSideNavigation as IcSideNavigationElement } from "@ukic/web-components/dist/components/ic-side-navigation.js";
import { IcSkeleton as IcSkeletonElement } from "@ukic/web-components/dist/components/ic-skeleton.js";
import { IcSkipLink as IcSkipLinkElement } from "@ukic/web-components/dist/components/ic-skip-link.js";
import { IcStatusTag as IcStatusTagElement } from "@ukic/web-components/dist/components/ic-status-tag.js";
import { IcStep as IcStepElement } from "@ukic/web-components/dist/components/ic-step.js";
import { IcStepper as IcStepperElement } from "@ukic/web-components/dist/components/ic-stepper.js";
import { IcSwitch as IcSwitchElement } from "@ukic/web-components/dist/components/ic-switch.js";
import { IcTabContext as IcTabContextElement } from "@ukic/web-components/dist/components/ic-tab-context.js";
import { IcTabGroup as IcTabGroupElement } from "@ukic/web-components/dist/components/ic-tab-group.js";
import { IcTabPanel as IcTabPanelElement } from "@ukic/web-components/dist/components/ic-tab-panel.js";
import { IcTab as IcTabElement } from "@ukic/web-components/dist/components/ic-tab.js";
import { IcTextField as IcTextFieldElement } from "@ukic/web-components/dist/components/ic-text-field.js";
import { IcTheme as IcThemeElement } from "@ukic/web-components/dist/components/ic-theme.js";
import { IcToastRegion as IcToastRegionElement } from "@ukic/web-components/dist/components/ic-toast-region.js";
import { IcToast as IcToastElement } from "@ukic/web-components/dist/components/ic-toast.js";
import { IcToggleButtonGroup as IcToggleButtonGroupElement } from "@ukic/web-components/dist/components/ic-toggle-button-group.js";
import { IcToggleButton as IcToggleButtonElement } from "@ukic/web-components/dist/components/ic-toggle-button.js";
import { IcTooltip as IcTooltipElement } from "@ukic/web-components/dist/components/ic-tooltip.js";
import { IcTopNavigation as IcTopNavigationElement } from "@ukic/web-components/dist/components/ic-top-navigation.js";
import { IcTypography as IcTypographyElement } from "@ukic/web-components/dist/components/ic-typography.js";

export const serializeShadowRoot: SerializeShadowRootOptions = { default: "declarative-shadow-dom" };

export type IcAccordionEvents = NonNullable<unknown>;

export const IcAccordion: StencilReactComponent<IcAccordionElement, IcAccordionEvents> = /*@__PURE__*/ createComponent<IcAccordionElement, IcAccordionEvents>({
    tagName: 'ic-accordion',
    properties: {
        disabled: 'disabled',
        expanded: 'expanded',
        heading: 'heading',
        message: 'message',
        size: 'size',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcAccordion as ReactWebComponent<IcAccordionElement, IcAccordionEvents>,
    serializeShadowRoot,
});

export type IcAccordionGroupEvents = NonNullable<unknown>;

export const IcAccordionGroup: StencilReactComponent<IcAccordionGroupElement, IcAccordionGroupEvents> = /*@__PURE__*/ createComponent<IcAccordionGroupElement, IcAccordionGroupEvents>({
    tagName: 'ic-accordion-group',
    properties: {
        accessibleButtonLabel: 'accessible-button-label',
        theme: 'theme',
        expanded: 'expanded',
        label: 'label',
        singleExpansion: 'single-expansion',
        size: 'size'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcAccordionGroup as ReactWebComponent<IcAccordionGroupElement, IcAccordionGroupEvents>,
    serializeShadowRoot,
});

export type IcAlertEvents = { onIcDismiss: EventName<CustomEvent<void>> };

export const IcAlert: StencilReactComponent<IcAlertElement, IcAlertEvents> = /*@__PURE__*/ createComponent<IcAlertElement, IcAlertEvents>({
    tagName: 'ic-alert',
    properties: {
        announced: 'announced',
        dismissible: 'dismissible',
        heading: 'heading',
        message: 'message',
        showDefaultIcon: 'show-default-icon',
        theme: 'theme',
        titleAbove: 'title-above',
        variant: 'variant'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcAlert as ReactWebComponent<IcAlertElement, IcAlertEvents>,
    serializeShadowRoot,
});

export type IcBackToTopEvents = NonNullable<unknown>;

export const IcBackToTop: StencilReactComponent<IcBackToTopElement, IcBackToTopEvents> = /*@__PURE__*/ createComponent<IcBackToTopElement, IcBackToTopEvents>({
    tagName: 'ic-back-to-top',
    properties: {
        position: 'position',
        target: 'target',
        theme: 'theme',
        variant: 'variant'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcBackToTop as ReactWebComponent<IcBackToTopElement, IcBackToTopEvents>,
    serializeShadowRoot,
});

export type IcBadgeEvents = NonNullable<unknown>;

export const IcBadge: StencilReactComponent<IcBadgeElement, IcBadgeEvents> = /*@__PURE__*/ createComponent<IcBadgeElement, IcBadgeEvents>({
    tagName: 'ic-badge',
    properties: {
        accessibleLabel: 'accessible-label',
        customColor: 'custom-color',
        maxNumber: 'max-number',
        position: 'position',
        size: 'size',
        label: 'label',
        theme: 'theme',
        type: 'type',
        variant: 'variant',
        visible: 'visible'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcBadge as ReactWebComponent<IcBadgeElement, IcBadgeEvents>,
    serializeShadowRoot,
});

export type IcBreadcrumbEvents = NonNullable<unknown>;

export const IcBreadcrumb: StencilReactComponent<IcBreadcrumbElement, IcBreadcrumbEvents> = /*@__PURE__*/ createComponent<IcBreadcrumbElement, IcBreadcrumbEvents>({
    tagName: 'ic-breadcrumb',
    properties: {
        current: 'current',
        href: 'href',
        monochrome: 'monochrome',
        pageTitle: 'page-title',
        showBackIcon: 'show-back-icon',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcBreadcrumb as ReactWebComponent<IcBreadcrumbElement, IcBreadcrumbEvents>,
    serializeShadowRoot,
});

export type IcBreadcrumbGroupEvents = NonNullable<unknown>;

export const IcBreadcrumbGroup: StencilReactComponent<IcBreadcrumbGroupElement, IcBreadcrumbGroupEvents> = /*@__PURE__*/ createComponent<IcBreadcrumbGroupElement, IcBreadcrumbGroupEvents>({
    tagName: 'ic-breadcrumb-group',
    properties: {
        backBreadcrumbOnly: 'back-breadcrumb-only',
        collapsed: 'collapsed',
        monochrome: 'monochrome',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcBreadcrumbGroup as ReactWebComponent<IcBreadcrumbGroupElement, IcBreadcrumbGroupEvents>,
    serializeShadowRoot,
});

export type IcButtonEvents = {
    onIcBlur: EventName<CustomEvent<void>>,
    onIcFileSelection: EventName<IcButtonCustomEvent<FileList>>,
    onIcFocus: EventName<CustomEvent<void>>
};

export const IcButton: StencilReactComponent<IcButtonElement, IcButtonEvents> = /*@__PURE__*/ createComponent<IcButtonElement, IcButtonEvents>({
    tagName: 'ic-button',
    properties: {
        accept: 'accept',
        ariaControlsId: 'aria-controls-id',
        ariaOwnsId: 'aria-owns-id',
        disabled: 'disabled',
        disableTooltip: 'disable-tooltip',
        download: 'download',
        dropdown: 'dropdown',
        dropdownExpanded: 'dropdown-expanded',
        fileUpload: 'file-upload',
        fileInputName: 'file-input-name',
        form: 'form',
        formaction: 'formaction',
        formenctype: 'formenctype',
        formmethod: 'formmethod',
        formnovalidate: 'formnovalidate',
        formtarget: 'formtarget',
        fullWidth: 'full-width',
        href: 'href',
        hreflang: 'hreflang',
        loading: 'loading',
        monochrome: 'monochrome',
        multiple: 'multiple',
        referrerpolicy: 'referrerpolicy',
        rel: 'rel',
        selectedFiles: 'selected-files',
        size: 'size',
        target: 'target',
        theme: 'theme',
        tooltipPlacement: 'tooltip-placement',
        transparentBackground: 'transparent-background',
        type: 'type',
        variant: 'variant'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcButton as ReactWebComponent<IcButtonElement, IcButtonEvents>,
    serializeShadowRoot,
});

export type IcCardVerticalEvents = NonNullable<unknown>;

export const IcCardVertical: StencilReactComponent<IcCardVerticalElement, IcCardVerticalEvents> = /*@__PURE__*/ createComponent<IcCardVerticalElement, IcCardVerticalEvents>({
    tagName: 'ic-card-vertical',
    properties: {
        clickable: 'clickable',
        disabled: 'disabled',
        expandable: 'expandable',
        fullWidth: 'full-width',
        heading: 'heading',
        href: 'href',
        hreflang: 'hreflang',
        message: 'message',
        referrerpolicy: 'referrerpolicy',
        rel: 'rel',
        subheading: 'subheading',
        target: 'target',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcCardVertical as ReactWebComponent<IcCardVerticalElement, IcCardVerticalEvents>,
    serializeShadowRoot,
});

export type IcCheckboxEvents = { onIcCheck: EventName<CustomEvent<void>> };

export const IcCheckbox: StencilReactComponent<IcCheckboxElement, IcCheckboxEvents> = /*@__PURE__*/ createComponent<IcCheckboxElement, IcCheckboxEvents>({
    tagName: 'ic-checkbox',
    properties: {
        additionalFieldDisplay: 'additional-field-display',
        checked: 'checked',
        disabled: 'disabled',
        dynamicText: 'dynamic-text',
        form: 'form',
        groupLabel: 'group-label',
        hideLabel: 'hide-label',
        indeterminate: 'indeterminate',
        label: 'label',
        name: 'name',
        nativeIndeterminateBehaviour: 'native-indeterminate-behaviour',
        size: 'size',
        theme: 'theme',
        value: 'value'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcCheckbox as ReactWebComponent<IcCheckboxElement, IcCheckboxEvents>,
    serializeShadowRoot,
});

export type IcCheckboxGroupEvents = { onIcChange: EventName<IcCheckboxGroupCustomEvent<IcChangeEventDetail>> };

export const IcCheckboxGroup: StencilReactComponent<IcCheckboxGroupElement, IcCheckboxGroupEvents> = /*@__PURE__*/ createComponent<IcCheckboxGroupElement, IcCheckboxGroupEvents>({
    tagName: 'ic-checkbox-group',
    properties: {
        disabled: 'disabled',
        helperText: 'helper-text',
        hideLabel: 'hide-label',
        label: 'label',
        name: 'name',
        required: 'required',
        size: 'size',
        theme: 'theme',
        validationStatus: 'validation-status',
        validationText: 'validation-text'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcCheckboxGroup as ReactWebComponent<IcCheckboxGroupElement, IcCheckboxGroupEvents>,
    serializeShadowRoot,
});

export type IcChipEvents = { onIcDismiss: EventName<CustomEvent<void>> };

export const IcChip: StencilReactComponent<IcChipElement, IcChipEvents> = /*@__PURE__*/ createComponent<IcChipElement, IcChipEvents>({
    tagName: 'ic-chip',
    properties: {
        customColor: 'custom-color',
        disabled: 'disabled',
        dismissible: 'dismissible',
        dismissLabel: 'dismiss-label',
        label: 'label',
        size: 'size',
        theme: 'theme',
        transparentBackground: 'transparent-background',
        variant: 'variant'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcChip as ReactWebComponent<IcChipElement, IcChipEvents>,
    serializeShadowRoot,
});

export type IcClassificationBannerEvents = NonNullable<unknown>;

export const IcClassificationBanner: StencilReactComponent<IcClassificationBannerElement, IcClassificationBannerEvents> = /*@__PURE__*/ createComponent<IcClassificationBannerElement, IcClassificationBannerEvents>({
    tagName: 'ic-classification-banner',
    properties: {
        additionalSelectors: 'additional-selectors',
        classification: 'classification',
        country: 'country',
        inline: 'inline',
        upTo: 'up-to'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcClassificationBanner as ReactWebComponent<IcClassificationBannerElement, IcClassificationBannerEvents>,
    serializeShadowRoot,
});

export type IcDataListEvents = NonNullable<unknown>;

export const IcDataList: StencilReactComponent<IcDataListElement, IcDataListEvents> = /*@__PURE__*/ createComponent<IcDataListElement, IcDataListEvents>({
    tagName: 'ic-data-list',
    properties: {
        heading: 'heading',
        size: 'size',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcDataList as ReactWebComponent<IcDataListElement, IcDataListEvents>,
    serializeShadowRoot,
});

export type IcDataRowEvents = NonNullable<unknown>;

export const IcDataRow: StencilReactComponent<IcDataRowElement, IcDataRowEvents> = /*@__PURE__*/ createComponent<IcDataRowElement, IcDataRowEvents>({
    tagName: 'ic-data-row',
    properties: {
        label: 'label',
        size: 'size',
        theme: 'theme',
        value: 'value'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcDataRow as ReactWebComponent<IcDataRowElement, IcDataRowEvents>,
    serializeShadowRoot,
});

export type IcDialogEvents = {
    onIcDialogCancelled: EventName<CustomEvent<void>>,
    onIcDialogClosed: EventName<CustomEvent<void>>,
    onIcDialogConfirmed: EventName<CustomEvent<void>>,
    onIcDialogOpened: EventName<CustomEvent<void>>
};

export const IcDialog: StencilReactComponent<IcDialogElement, IcDialogEvents> = /*@__PURE__*/ createComponent<IcDialogElement, IcDialogEvents>({
    tagName: 'ic-dialog',
    properties: {
        closeOnBackdropClick: 'close-on-backdrop-click',
        destructive: 'destructive',
        dismissLabel: 'dismiss-label',
        disableHeightConstraint: 'disable-height-constraint',
        disableWidthConstraint: 'disable-width-constraint',
        hideCloseButton: 'hide-close-button',
        hideDefaultControls: 'hide-default-controls',
        heading: 'heading',
        label: 'label',
        open: 'open',
        size: 'size',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcDialog as ReactWebComponent<IcDialogElement, IcDialogEvents>,
    serializeShadowRoot,
});

export type IcDividerEvents = NonNullable<unknown>;

export const IcDivider: StencilReactComponent<IcDividerElement, IcDividerEvents> = /*@__PURE__*/ createComponent<IcDividerElement, IcDividerEvents>({
    tagName: 'ic-divider',
    properties: {
        borderStyle: 'border-style',
        label: 'label',
        labelPlacement: 'label-placement',
        monochrome: 'monochrome',
        orientation: 'orientation',
        theme: 'theme',
        weight: 'weight'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcDivider as ReactWebComponent<IcDividerElement, IcDividerEvents>,
    serializeShadowRoot,
});

export type IcEmptyStateEvents = NonNullable<unknown>;

export const IcEmptyState: StencilReactComponent<IcEmptyStateElement, IcEmptyStateEvents> = /*@__PURE__*/ createComponent<IcEmptyStateElement, IcEmptyStateEvents>({
    tagName: 'ic-empty-state',
    properties: {
        aligned: 'aligned',
        body: 'body',
        maxLines: 'max-lines',
        heading: 'heading',
        imageSize: 'image-size',
        subheading: 'subheading',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcEmptyState as ReactWebComponent<IcEmptyStateElement, IcEmptyStateEvents>,
    serializeShadowRoot,
});

export type IcFooterEvents = NonNullable<unknown>;

export const IcFooter: StencilReactComponent<IcFooterElement, IcFooterEvents> = /*@__PURE__*/ createComponent<IcFooterElement, IcFooterEvents>({
    tagName: 'ic-footer',
    properties: {
        aligned: 'aligned',
        breakpoint: 'breakpoint',
        caption: 'caption',
        copyright: 'copyright',
        description: 'description',
        groupLinks: 'group-links'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcFooter as ReactWebComponent<IcFooterElement, IcFooterEvents>,
    serializeShadowRoot,
});

export type IcFooterLinkEvents = NonNullable<unknown>;

export const IcFooterLink: StencilReactComponent<IcFooterLinkElement, IcFooterLinkEvents> = /*@__PURE__*/ createComponent<IcFooterLinkElement, IcFooterLinkEvents>({
    tagName: 'ic-footer-link',
    properties: {
        download: 'download',
        href: 'href',
        hreflang: 'hreflang',
        referrerpolicy: 'referrerpolicy',
        rel: 'rel',
        target: 'target'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcFooterLink as ReactWebComponent<IcFooterLinkElement, IcFooterLinkEvents>,
    serializeShadowRoot,
});

export type IcFooterLinkGroupEvents = NonNullable<unknown>;

export const IcFooterLinkGroup: StencilReactComponent<IcFooterLinkGroupElement, IcFooterLinkGroupEvents> = /*@__PURE__*/ createComponent<IcFooterLinkGroupElement, IcFooterLinkGroupEvents>({
    tagName: 'ic-footer-link-group',
    properties: { label: 'label' },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcFooterLinkGroup as ReactWebComponent<IcFooterLinkGroupElement, IcFooterLinkGroupEvents>,
    serializeShadowRoot,
});

export type IcHeroEvents = NonNullable<unknown>;

export const IcHero: StencilReactComponent<IcHeroElement, IcHeroEvents> = /*@__PURE__*/ createComponent<IcHeroElement, IcHeroEvents>({
    tagName: 'ic-hero',
    properties: {
        aligned: 'aligned',
        backgroundImage: 'background-image',
        contentAligned: 'content-aligned',
        disableBackgroundParallax: 'disable-background-parallax',
        heading: 'heading',
        secondaryHeading: 'secondary-heading',
        secondarySubheading: 'secondary-subheading',
        size: 'size',
        subheading: 'subheading'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcHero as ReactWebComponent<IcHeroElement, IcHeroEvents>,
    serializeShadowRoot,
});

export type IcHorizontalScrollEvents = NonNullable<unknown>;

export const IcHorizontalScroll: StencilReactComponent<IcHorizontalScrollElement, IcHorizontalScrollEvents> = /*@__PURE__*/ createComponent<IcHorizontalScrollElement, IcHorizontalScrollEvents>({
    tagName: 'ic-horizontal-scroll',
    properties: {
        appearance: 'appearance',
        monochrome: 'monochrome',
        theme: 'theme',
        focusTrigger: 'focus-trigger'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcHorizontalScroll as ReactWebComponent<IcHorizontalScrollElement, IcHorizontalScrollEvents>,
    serializeShadowRoot,
});

export type IcInputComponentContainerEvents = NonNullable<unknown>;

export const IcInputComponentContainer: StencilReactComponent<IcInputComponentContainerElement, IcInputComponentContainerEvents> = /*@__PURE__*/ createComponent<IcInputComponentContainerElement, IcInputComponentContainerEvents>({
    tagName: 'ic-input-component-container',
    properties: {
        disabled: 'disabled',
        fullWidth: 'full-width',
        multiLine: 'multi-line',
        readonly: 'readonly',
        size: 'size',
        validationInline: 'validation-inline',
        validationStatus: 'validation-status'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcInputComponentContainer as ReactWebComponent<IcInputComponentContainerElement, IcInputComponentContainerEvents>,
    serializeShadowRoot,
});

export type IcInputContainerEvents = NonNullable<unknown>;

export const IcInputContainer: StencilReactComponent<IcInputContainerElement, IcInputContainerEvents> = /*@__PURE__*/ createComponent<IcInputContainerElement, IcInputContainerEvents>({
    tagName: 'ic-input-container',
    properties: {
        disabled: 'disabled',
        readonly: 'readonly'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcInputContainer as ReactWebComponent<IcInputContainerElement, IcInputContainerEvents>,
    serializeShadowRoot,
});

export type IcInputLabelEvents = NonNullable<unknown>;

export const IcInputLabel: StencilReactComponent<IcInputLabelElement, IcInputLabelEvents> = /*@__PURE__*/ createComponent<IcInputLabelElement, IcInputLabelEvents>({
    tagName: 'ic-input-label',
    properties: {
        disabled: 'disabled',
        for: 'for',
        helperText: 'helper-text',
        hideLabel: 'hide-label',
        label: 'label',
        readonly: 'readonly',
        required: 'required',
        status: 'status',
        useLabelTag: 'use-label-tag'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcInputLabel as ReactWebComponent<IcInputLabelElement, IcInputLabelEvents>,
    serializeShadowRoot,
});

export type IcInputValidationEvents = NonNullable<unknown>;

export const IcInputValidation: StencilReactComponent<IcInputValidationElement, IcInputValidationEvents> = /*@__PURE__*/ createComponent<IcInputValidationElement, IcInputValidationEvents>({
    tagName: 'ic-input-validation',
    properties: {
        ariaLiveMode: 'aria-live-mode',
        for: 'for',
        fullWidth: 'full-width',
        message: 'message',
        status: 'status'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcInputValidation as ReactWebComponent<IcInputValidationElement, IcInputValidationEvents>,
    serializeShadowRoot,
});

export type IcLinkEvents = NonNullable<unknown>;

export const IcLink: StencilReactComponent<IcLinkElement, IcLinkEvents> = /*@__PURE__*/ createComponent<IcLinkElement, IcLinkEvents>({
    tagName: 'ic-link',
    properties: {
        download: 'download',
        href: 'href',
        hreflang: 'hreflang',
        monochrome: 'monochrome',
        referrerpolicy: 'referrerpolicy',
        rel: 'rel',
        target: 'target',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcLink as ReactWebComponent<IcLinkElement, IcLinkEvents>,
    serializeShadowRoot,
});

export type IcLoadingIndicatorEvents = NonNullable<unknown>;

export const IcLoadingIndicator: StencilReactComponent<IcLoadingIndicatorElement, IcLoadingIndicatorEvents> = /*@__PURE__*/ createComponent<IcLoadingIndicatorElement, IcLoadingIndicatorEvents>({
    tagName: 'ic-loading-indicator',
    properties: {
        description: 'description',
        fullWidth: 'full-width',
        innerLabel: 'inner-label',
        label: 'label',
        labelDuration: 'label-duration',
        max: 'max',
        min: 'min',
        monochrome: 'monochrome',
        progress: 'progress',
        size: 'size',
        theme: 'theme',
        type: 'type'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcLoadingIndicator as ReactWebComponent<IcLoadingIndicatorElement, IcLoadingIndicatorEvents>,
    serializeShadowRoot,
});

export type IcMenuEvents = { onIcClear: EventName<CustomEvent<void>> };

export const IcMenu: StencilReactComponent<IcMenuElement, IcMenuEvents> = /*@__PURE__*/ createComponent<IcMenuElement, IcMenuEvents>({
    tagName: 'ic-menu',
    properties: {
        activationType: 'activation-type',
        anchorEl: 'anchor-el',
        autofocusOnSelected: 'autofocus-on-selected',
        closeOnSelect: 'close-on-select',
        fullWidth: 'full-width',
        inputEl: 'input-el',
        inputLabel: 'input-label',
        labelField: 'label-field',
        menuId: 'menu-id',
        open: 'open',
        parentEl: 'parent-el',
        searchMode: 'search-mode',
        selectOnEnter: 'select-on-enter',
        size: 'size',
        options: 'options',
        value: 'value',
        valueField: 'value-field'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcMenu as ReactWebComponent<IcMenuElement, IcMenuEvents>,
    serializeShadowRoot,
});

export type IcMenuGroupEvents = NonNullable<unknown>;

export const IcMenuGroup: StencilReactComponent<IcMenuGroupElement, IcMenuGroupEvents> = /*@__PURE__*/ createComponent<IcMenuGroupElement, IcMenuGroupEvents>({
    tagName: 'ic-menu-group',
    properties: { label: 'label' },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcMenuGroup as ReactWebComponent<IcMenuGroupElement, IcMenuGroupEvents>,
    serializeShadowRoot,
});

export type IcMenuItemEvents = {
    onIcToggleChecked: EventName<CustomEvent<{
        checked: boolean;
    }>>
};

export const IcMenuItem: StencilReactComponent<IcMenuItemElement, IcMenuItemEvents> = /*@__PURE__*/ createComponent<IcMenuItemElement, IcMenuItemEvents>({
    tagName: 'ic-menu-item',
    properties: {
        checked: 'checked',
        description: 'description',
        disabled: 'disabled',
        href: 'href',
        hreflang: 'hreflang',
        keyboardShortcutLabel: 'keyboard-shortcut-label',
        label: 'label',
        referrerpolicy: 'referrerpolicy',
        rel: 'rel',
        submenuTriggerFor: 'submenu-trigger-for',
        target: 'target',
        variant: 'variant'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcMenuItem as ReactWebComponent<IcMenuItemElement, IcMenuItemEvents>,
    serializeShadowRoot,
});

export type IcNavigationButtonEvents = NonNullable<unknown>;

export const IcNavigationButton: StencilReactComponent<IcNavigationButtonElement, IcNavigationButtonEvents> = /*@__PURE__*/ createComponent<IcNavigationButtonElement, IcNavigationButtonEvents>({
    tagName: 'ic-navigation-button',
    properties: {
        download: 'download',
        href: 'href',
        hreflang: 'hreflang',
        label: 'label',
        referrerpolicy: 'referrerpolicy',
        rel: 'rel',
        target: 'target',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcNavigationButton as ReactWebComponent<IcNavigationButtonElement, IcNavigationButtonEvents>,
    serializeShadowRoot,
});

export type IcNavigationGroupEvents = NonNullable<unknown>;

export const IcNavigationGroup: StencilReactComponent<IcNavigationGroupElement, IcNavigationGroupEvents> = /*@__PURE__*/ createComponent<IcNavigationGroupElement, IcNavigationGroupEvents>({
    tagName: 'ic-navigation-group',
    properties: {
        expandable: 'expandable',
        expanded: 'expanded',
        label: 'label',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcNavigationGroup as ReactWebComponent<IcNavigationGroupElement, IcNavigationGroupEvents>,
    serializeShadowRoot,
});

export type IcNavigationItemEvents = NonNullable<unknown>;

export const IcNavigationItem: StencilReactComponent<IcNavigationItemElement, IcNavigationItemEvents> = /*@__PURE__*/ createComponent<IcNavigationItemElement, IcNavigationItemEvents>({
    tagName: 'ic-navigation-item',
    properties: {
        collapsedIconLabel: 'collapsed-icon-label',
        displayNavigationTooltip: 'display-navigation-tooltip',
        download: 'download',
        expandable: 'expandable',
        href: 'href',
        hreflang: 'hreflang',
        label: 'label',
        rel: 'rel',
        referrerpolicy: 'referrerpolicy',
        selected: 'selected',
        target: 'target',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcNavigationItem as ReactWebComponent<IcNavigationItemElement, IcNavigationItemEvents>,
    serializeShadowRoot,
});

export type IcNavigationMenuEvents = NonNullable<unknown>;

export const IcNavigationMenu: StencilReactComponent<IcNavigationMenuElement, IcNavigationMenuEvents> = /*@__PURE__*/ createComponent<IcNavigationMenuElement, IcNavigationMenuEvents>({
    tagName: 'ic-navigation-menu',
    properties: {
        status: 'status',
        theme: 'theme',
        version: 'version'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcNavigationMenu as ReactWebComponent<IcNavigationMenuElement, IcNavigationMenuEvents>,
    serializeShadowRoot,
});

export type IcPageHeaderEvents = NonNullable<unknown>;

export const IcPageHeader: StencilReactComponent<IcPageHeaderElement, IcPageHeaderEvents> = /*@__PURE__*/ createComponent<IcPageHeaderElement, IcPageHeaderEvents>({
    tagName: 'ic-page-header',
    properties: {
        aligned: 'aligned',
        border: 'border',
        heading: 'heading',
        reverseOrder: 'reverse-order',
        size: 'size',
        sticky: 'sticky',
        stickyDesktopOnly: 'sticky-desktop-only',
        subheading: 'subheading',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcPageHeader as ReactWebComponent<IcPageHeaderElement, IcPageHeaderEvents>,
    serializeShadowRoot,
});

export type IcPaginationEvents = { onIcPageChange: EventName<IcPaginationCustomEvent<IcChangeEventDetail>> };

export const IcPagination: StencilReactComponent<IcPaginationElement, IcPaginationEvents> = /*@__PURE__*/ createComponent<IcPaginationElement, IcPaginationEvents>({
    tagName: 'ic-pagination',
    properties: {
        adjacentPageCount: 'adjacent-page-count',
        boundaryPageCount: 'boundary-page-count',
        defaultPage: 'default-page',
        disabled: 'disabled',
        hideCurrentPage: 'hide-current-page',
        hideFirstAndLastPageButton: 'hide-first-and-last-page-button',
        label: 'label',
        monochrome: 'monochrome',
        pages: 'pages',
        theme: 'theme',
        type: 'type',
        currentPage: 'current-page'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcPagination as ReactWebComponent<IcPaginationElement, IcPaginationEvents>,
    serializeShadowRoot,
});

export type IcPaginationItemEvents = NonNullable<unknown>;

export const IcPaginationItem: StencilReactComponent<IcPaginationItemElement, IcPaginationItemEvents> = /*@__PURE__*/ createComponent<IcPaginationItemElement, IcPaginationItemEvents>({
    tagName: 'ic-pagination-item',
    properties: {
        disabled: 'disabled',
        label: 'label',
        monochrome: 'monochrome',
        page: 'page',
        selected: 'selected',
        theme: 'theme',
        type: 'type'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcPaginationItem as ReactWebComponent<IcPaginationItemElement, IcPaginationItemEvents>,
    serializeShadowRoot,
});

export type IcPopoverMenuEvents = { onIcPopoverClosed: EventName<IcPopoverMenuCustomEvent<HTMLIcMenuItemElement>> };

export const IcPopoverMenu: StencilReactComponent<IcPopoverMenuElement, IcPopoverMenuEvents> = /*@__PURE__*/ createComponent<IcPopoverMenuElement, IcPopoverMenuEvents>({
    tagName: 'ic-popover-menu',
    properties: {
        anchor: 'anchor',
        parentLabel: 'parent-label',
        parentPopover: 'parent-popover',
        submenuId: 'submenu-id',
        submenuLevel: 'submenu-level',
        theme: 'theme',
        open: 'open'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcPopoverMenu as ReactWebComponent<IcPopoverMenuElement, IcPopoverMenuEvents>,
    serializeShadowRoot,
});

export type IcRadioGroupEvents = { onIcChange: EventName<IcRadioGroupCustomEvent<IcChangeEventDetail>> };

export const IcRadioGroup: StencilReactComponent<IcRadioGroupElement, IcRadioGroupEvents> = /*@__PURE__*/ createComponent<IcRadioGroupElement, IcRadioGroupEvents>({
    tagName: 'ic-radio-group',
    properties: {
        disabled: 'disabled',
        helperText: 'helper-text',
        hideLabel: 'hide-label',
        label: 'label',
        name: 'name',
        orientation: 'orientation',
        required: 'required',
        size: 'size',
        validationStatus: 'validation-status',
        validationText: 'validation-text',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcRadioGroup as ReactWebComponent<IcRadioGroupElement, IcRadioGroupEvents>,
    serializeShadowRoot,
});

export type IcRadioOptionEvents = {
    onIcCheck: EventName<IcRadioOptionCustomEvent<IcValueEventDetail>>,
    onIcSelectedChange: EventName<CustomEvent<void>>
};

export const IcRadioOption: StencilReactComponent<IcRadioOptionElement, IcRadioOptionEvents> = /*@__PURE__*/ createComponent<IcRadioOptionElement, IcRadioOptionEvents>({
    tagName: 'ic-radio-option',
    properties: {
        additionalFieldDisplay: 'additional-field-display',
        disabled: 'disabled',
        dynamicText: 'dynamic-text',
        form: 'form',
        groupLabel: 'group-label',
        label: 'label',
        name: 'name',
        theme: 'theme',
        value: 'value',
        selected: 'selected'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcRadioOption as ReactWebComponent<IcRadioOptionElement, IcRadioOptionEvents>,
    serializeShadowRoot,
});

export type IcSearchBarEvents = {
    onIcChange: EventName<IcSearchBarCustomEvent<IcValueEventDetail>>,
    onIcClear: EventName<CustomEvent<void>>,
    onIcInput: EventName<IcSearchBarCustomEvent<IcValueEventDetail>>,
    onIcOptionSelect: EventName<IcSearchBarCustomEvent<IcOptionSelectEventDetail>>,
    onIcMenuChange: EventName<IcSearchBarCustomEvent<IcMenuChangeEventDetail>>,
    onIcRetryLoad: EventName<IcSearchBarCustomEvent<IcMultiValueEventDetail>>,
    onIcSubmitSearch: EventName<IcSearchBarCustomEvent<IcValueEventDetail>>,
    onIcSearchBarBlur: EventName<IcSearchBarCustomEvent<IcSearchBarBlurEventDetail>>,
    onIcSearchBarFocus: EventName<IcSearchBarCustomEvent<IcValueEventDetail>>,
    onIcKeydown: EventName<IcSearchBarCustomEvent<{ event: KeyboardEvent }>>
};

export const IcSearchBar: StencilReactComponent<IcSearchBarElement, IcSearchBarEvents> = /*@__PURE__*/ createComponent<IcSearchBarElement, IcSearchBarEvents>({
    tagName: 'ic-search-bar',
    properties: {
        autocapitalize: 'autocapitalize',
        autocomplete: 'autocomplete',
        autocorrect: 'autocorrect',
        autofocus: 'autofocus',
        charactersUntilSuggestion: 'characters-until-suggestion',
        disabled: 'disabled',
        disableAutoFiltering: 'disable-auto-filtering',
        debounce: 'debounce',
        emptyOptionListText: 'empty-option-list-text',
        focusOnLoad: 'focus-on-load',
        fullWidth: 'full-width',
        helperText: 'helper-text',
        hideLabel: 'hide-label',
        assistiveHintText: 'assistive-hint-text',
        label: 'label',
        labelField: 'label-field',
        loading: 'loading',
        loadingErrorLabel: 'loading-error-label',
        loadingLabel: 'loading-label',
        name: 'name',
        placeholder: 'placeholder',
        preventFormSubmitOnSearch: 'prevent-form-submit-on-search',
        readonly: 'readonly',
        required: 'required',
        searchMode: 'search-mode',
        size: 'size',
        spellcheck: 'spellcheck',
        theme: 'theme',
        timeout: 'timeout',
        valueField: 'value-field',
        options: 'options',
        value: 'value'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcSearchBar as ReactWebComponent<IcSearchBarElement, IcSearchBarEvents>,
    serializeShadowRoot,
});

export type IcSectionContainerEvents = NonNullable<unknown>;

export const IcSectionContainer: StencilReactComponent<IcSectionContainerElement, IcSectionContainerEvents> = /*@__PURE__*/ createComponent<IcSectionContainerElement, IcSectionContainerEvents>({
    tagName: 'ic-section-container',
    properties: {
        aligned: 'aligned',
        fullHeight: 'full-height'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcSectionContainer as ReactWebComponent<IcSectionContainerElement, IcSectionContainerEvents>,
    serializeShadowRoot,
});

export type IcSelectEvents = {
    onIcBlur: EventName<CustomEvent<void>>,
    onIcChange: EventName<IcSelectCustomEvent<IcMultiValueEventDetail>>,
    onIcClear: EventName<CustomEvent<void>>,
    onIcClose: EventName<CustomEvent<void>>,
    onIcFocus: EventName<CustomEvent<void>>,
    onIcInput: EventName<IcSelectCustomEvent<IcMultiValueEventDetail>>,
    onIcOpen: EventName<CustomEvent<void>>,
    onIcOptionSelect: EventName<IcSelectCustomEvent<IcOptionSelectEventDetail>>,
    onIcOptionDeselect: EventName<IcSelectCustomEvent<IcOptionSelectEventDetail>>,
    onIcRetryLoad: EventName<IcSelectCustomEvent<IcMultiValueEventDetail>>
};

export const IcSelect: StencilReactComponent<IcSelectElement, IcSelectEvents> = /*@__PURE__*/ createComponent<IcSelectElement, IcSelectEvents>({
    tagName: 'ic-select',
    properties: {
        disabled: 'disabled',
        disableAutoFiltering: 'disable-auto-filtering',
        emptyOptionListText: 'empty-option-list-text',
        form: 'form',
        fullWidth: 'full-width',
        helperText: 'helper-text',
        hideLabel: 'hide-label',
        includeDescriptionsInSearch: 'include-descriptions-in-search',
        includeGroupTitlesInSearch: 'include-group-titles-in-search',
        label: 'label',
        loadingErrorLabel: 'loading-error-label',
        loadingLabel: 'loading-label',
        multiple: 'multiple',
        name: 'name',
        placeholder: 'placeholder',
        readonly: 'readonly',
        required: 'required',
        searchable: 'searchable',
        searchMatchPosition: 'search-match-position',
        selectOnEnter: 'select-on-enter',
        showClearButton: 'show-clear-button',
        size: 'size',
        timeout: 'timeout',
        theme: 'theme',
        validationStatus: 'validation-status',
        validationText: 'validation-text',
        loading: 'loading',
        options: 'options',
        debounce: 'debounce',
        value: 'value'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcSelect as ReactWebComponent<IcSelectElement, IcSelectEvents>,
    serializeShadowRoot,
});

export type IcSideNavigationEvents = { onIcSideNavExpanded: EventName<IcSideNavigationCustomEvent<IcExpandedDetail>> };

export const IcSideNavigation: StencilReactComponent<IcSideNavigationElement, IcSideNavigationEvents> = /*@__PURE__*/ createComponent<IcSideNavigationElement, IcSideNavigationEvents>({
    tagName: 'ic-side-navigation',
    properties: {
        appTitle: 'app-title',
        closeOnNavItemClick: 'close-on-nav-item-click',
        collapsedIconLabels: 'collapsed-icon-labels',
        disableAutoParentStyling: 'disable-auto-parent-styling',
        disableTopBarBehaviour: 'disable-top-bar-behaviour',
        expanded: 'expanded',
        href: 'href',
        inline: 'inline',
        shortAppTitle: 'short-app-title',
        static: 'static',
        status: 'status',
        version: 'version'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcSideNavigation as ReactWebComponent<IcSideNavigationElement, IcSideNavigationEvents>,
    serializeShadowRoot,
});

export type IcSkeletonEvents = NonNullable<unknown>;

export const IcSkeleton: StencilReactComponent<IcSkeletonElement, IcSkeletonEvents> = /*@__PURE__*/ createComponent<IcSkeletonElement, IcSkeletonEvents>({
    tagName: 'ic-skeleton',
    properties: {
        theme: 'theme',
        variant: 'variant'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcSkeleton as ReactWebComponent<IcSkeletonElement, IcSkeletonEvents>,
    serializeShadowRoot,
});

export type IcSkipLinkEvents = NonNullable<unknown>;

export const IcSkipLink: StencilReactComponent<IcSkipLinkElement, IcSkipLinkEvents> = /*@__PURE__*/ createComponent<IcSkipLinkElement, IcSkipLinkEvents>({
    tagName: 'ic-skip-link',
    properties: {
        fullWidth: 'full-width',
        inline: 'inline',
        label: 'label',
        monochrome: 'monochrome',
        target: 'target',
        theme: 'theme',
        transparentBackground: 'transparent-background'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcSkipLink as ReactWebComponent<IcSkipLinkElement, IcSkipLinkEvents>,
    serializeShadowRoot,
});

export type IcStatusTagEvents = NonNullable<unknown>;

export const IcStatusTag: StencilReactComponent<IcStatusTagElement, IcStatusTagEvents> = /*@__PURE__*/ createComponent<IcStatusTagElement, IcStatusTagEvents>({
    tagName: 'ic-status-tag',
    properties: {
        announced: 'announced',
        label: 'label',
        size: 'size',
        status: 'status',
        theme: 'theme',
        uppercase: 'uppercase',
        variant: 'variant'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcStatusTag as ReactWebComponent<IcStatusTagElement, IcStatusTagEvents>,
    serializeShadowRoot,
});

export type IcStepEvents = NonNullable<unknown>;

export const IcStep: StencilReactComponent<IcStepElement, IcStepEvents> = /*@__PURE__*/ createComponent<IcStepElement, IcStepEvents>({
    tagName: 'ic-step',
    properties: {
        compactStepStyling: 'compact-step-styling',
        current: 'current',
        lastStep: 'last-step',
        lastStepNum: 'last-step-num',
        nextStepHeading: 'next-step-heading',
        progress: 'progress',
        stepNum: 'step-num',
        status: 'status',
        subheading: 'subheading',
        heading: 'heading',
        theme: 'theme',
        variant: 'variant',
        type: 'type'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcStep as ReactWebComponent<IcStepElement, IcStepEvents>,
    serializeShadowRoot,
});

export type IcStepperEvents = NonNullable<unknown>;

export const IcStepper: StencilReactComponent<IcStepperElement, IcStepperEvents> = /*@__PURE__*/ createComponent<IcStepperElement, IcStepperEvents>({
    tagName: 'ic-stepper',
    properties: {
        aligned: 'aligned',
        connectorWidth: 'connector-width',
        hideStepInfo: 'hide-step-info',
        theme: 'theme',
        variant: 'variant'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcStepper as ReactWebComponent<IcStepperElement, IcStepperEvents>,
    serializeShadowRoot,
});

export type IcSwitchEvents = {
    onIcBlur: EventName<CustomEvent<void>>,
    onIcChange: EventName<IcSwitchCustomEvent<IcSwitchChangeEventDetail>>,
    onIcFocus: EventName<CustomEvent<void>>
};

export const IcSwitch: StencilReactComponent<IcSwitchElement, IcSwitchEvents> = /*@__PURE__*/ createComponent<IcSwitchElement, IcSwitchEvents>({
    tagName: 'ic-switch',
    properties: {
        checked: 'checked',
        disabled: 'disabled',
        helperText: 'helper-text',
        hideLabel: 'hide-label',
        label: 'label',
        name: 'name',
        size: 'size',
        theme: 'theme',
        value: 'value'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcSwitch as ReactWebComponent<IcSwitchElement, IcSwitchEvents>,
    serializeShadowRoot,
});

export type IcTabEvents = NonNullable<unknown>;

export const IcTab: StencilReactComponent<IcTabElement, IcTabEvents> = /*@__PURE__*/ createComponent<IcTabElement, IcTabEvents>({
    tagName: 'ic-tab',
    properties: {
        contextId: 'context-id',
        disabled: 'disabled',
        monochrome: 'monochrome',
        selected: 'selected',
        tabId: 'tab-id',
        tabPosition: 'tab-position',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcTab as ReactWebComponent<IcTabElement, IcTabEvents>,
    serializeShadowRoot,
});

export type IcTabContextEvents = { onIcTabSelect: EventName<IcTabContextCustomEvent<IcTabSelectEventDetail>> };

export const IcTabContext: StencilReactComponent<IcTabContextElement, IcTabContextEvents> = /*@__PURE__*/ createComponent<IcTabContextElement, IcTabContextEvents>({
    tagName: 'ic-tab-context',
    properties: {
        activationType: 'activation-type',
        contextId: 'context-id',
        selectedTabIndex: 'selected-tab-index',
        monochrome: 'monochrome',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcTabContext as ReactWebComponent<IcTabContextElement, IcTabContextEvents>,
    serializeShadowRoot,
});

export type IcTabGroupEvents = NonNullable<unknown>;

export const IcTabGroup: StencilReactComponent<IcTabGroupElement, IcTabGroupEvents> = /*@__PURE__*/ createComponent<IcTabGroupElement, IcTabGroupEvents>({
    tagName: 'ic-tab-group',
    properties: {
        inline: 'inline',
        label: 'label',
        monochrome: 'monochrome',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcTabGroup as ReactWebComponent<IcTabGroupElement, IcTabGroupEvents>,
    serializeShadowRoot,
});

export type IcTabPanelEvents = NonNullable<unknown>;

export const IcTabPanel: StencilReactComponent<IcTabPanelElement, IcTabPanelEvents> = /*@__PURE__*/ createComponent<IcTabPanelElement, IcTabPanelEvents>({
    tagName: 'ic-tab-panel',
    properties: {
        active: 'active',
        monochrome: 'monochrome',
        panelId: 'panel-id',
        selectedTab: 'selected-tab',
        tabPosition: 'tab-position',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcTabPanel as ReactWebComponent<IcTabPanelElement, IcTabPanelEvents>,
    serializeShadowRoot,
});

export type IcTextFieldEvents = {
    onIcBlur: EventName<IcTextFieldCustomEvent<IcValueEventDetail>>,
    onIcChange: EventName<IcTextFieldCustomEvent<IcValueEventDetail>>,
    onIcFocus: EventName<IcTextFieldCustomEvent<IcValueEventDetail>>,
    onIcInput: EventName<IcTextFieldCustomEvent<IcValueEventDetail>>,
    onIcKeydown: EventName<IcTextFieldCustomEvent<{ event: KeyboardEvent }>>,
    onIcScroll: EventName<CustomEvent<any>>
};

export const IcTextField: StencilReactComponent<IcTextFieldElement, IcTextFieldEvents> = /*@__PURE__*/ createComponent<IcTextFieldElement, IcTextFieldEvents>({
    tagName: 'ic-text-field',
    properties: {
        ariaActiveDescendant: 'aria-active-descendant',
        ariaAutocomplete: 'aria-autocomplete',
        ariaExpanded: 'aria-expanded',
        ariaOwns: 'aria-owns',
        autocapitalize: 'autocapitalize',
        autocomplete: 'autocomplete',
        autocorrect: 'autocorrect',
        autofocus: 'autofocus',
        disabled: 'disabled',
        fullWidth: 'full-width',
        helperText: 'helper-text',
        hideCharCount: 'hide-char-count',
        hideLabel: 'hide-label',
        hiddenInput: 'hidden-input',
        inputId: 'input-id',
        inputmode: 'inputmode',
        label: 'label',
        max: 'max',
        maxCharacters: 'max-characters',
        maxCharactersMessage: 'max-characters-message',
        maxMessage: 'max-message',
        min: 'min',
        minCharacters: 'min-characters',
        minCharactersMessage: 'min-characters-message',
        minMessage: 'min-message',
        name: 'name',
        placeholder: 'placeholder',
        readonly: 'readonly',
        required: 'required',
        resize: 'resize',
        role: 'role',
        rows: 'rows',
        size: 'size',
        spellcheck: 'spellcheck',
        theme: 'theme',
        truncateValue: 'truncate-value',
        type: 'type',
        validationInline: 'validation-inline',
        validationInlineInternal: 'validation-inline-internal',
        validationStatus: 'validation-status',
        validationText: 'validation-text',
        debounce: 'debounce',
        value: 'value'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcTextField as ReactWebComponent<IcTextFieldElement, IcTextFieldEvents>,
    serializeShadowRoot,
});

export type IcThemeEvents = { onIcThemeChange: EventName<IcThemeCustomEvent<IcThemeSettings>> };

export const IcTheme: StencilReactComponent<IcThemeElement, IcThemeEvents> = /*@__PURE__*/ createComponent<IcThemeElement, IcThemeEvents>({
    tagName: 'ic-theme',
    properties: {
        brandColor: 'brand-color',
        theme: 'theme'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcTheme as ReactWebComponent<IcThemeElement, IcThemeEvents>,
    serializeShadowRoot,
});

export type IcToastEvents = { onIcDismiss: EventName<CustomEvent<void>> };

export const IcToast: StencilReactComponent<IcToastElement, IcToastEvents> = /*@__PURE__*/ createComponent<IcToastElement, IcToastEvents>({
    tagName: 'ic-toast',
    properties: {
        autoDismissTimeout: 'auto-dismiss-timeout',
        dismissButtonAriaLabel: 'dismiss-button-aria-label',
        dismissMode: 'dismiss-mode',
        heading: 'heading',
        message: 'message',
        neutralIconAriaLabel: 'neutral-icon-aria-label',
        variant: 'variant'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcToast as ReactWebComponent<IcToastElement, IcToastEvents>,
    serializeShadowRoot,
});

export type IcToastRegionEvents = NonNullable<unknown>;

export const IcToastRegion: StencilReactComponent<IcToastRegionElement, IcToastRegionEvents> = /*@__PURE__*/ createComponent<IcToastRegionElement, IcToastRegionEvents>({
    tagName: 'ic-toast-region',
    properties: { openToast: 'open-toast' },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcToastRegion as ReactWebComponent<IcToastRegionElement, IcToastRegionEvents>,
    serializeShadowRoot,
});

export type IcToggleButtonEvents = {
    onIcToggleChecked: EventName<CustomEvent<{
        checked: boolean;
    }>>
};

export const IcToggleButton: StencilReactComponent<IcToggleButtonElement, IcToggleButtonEvents> = /*@__PURE__*/ createComponent<IcToggleButtonElement, IcToggleButtonEvents>({
    tagName: 'ic-toggle-button',
    properties: {
        accessibleLabel: 'accessible-label',
        checked: 'checked',
        disabled: 'disabled',
        fullWidth: 'full-width',
        iconPlacement: 'icon-placement',
        label: 'label',
        loading: 'loading',
        monochrome: 'monochrome',
        outline: 'outline',
        size: 'size',
        theme: 'theme',
        tooltipPlacement: 'tooltip-placement',
        variant: 'variant'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcToggleButton as ReactWebComponent<IcToggleButtonElement, IcToggleButtonEvents>,
    serializeShadowRoot,
});

export type IcToggleButtonGroupEvents = { onIcChange: EventName<IcToggleButtonGroupCustomEvent<IcChangeEventDetail>> };

export const IcToggleButtonGroup: StencilReactComponent<IcToggleButtonGroupElement, IcToggleButtonGroupEvents> = /*@__PURE__*/ createComponent<IcToggleButtonGroupElement, IcToggleButtonGroupEvents>({
    tagName: 'ic-toggle-button-group',
    properties: {
        accessibleLabel: 'accessible-label',
        disabled: 'disabled',
        fullWidth: 'full-width',
        iconPlacement: 'icon-placement',
        loading: 'loading',
        monochrome: 'monochrome',
        outline: 'outline',
        selectMethod: 'select-method',
        selectType: 'select-type',
        size: 'size',
        theme: 'theme',
        tooltipPlacement: 'tooltip-placement',
        variant: 'variant'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcToggleButtonGroup as ReactWebComponent<IcToggleButtonGroupElement, IcToggleButtonGroupEvents>,
    serializeShadowRoot,
});

export type IcTooltipEvents = NonNullable<unknown>;

export const IcTooltip: StencilReactComponent<IcTooltipElement, IcTooltipEvents> = /*@__PURE__*/ createComponent<IcTooltipElement, IcTooltipEvents>({
    tagName: 'ic-tooltip',
    properties: {
        disableClick: 'disable-click',
        disableHover: 'disable-hover',
        maxLines: 'max-lines',
        placement: 'placement',
        silent: 'silent',
        target: 'target',
        theme: 'theme',
        label: 'label'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcTooltip as ReactWebComponent<IcTooltipElement, IcTooltipEvents>,
    serializeShadowRoot,
});

export type IcTopNavigationEvents = { onIcTopNavResized: EventName<CustomEvent<{ size: number }>> };

export const IcTopNavigation: StencilReactComponent<IcTopNavigationElement, IcTopNavigationEvents> = /*@__PURE__*/ createComponent<IcTopNavigationElement, IcTopNavigationEvents>({
    tagName: 'ic-top-navigation',
    properties: {
        contentAligned: 'content-aligned',
        customMobileBreakpoint: 'custom-mobile-breakpoint',
        href: 'href',
        inline: 'inline',
        shortAppTitle: 'short-app-title',
        status: 'status',
        theme: 'theme',
        version: 'version',
        appTitle: 'app-title'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcTopNavigation as ReactWebComponent<IcTopNavigationElement, IcTopNavigationEvents>,
    serializeShadowRoot,
});

export type IcTypographyEvents = NonNullable<unknown>;

export const IcTypography: StencilReactComponent<IcTypographyElement, IcTypographyEvents> = /*@__PURE__*/ createComponent<IcTypographyElement, IcTypographyEvents>({
    tagName: 'ic-typography',
    properties: {
        applyVerticalMargins: 'apply-vertical-margins',
        bold: 'bold',
        italic: 'italic',
        maxLines: 'max-lines',
        strikethrough: 'strikethrough',
        theme: 'theme',
        underline: 'underline',
        variant: 'variant'
    },
    hydrateModule: import('@ukic/web-components/hydrate') as Promise<HydrateModule>,
    clientModule: clientComponents.IcTypography as ReactWebComponent<IcTypographyElement, IcTypographyEvents>,
    serializeShadowRoot,
});
