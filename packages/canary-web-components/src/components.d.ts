/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IcDataTableColumnObject, IcDataTableDensityOptions, IcDataTableSortOrderOptions } from "./components/ic-data-table/ic-data-table.types";
import { IcPaginationAlignmentOptions, IcPaginationControlTypes, IcPaginationTypes } from "./components/ic-pagination/ic-pagination.types";
import { IcDateFormat, IcInformationStatusOrEmpty, IcSizes, IcWeekDays } from "./utils/types";
import { IcThemeForeground } from "@ukic/web-components/dist/types/interface";
export { IcDataTableColumnObject, IcDataTableDensityOptions, IcDataTableSortOrderOptions } from "./components/ic-data-table/ic-data-table.types";
export { IcPaginationAlignmentOptions, IcPaginationControlTypes, IcPaginationTypes } from "./components/ic-pagination/ic-pagination.types";
export { IcDateFormat, IcInformationStatusOrEmpty, IcSizes, IcWeekDays } from "./utils/types";
export { IcThemeForeground } from "@ukic/web-components/dist/types/interface";
export namespace Components {
    interface IcDataTable {
        /**
          * The title for the table only visible to screen readers.
         */
        "caption": string;
        /**
          * The column headers for the table.
         */
        "columns": IcDataTableColumnObject[];
        /**
          * The row content for the table.
         */
        "data": { [key: string]: any }[];
        /**
          * Set the density of the table including font and padding.
         */
        "density"?: IcDataTableDensityOptions;
        /**
          * Applies a border to the table container.
         */
        "embedded"?: boolean;
        /**
          * If `true`, column headers will not be visible.
         */
        "hideColumnHeaders"?: boolean;
        /**
          * Sets the props for the pagination bar.
         */
        "paginationOptions"?: {
    itemsPerPage?: { label: string; value: string }[];
    type?: IcPaginationTypes;
    control?: IcPaginationControlTypes;
    itemsPerPageControl?: boolean;
    goToPageControl?: boolean;
    alignment?: IcPaginationAlignmentOptions;
  };
        /**
          * If `true`, adds a pagination bar to the bottom of the table.
         */
        "showPagination"?: boolean;
        /**
          * Sets the order columns will be sorted in and allows for 'default' sorts to be added.
         */
        "sortOptions"?: {
    sortOrders: IcDataTableSortOrderOptions[];
    defaultColumn?: string;
  };
        /**
          * If `true`, allows table columns to be sorted using applied sort buttons.
         */
        "sortable"?: boolean;
        /**
          * If `true`, column headers will remain at the top of the table when scrolling vertically.
         */
        "stickyColumnHeaders"?: boolean;
        /**
          * If `true`, row headers will remain to the left when scrolling horizontally.
         */
        "stickyRowHeaders"?: boolean;
    }
    interface IcDateInput {
        /**
          * The format in which the date will be displayed.
         */
        "dateFormat"?: IcDateFormat;
        /**
          * The days of the week to disable.
         */
        "disableDays"?: IcWeekDays[];
        /**
          * The text to display as the validation message when `disableDays` is set and a disabled date is entered.
         */
        "disableDaysMessage"?: string;
        /**
          * If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.
         */
        "disableFuture"?: boolean;
        /**
          * The text to display as the validation message when `disableFuture` is true and a date in the future is entered.
         */
        "disableFutureMessage"?: string;
        /**
          * If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.
         */
        "disablePast"?: boolean;
        /**
          * The text to display as the validation message when `disablePast` is true and a date in the past is entered.
         */
        "disablePastMessage"?: string;
        /**
          * If `true`, the disabled state will be set.
         */
        "disabled"?: boolean;
        /**
          * Returns the value as a Date object
          * @returns Date
         */
        "getDate": () => Promise<Date>;
        /**
          * The helper text that will be displayed for additional field guidance. This will default to the text "Use format" along with the `dateFormat` value.
         */
        "helperText"?: string;
        /**
          * The ID for the input.
         */
        "inputId"?: string;
        /**
          * The label for the date input.
         */
        "label": string;
        /**
          * The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disableFuture` is set to `true`.
         */
        "max"?: string | Date;
        /**
          * The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disablePast` is set to `true`.
         */
        "min"?: string | Date;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true`, the input will require a value.
         */
        "required"?: boolean;
        "setCalendarFocus": () => Promise<void>;
        "setDisableDays": (days: IcWeekDays[]) => Promise<void>;
        "showCalendarButton"?: boolean;
        /**
          * If `true`, a button which clears the date input when clicked will be displayed.
         */
        "showClearButton"?: boolean;
        /**
          * The size of the date input to be displayed.
         */
        "size"?: IcSizes;
        /**
          * The validation status - e.g. 'error' | 'warning' | 'success'. This will override the built-in date validation.
         */
        "validationStatus"?: IcInformationStatusOrEmpty;
        /**
          * The text to display as the validation message. This will override the built-in date validation.
         */
        "validationText"?: string;
        /**
          * The value of the date input. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.
         */
        "value"?: string | Date | null | undefined;
    }
    interface IcDatePicker {
        /**
          * The format in which the date will be displayed.
         */
        "dateFormat"?: IcDateFormat;
        /**
          * The days of the week to disable.
         */
        "disableDays"?: IcWeekDays[];
        /**
          * The text to display as the validation message when `disableDays` is `true` and a disabled date is entered.
         */
        "disableDaysMessage"?: string;
        /**
          * If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.
         */
        "disableFuture"?: boolean;
        /**
          * The text to display as the validation message when `disableFuture` is `true` and a date in the future is entered.
         */
        "disableFutureMessage"?: string;
        /**
          * If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.
         */
        "disablePast"?: boolean;
        /**
          * The text to display as the validation message when `disablePast` is `true` and a date in the past is entered.
         */
        "disablePastMessage"?: string;
        /**
          * If `true`, the disabled state will be set.
         */
        "disabled"?: boolean;
        /**
          * The helper text that will be displayed for additional field guidance. This will default to the text "Use format" along with the `dateFormat` value.
         */
        "helperText"?: string;
        /**
          * The ID for the input field. The default will be an automatically generated value.
         */
        "inputId"?: string;
        /**
          * The label for the date input.
         */
        "label": string;
        /**
          * The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disableFuture` is set to `true`.
         */
        "max"?: string | Date;
        /**
          * The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disablePast` is set to `true`.
         */
        "min"?: string | Date;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * The date visible when the calendar opens. Used if no date is currently selected. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.
         */
        "openAtDate": string | Date;
        /**
          * If `true`, the input will require a value.
         */
        "required"?: boolean;
        /**
          * Determines whether days outside the current month are rendered.
         */
        "showDaysOutsideMonth"?: boolean;
        /**
          * Determines whether the `Clear` button on the date picker is visible.
         */
        "showPickerClearButton"?: boolean;
        /**
          * Determines whether the `Go to today` button on the date picker is visible.
         */
        "showPickerTodayButton"?: boolean;
        /**
          * The size of the date picker to be displayed.
         */
        "size"?: IcSizes;
        /**
          * The first day of the week? `0` for Sunday, `1` for Monday, etc. Default is Monday.
         */
        "startOfWeek"?: IcWeekDays;
        /**
          * The validation status - e.g. 'error' | 'warning' | 'success'. This will override the built-in date validation.
         */
        "validationStatus"?: IcInformationStatusOrEmpty;
        /**
          * The text to display as the validation message. This will override the built-in date validation.
         */
        "validationText"?: string;
        /**
          * The value of the date picker. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.
         */
        "value"?: string | Date;
    }
    interface IcPaginationBar {
        /**
          * Sets the alignment of the items in the pagination bar.
         */
        "alignment"?: IcPaginationAlignmentOptions;
        /**
          * Sets the styling for the items in the pagination bar.
         */
        "appearance"?: IcThemeForeground;
        /**
          * The label which will be used in place of 'items' if paginationType is data. Should be capitalised.
         */
        "itemLabel"?: string;
        /**
          * The options which will be displayed for 'items per page' select input. Set a maximum of 4 options including a required 'All' option with value equal to total number of items.
         */
        "itemsPerPageOptions"?: {
    label: string;
    value: string;
  }[];
        /**
          * The label which will be used in place of 'Page' if paginationType is page. Should be capitalised.
         */
        "pageLabel"?: string;
        /**
          * Whether the displayed pagination is simple or complex.
         */
        "paginationControl"?: IcPaginationControlTypes;
        /**
          * Whether total number of items and current item range or total number of pages and current page is displayed.
         */
        "paginationType"?: IcPaginationTypes;
        /**
          * If `true`, the 'go to page' control should be displayed.
         */
        "showGoToPageControl"?: boolean;
        /**
          * If `true`, the number of total items and current item range or number of total pages and current page should be displayed.
         */
        "showItemsPerPage"?: boolean;
        /**
          * If `true`, the select input to control 'items per page' should be displayed.
         */
        "showItemsPerPageControl"?: boolean;
        /**
          * Total number of items to be displayed across all pages.
         */
        "totalItems": number;
    }
}
export interface IcDateInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcDateInputElement;
}
export interface IcDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcDatePickerElement;
}
export interface IcPaginationBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcPaginationBarElement;
}
declare global {
    interface HTMLIcDataTableElement extends Components.IcDataTable, HTMLStencilElement {
    }
    var HTMLIcDataTableElement: {
        prototype: HTMLIcDataTableElement;
        new (): HTMLIcDataTableElement;
    };
    interface HTMLIcDateInputElementEventMap {
        "calendarButtonClicked": { value: Date };
        "icBlur": { value: Date };
        "icChange": { value: Date };
        "icFocus": { value: Date };
    }
    interface HTMLIcDateInputElement extends Components.IcDateInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIcDateInputElementEventMap>(type: K, listener: (this: HTMLIcDateInputElement, ev: IcDateInputCustomEvent<HTMLIcDateInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIcDateInputElementEventMap>(type: K, listener: (this: HTMLIcDateInputElement, ev: IcDateInputCustomEvent<HTMLIcDateInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIcDateInputElement: {
        prototype: HTMLIcDateInputElement;
        new (): HTMLIcDateInputElement;
    };
    interface HTMLIcDatePickerElementEventMap {
        "icChange": { value: Date };
    }
    interface HTMLIcDatePickerElement extends Components.IcDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIcDatePickerElementEventMap>(type: K, listener: (this: HTMLIcDatePickerElement, ev: IcDatePickerCustomEvent<HTMLIcDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIcDatePickerElementEventMap>(type: K, listener: (this: HTMLIcDatePickerElement, ev: IcDatePickerCustomEvent<HTMLIcDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIcDatePickerElement: {
        prototype: HTMLIcDatePickerElement;
        new (): HTMLIcDatePickerElement;
    };
    interface HTMLIcPaginationBarElementEventMap {
        "icPageChange": { value: number };
        "icItemsPerPageChange": { value: number };
    }
    interface HTMLIcPaginationBarElement extends Components.IcPaginationBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIcPaginationBarElementEventMap>(type: K, listener: (this: HTMLIcPaginationBarElement, ev: IcPaginationBarCustomEvent<HTMLIcPaginationBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIcPaginationBarElementEventMap>(type: K, listener: (this: HTMLIcPaginationBarElement, ev: IcPaginationBarCustomEvent<HTMLIcPaginationBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIcPaginationBarElement: {
        prototype: HTMLIcPaginationBarElement;
        new (): HTMLIcPaginationBarElement;
    };
    interface HTMLElementTagNameMap {
        "ic-data-table": HTMLIcDataTableElement;
        "ic-date-input": HTMLIcDateInputElement;
        "ic-date-picker": HTMLIcDatePickerElement;
        "ic-pagination-bar": HTMLIcPaginationBarElement;
    }
}
declare namespace LocalJSX {
    interface IcDataTable {
        /**
          * The title for the table only visible to screen readers.
         */
        "caption": string;
        /**
          * The column headers for the table.
         */
        "columns": IcDataTableColumnObject[];
        /**
          * The row content for the table.
         */
        "data"?: { [key: string]: any }[];
        /**
          * Set the density of the table including font and padding.
         */
        "density"?: IcDataTableDensityOptions;
        /**
          * Applies a border to the table container.
         */
        "embedded"?: boolean;
        /**
          * If `true`, column headers will not be visible.
         */
        "hideColumnHeaders"?: boolean;
        /**
          * Sets the props for the pagination bar.
         */
        "paginationOptions"?: {
    itemsPerPage?: { label: string; value: string }[];
    type?: IcPaginationTypes;
    control?: IcPaginationControlTypes;
    itemsPerPageControl?: boolean;
    goToPageControl?: boolean;
    alignment?: IcPaginationAlignmentOptions;
  };
        /**
          * If `true`, adds a pagination bar to the bottom of the table.
         */
        "showPagination"?: boolean;
        /**
          * Sets the order columns will be sorted in and allows for 'default' sorts to be added.
         */
        "sortOptions"?: {
    sortOrders: IcDataTableSortOrderOptions[];
    defaultColumn?: string;
  };
        /**
          * If `true`, allows table columns to be sorted using applied sort buttons.
         */
        "sortable"?: boolean;
        /**
          * If `true`, column headers will remain at the top of the table when scrolling vertically.
         */
        "stickyColumnHeaders"?: boolean;
        /**
          * If `true`, row headers will remain to the left when scrolling horizontally.
         */
        "stickyRowHeaders"?: boolean;
    }
    interface IcDateInput {
        /**
          * The format in which the date will be displayed.
         */
        "dateFormat"?: IcDateFormat;
        /**
          * The days of the week to disable.
         */
        "disableDays"?: IcWeekDays[];
        /**
          * The text to display as the validation message when `disableDays` is set and a disabled date is entered.
         */
        "disableDaysMessage"?: string;
        /**
          * If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.
         */
        "disableFuture"?: boolean;
        /**
          * The text to display as the validation message when `disableFuture` is true and a date in the future is entered.
         */
        "disableFutureMessage"?: string;
        /**
          * If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.
         */
        "disablePast"?: boolean;
        /**
          * The text to display as the validation message when `disablePast` is true and a date in the past is entered.
         */
        "disablePastMessage"?: string;
        /**
          * If `true`, the disabled state will be set.
         */
        "disabled"?: boolean;
        /**
          * The helper text that will be displayed for additional field guidance. This will default to the text "Use format" along with the `dateFormat` value.
         */
        "helperText"?: string;
        /**
          * The ID for the input.
         */
        "inputId"?: string;
        /**
          * The label for the date input.
         */
        "label": string;
        /**
          * The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disableFuture` is set to `true`.
         */
        "max"?: string | Date;
        /**
          * The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disablePast` is set to `true`.
         */
        "min"?: string | Date;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        "onCalendarButtonClicked"?: (event: IcDateInputCustomEvent<{ value: Date }>) => void;
        /**
          * Emitted when the input loses focus.
         */
        "onIcBlur"?: (event: IcDateInputCustomEvent<{ value: Date }>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onIcChange"?: (event: IcDateInputCustomEvent<{ value: Date }>) => void;
        /**
          * Emitted when the input gains focus.
         */
        "onIcFocus"?: (event: IcDateInputCustomEvent<{ value: Date }>) => void;
        /**
          * If `true`, the input will require a value.
         */
        "required"?: boolean;
        "showCalendarButton"?: boolean;
        /**
          * If `true`, a button which clears the date input when clicked will be displayed.
         */
        "showClearButton"?: boolean;
        /**
          * The size of the date input to be displayed.
         */
        "size"?: IcSizes;
        /**
          * The validation status - e.g. 'error' | 'warning' | 'success'. This will override the built-in date validation.
         */
        "validationStatus"?: IcInformationStatusOrEmpty;
        /**
          * The text to display as the validation message. This will override the built-in date validation.
         */
        "validationText"?: string;
        /**
          * The value of the date input. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.
         */
        "value"?: string | Date | null | undefined;
    }
    interface IcDatePicker {
        /**
          * The format in which the date will be displayed.
         */
        "dateFormat"?: IcDateFormat;
        /**
          * The days of the week to disable.
         */
        "disableDays"?: IcWeekDays[];
        /**
          * The text to display as the validation message when `disableDays` is `true` and a disabled date is entered.
         */
        "disableDaysMessage"?: string;
        /**
          * If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.
         */
        "disableFuture"?: boolean;
        /**
          * The text to display as the validation message when `disableFuture` is `true` and a date in the future is entered.
         */
        "disableFutureMessage"?: string;
        /**
          * If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.
         */
        "disablePast"?: boolean;
        /**
          * The text to display as the validation message when `disablePast` is `true` and a date in the past is entered.
         */
        "disablePastMessage"?: string;
        /**
          * If `true`, the disabled state will be set.
         */
        "disabled"?: boolean;
        /**
          * The helper text that will be displayed for additional field guidance. This will default to the text "Use format" along with the `dateFormat` value.
         */
        "helperText"?: string;
        /**
          * The ID for the input field. The default will be an automatically generated value.
         */
        "inputId"?: string;
        /**
          * The label for the date input.
         */
        "label": string;
        /**
          * The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disableFuture` is set to `true`.
         */
        "max"?: string | Date;
        /**
          * The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disablePast` is set to `true`.
         */
        "min"?: string | Date;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onIcChange"?: (event: IcDatePickerCustomEvent<{ value: Date }>) => void;
        /**
          * The date visible when the calendar opens. Used if no date is currently selected. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.
         */
        "openAtDate"?: string | Date;
        /**
          * If `true`, the input will require a value.
         */
        "required"?: boolean;
        /**
          * Determines whether days outside the current month are rendered.
         */
        "showDaysOutsideMonth"?: boolean;
        /**
          * Determines whether the `Clear` button on the date picker is visible.
         */
        "showPickerClearButton"?: boolean;
        /**
          * Determines whether the `Go to today` button on the date picker is visible.
         */
        "showPickerTodayButton"?: boolean;
        /**
          * The size of the date picker to be displayed.
         */
        "size"?: IcSizes;
        /**
          * The first day of the week? `0` for Sunday, `1` for Monday, etc. Default is Monday.
         */
        "startOfWeek"?: IcWeekDays;
        /**
          * The validation status - e.g. 'error' | 'warning' | 'success'. This will override the built-in date validation.
         */
        "validationStatus"?: IcInformationStatusOrEmpty;
        /**
          * The text to display as the validation message. This will override the built-in date validation.
         */
        "validationText"?: string;
        /**
          * The value of the date picker. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.
         */
        "value"?: string | Date;
    }
    interface IcPaginationBar {
        /**
          * Sets the alignment of the items in the pagination bar.
         */
        "alignment"?: IcPaginationAlignmentOptions;
        /**
          * Sets the styling for the items in the pagination bar.
         */
        "appearance"?: IcThemeForeground;
        /**
          * The label which will be used in place of 'items' if paginationType is data. Should be capitalised.
         */
        "itemLabel"?: string;
        /**
          * The options which will be displayed for 'items per page' select input. Set a maximum of 4 options including a required 'All' option with value equal to total number of items.
         */
        "itemsPerPageOptions"?: {
    label: string;
    value: string;
  }[];
        /**
          * Emitted when the items per page option is changed.
         */
        "onIcItemsPerPageChange"?: (event: IcPaginationBarCustomEvent<{ value: number }>) => void;
        /**
          * Emitted when a page is navigated to via the 'go to' input.
         */
        "onIcPageChange"?: (event: IcPaginationBarCustomEvent<{ value: number }>) => void;
        /**
          * The label which will be used in place of 'Page' if paginationType is page. Should be capitalised.
         */
        "pageLabel"?: string;
        /**
          * Whether the displayed pagination is simple or complex.
         */
        "paginationControl"?: IcPaginationControlTypes;
        /**
          * Whether total number of items and current item range or total number of pages and current page is displayed.
         */
        "paginationType"?: IcPaginationTypes;
        /**
          * If `true`, the 'go to page' control should be displayed.
         */
        "showGoToPageControl"?: boolean;
        /**
          * If `true`, the number of total items and current item range or number of total pages and current page should be displayed.
         */
        "showItemsPerPage"?: boolean;
        /**
          * If `true`, the select input to control 'items per page' should be displayed.
         */
        "showItemsPerPageControl"?: boolean;
        /**
          * Total number of items to be displayed across all pages.
         */
        "totalItems": number;
    }
    interface IntrinsicElements {
        "ic-data-table": IcDataTable;
        "ic-date-input": IcDateInput;
        "ic-date-picker": IcDatePicker;
        "ic-pagination-bar": IcPaginationBar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ic-data-table": LocalJSX.IcDataTable & JSXBase.HTMLAttributes<HTMLIcDataTableElement>;
            "ic-date-input": LocalJSX.IcDateInput & JSXBase.HTMLAttributes<HTMLIcDateInputElement>;
            "ic-date-picker": LocalJSX.IcDatePicker & JSXBase.HTMLAttributes<HTMLIcDatePickerElement>;
            "ic-pagination-bar": LocalJSX.IcPaginationBar & JSXBase.HTMLAttributes<HTMLIcPaginationBarElement>;
        }
    }
}
