/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IcDataTableColumnObject, IcDataTableDensityOptions, IcDataTableSortOrderOptions } from "./components/ic-data-table/ic-data-table.types";
import { IcPaginationAlignmentOptions, IcPaginationControlTypes, IcPaginationTypes } from "./components/ic-pagination/ic-pagination.types";
import { IcDateFormat, IcInformationStatusOrEmpty, IcSearchMatchPositions, IcSizes, IcValueEventDetail, IcWeekDays } from "./utils/types";
import { IcActivationTypes, IcMenuOption } from "@ukic/web-components/dist/types/utils/types";
import { IcMenuChangeEventDetail, IcMenuOptionIdEventDetail, IcOptionSelectEventDetail, IcSearchBarSearchModes } from "@ukic/web-components/dist/types/components";
import { IcThemeForeground } from "@ukic/web-components/dist/types/interface";
export { IcDataTableColumnObject, IcDataTableDensityOptions, IcDataTableSortOrderOptions } from "./components/ic-data-table/ic-data-table.types";
export { IcPaginationAlignmentOptions, IcPaginationControlTypes, IcPaginationTypes } from "./components/ic-pagination/ic-pagination.types";
export { IcDateFormat, IcInformationStatusOrEmpty, IcSearchMatchPositions, IcSizes, IcValueEventDetail, IcWeekDays } from "./utils/types";
export { IcActivationTypes, IcMenuOption } from "@ukic/web-components/dist/types/utils/types";
export { IcMenuChangeEventDetail, IcMenuOptionIdEventDetail, IcOptionSelectEventDetail, IcSearchBarSearchModes } from "@ukic/web-components/dist/types/components";
export { IcThemeForeground } from "@ukic/web-components/dist/types/interface";
export namespace Components {
    interface IcDataTable {
        /**
          * The title for the table only visible to screen readers.
         */
        "caption": string;
        /**
          * The column headers for the table.
         */
        "columns": IcDataTableColumnObject[];
        /**
          * The row content for the table.
         */
        "data": { [key: string]: any }[];
        /**
          * Set the density of the table including font and padding.
         */
        "density"?: IcDataTableDensityOptions;
        /**
          * Applies a border to the table container.
         */
        "embedded"?: boolean;
        /**
          * If `true`, column headers will not be visible.
         */
        "hideColumnHeaders"?: boolean;
        /**
          * Sets the props for the pagination bar.
         */
        "paginationOptions"?: {
    itemsPerPage?: { label: string; value: string }[];
    type?: IcPaginationTypes;
    control?: IcPaginationControlTypes;
    itemsPerPageControl?: boolean;
    goToPageControl?: boolean;
    alignment?: IcPaginationAlignmentOptions;
  };
        /**
          * If `true`, adds a pagination bar to the bottom of the table.
         */
        "showPagination"?: boolean;
        /**
          * Sets the order columns will be sorted in and allows for 'default' sorts to be added.
         */
        "sortOptions"?: {
    sortOrders: IcDataTableSortOrderOptions[];
    defaultColumn?: string;
  };
        /**
          * If `true`, allows table columns to be sorted using applied sort buttons.
         */
        "sortable"?: boolean;
        /**
          * If `true`, column headers will remain at the top of the table when scrolling vertically.
         */
        "stickyColumnHeaders"?: boolean;
        /**
          * If `true`, row headers will remain to the left when scrolling horizontally.
         */
        "stickyRowHeaders"?: boolean;
    }
    interface IcDateInput {
        /**
          * The format in which the date will be displayed.
         */
        "dateFormat"?: IcDateFormat;
        /**
          * The days of the week to disable.
         */
        "disableDays"?: IcWeekDays[];
        /**
          * The text to display as the validation message when `disableDays` is set and a disabled date is entered.
         */
        "disableDaysMessage"?: string;
        /**
          * If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.
         */
        "disableFuture"?: boolean;
        /**
          * The text to display as the validation message when `disableFuture` is true and a date in the future is entered.
         */
        "disableFutureMessage"?: string;
        /**
          * If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.
         */
        "disablePast"?: boolean;
        /**
          * The text to display as the validation message when `disablePast` is true and a date in the past is entered.
         */
        "disablePastMessage"?: string;
        /**
          * If `true`, the disabled state will be set.
         */
        "disabled"?: boolean;
        /**
          * Returns the value as a Date object
          * @returns Date
         */
        "getDate": () => Promise<Date>;
        /**
          * The helper text that will be displayed for additional field guidance. This will default to the text "Use format" along with the `dateFormat` value.
         */
        "helperText"?: string;
        /**
          * The ID for the input.
         */
        "inputId"?: string;
        /**
          * The label for the date input.
         */
        "label": string;
        /**
          * The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disableFuture` is set to `true`.
         */
        "max"?: string | Date;
        /**
          * The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disablePast` is set to `true`.
         */
        "min"?: string | Date;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true`, the input will require a value.
         */
        "required"?: boolean;
        "setCalendarFocus": () => Promise<void>;
        "setDisableDays": (days: IcWeekDays[]) => Promise<void>;
        "showCalendarButton"?: boolean;
        /**
          * If `true`, a button which clears the date input when clicked will be displayed.
         */
        "showClearButton"?: boolean;
        /**
          * The size of the date input to be displayed.
         */
        "size"?: IcSizes;
        /**
          * The validation status - e.g. 'error' | 'warning' | 'success'. This will override the built-in date validation.
         */
        "validationStatus"?: IcInformationStatusOrEmpty;
        /**
          * The text to display as the validation message. This will override the built-in date validation.
         */
        "validationText"?: string;
        /**
          * The value of the date input. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.
         */
        "value"?: string | Date | null | undefined;
    }
    interface IcMenuWithMulti {
        /**
          * Determines whether options manually set as values (by pressing 'Enter') when they receive focus using keyboard navigation.
         */
        "activationType"?: IcActivationTypes;
        /**
          * The reference to an anchor element the menu will position itself from when rendered.
         */
        "anchorEl": HTMLElement;
        "autoFocusOnSelected": boolean;
        /**
          * If `true`, the menu will close when an option is selected.
         */
        "closeOnSelect": boolean;
        /**
          * If `true`, the menu will fill the width of the container.
         */
        "fullWidth": boolean;
        "handleClickOpen": () => Promise<void>;
        /**
          * Used alongside activationType If menu is opened via keyboard navigation (i.e. Enter, ArrowUp or ArrowDown), emit optionSelect custom event.
          * @param event - keyboard event
         */
        "handleKeyboardOpen": (event: KeyboardEvent) => Promise<void>;
        "handleSetFirstOption": () => Promise<void>;
        "initPopperJs": (anchor: HTMLElement) => Promise<void>;
        /**
          * The reference to the input element.
         */
        "inputEl": HTMLElement;
        /**
          * The label for the input element.
         */
        "inputLabel": string;
        /**
          * The custom name for the label field for IcMenuOption.
         */
        "labelField": string;
        /**
          * The ID of the menu.
         */
        "menuId": string;
        /**
          * If `true`, the menu will be displayed open.
         */
        "open": boolean;
        /**
          * The possible menu selection options.
         */
        "options": IcMenuOption[];
        "parentEl"?: HTMLElement;
        /**
          * Specify the mode search bar uses to search. `navigation` allows for quick lookups of a set of values, `query` allows for more general searches.
         */
        "searchMode"?: IcSearchBarSearchModes;
        "selectOnEnter"?: boolean;
        /**
          * The size of the menu.
         */
        "size"?: IcSizes;
        /**
          * @deprecated This prop should not be used anymore. Set prop `size` to "small" instead.
         */
        "small"?: boolean;
        /**
          * The value of the currently selected option - or array of values (if multiple options allowed).
         */
        "value": string | string[];
        /**
          * The custom name for the value field for IcMenuOption.
         */
        "valueField": string;
    }
    interface IcPaginationBar {
        /**
          * Sets the alignment of the items in the pagination bar.
         */
        "alignment"?: IcPaginationAlignmentOptions;
        /**
          * Sets the styling for the items in the pagination bar.
         */
        "appearance"?: IcThemeForeground;
        /**
          * The label which will be used in place of 'items' if paginationType is data. Should be capitalised.
         */
        "itemLabel"?: string;
        /**
          * The options which will be displayed for 'items per page' select input. Set a maximum of 4 options including a required 'All' option with value equal to total number of items.
         */
        "itemsPerPageOptions"?: {
    label: string;
    value: string;
  }[];
        /**
          * The label which will be used in place of 'Page' if paginationType is page. Should be capitalised.
         */
        "pageLabel"?: string;
        /**
          * Whether the displayed pagination is simple or complex.
         */
        "paginationControl"?: IcPaginationControlTypes;
        /**
          * Whether total number of items and current item range or total number of pages and current page is displayed.
         */
        "paginationType"?: IcPaginationTypes;
        /**
          * If `true`, the 'go to page' control should be displayed.
         */
        "showGoToPageControl"?: boolean;
        /**
          * If `true`, the number of total items and current item range or number of total pages and current page should be displayed.
         */
        "showItemsPerPage"?: boolean;
        /**
          * If `true`, the select input to control 'items per page' should be displayed.
         */
        "showItemsPerPageControl"?: boolean;
        /**
          * Total number of items to be displayed across all pages.
         */
        "totalItems": number;
    }
    interface IcSelectWithMulti {
        /**
          * **[DEPRECATED]** This prop should not be used anymore.
         */
        "charactersUntilSuggestions"?: number;
        /**
          * The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * If `true`, the built in filtering will be disabled for a searchable variant. For example, if options will already be filtered from external source.
         */
        "disableFilter"?: boolean;
        /**
          * If `true`, the disabled state will be set.
         */
        "disabled"?: boolean;
        /**
          * The text displayed when there are no options in the option list.
         */
        "emptyOptionListText": string;
        /**
          * The <form> element to associate the select with.
         */
        "form"?: string;
        /**
          * The URL that processes the information submitted by the select. It overrides the action attribute of the select's form owner. Does nothing if there is no form owner. This prop should only be used with searchable select and will only be applied if searchable is true.
         */
        "formaction"?: string;
        /**
          * The way the submitted form data is encoded. This prop should only be used with searchable select and will only be applied if searchable is true.
         */
        "formenctype"?: string;
        /**
          * The HTTP method used to submit the form. This prop should only be used with searchable select and will only be applied if searchable is true.
         */
        "formmethod"?: string;
        /**
          * If `true`, the form will not be validated when submitted. This prop should only be used with searchable select and will only be applied if searchable is true.
         */
        "formnovalidate"?: boolean;
        /**
          * The place to display the response from submitting the form. It overrides the target attribute of the select's form owner. This prop should only be used with searchable select and will only be applied if searchable is true.
         */
        "formtarget"?: string;
        /**
          * If `true`, the select element will fill the width of the container. This prop should only be used with searchable select and will only be applied if searchable is true.
         */
        "fullWidth": boolean;
        /**
          * The helper text that will be displayed for additional field guidance.
         */
        "helperText"?: string;
        /**
          * If `true`, the label will be hidden and the required label value will be applied as an aria-label.
         */
        "hideLabel"?: boolean;
        /**
          * If `true`, descriptions of options will be included when filtering options in a searchable select. Only applies to built in filtering.
         */
        "includeDescriptionsInSearch"?: boolean;
        /**
          * If `true`, group titles of grouped options will be included when filtering options in a searchable select. Only applies to built in filtering.
         */
        "includeGroupTitlesInSearch"?: boolean;
        /**
          * The label for the select.
         */
        "label": string;
        /**
          * If `true`, the loading state will be triggered when fetching options asynchronously.
         */
        "loading"?: boolean;
        /**
          * The message displayed when external loading times out.
         */
        "loadingErrorLabel"?: string;
        /**
          * The message displayed whilst the options are being loaded externally.
         */
        "loadingLabel"?: string;
        /**
          * If `true`, multiple options can be selected.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * The possible selection options.
         */
        "options"?: IcMenuOption[];
        /**
          * The placeholder value to be displayed.
         */
        "placeholder"?: string;
        /**
          * If `true`, the readonly state will be set.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the select will require a value.
         */
        "required"?: boolean;
        /**
          * Whether the search string of the searchable select should match the start of or anywhere in the options. Only applies to built in filtering.
         */
        "searchMatchPosition"?: IcSearchMatchPositions;
        /**
          * If `true`, a searchable variant of the select will be displayed which can be typed in to filter options.
         */
        "searchable"?: boolean;
        /**
          * If `true`, the icOptionSelect event will be fired on enter instead of ArrowUp and ArrowDown.
         */
        "selectOnEnter"?: boolean;
        /**
          * Sets focus on the input box.
         */
        "setFocus": () => Promise<void>;
        /**
          * If `true`, a button which clears the select input when clicked will be displayed. The button will always appear on the searchable select.
         */
        "showClearButton"?: boolean;
        /**
          * The size of the select.
         */
        "size"?: IcSizes;
        /**
          * **[DEPRECATED]** This prop should not be used anymore. Set prop `size` to "small" instead.
         */
        "small"?: boolean;
        /**
          * If using external filtering, set a timeout for when loading takes too long.
         */
        "timeout"?: number;
        /**
          * The validation status - e.g. 'error' | 'warning' | 'success'.
         */
        "validationStatus"?: IcInformationStatusOrEmpty;
        /**
          * The text to display as the validation message.
         */
        "validationText"?: string;
        /**
          * The value of the select, reflected by the value of the currently selected option. For the searchable variant, the value is also reflected by the user input. For the multi-select variant, the value must be an array of option values.
         */
        "value"?: string | string[];
    }
}
export interface IcDateInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcDateInputElement;
}
export interface IcMenuWithMultiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcMenuWithMultiElement;
}
export interface IcPaginationBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcPaginationBarElement;
}
export interface IcSelectWithMultiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcSelectWithMultiElement;
}
declare global {
    interface HTMLIcDataTableElement extends Components.IcDataTable, HTMLStencilElement {
    }
    var HTMLIcDataTableElement: {
        prototype: HTMLIcDataTableElement;
        new (): HTMLIcDataTableElement;
    };
    interface HTMLIcDateInputElementEventMap {
        "calendarButtonClicked": { value: Date };
        "icBlur": { value: Date };
        "icChange": { value: Date };
        "icFocus": { value: Date };
    }
    interface HTMLIcDateInputElement extends Components.IcDateInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIcDateInputElementEventMap>(type: K, listener: (this: HTMLIcDateInputElement, ev: IcDateInputCustomEvent<HTMLIcDateInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIcDateInputElementEventMap>(type: K, listener: (this: HTMLIcDateInputElement, ev: IcDateInputCustomEvent<HTMLIcDateInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIcDateInputElement: {
        prototype: HTMLIcDateInputElement;
        new (): HTMLIcDateInputElement;
    };
    interface HTMLIcMenuWithMultiElementEventMap {
        "menuKeyPress": { isNavKey: boolean; key: string };
        "menuOptionId": IcMenuOptionIdEventDetail;
        "menuOptionSelect": IcOptionSelectEventDetail;
        "menuOptionSelectAll": { select: boolean };
        "menuStateChange": IcMenuChangeEventDetail;
        "retryButtonClicked": IcValueEventDetail;
        "timeoutBlur": { ev: FocusEvent };
        "ungroupedOptionsSet": { options: IcMenuOption[] };
    }
    interface HTMLIcMenuWithMultiElement extends Components.IcMenuWithMulti, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIcMenuWithMultiElementEventMap>(type: K, listener: (this: HTMLIcMenuWithMultiElement, ev: IcMenuWithMultiCustomEvent<HTMLIcMenuWithMultiElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIcMenuWithMultiElementEventMap>(type: K, listener: (this: HTMLIcMenuWithMultiElement, ev: IcMenuWithMultiCustomEvent<HTMLIcMenuWithMultiElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIcMenuWithMultiElement: {
        prototype: HTMLIcMenuWithMultiElement;
        new (): HTMLIcMenuWithMultiElement;
    };
    interface HTMLIcPaginationBarElementEventMap {
        "icPageChange": { value: number };
        "icItemsPerPageChange": { value: number };
    }
    interface HTMLIcPaginationBarElement extends Components.IcPaginationBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIcPaginationBarElementEventMap>(type: K, listener: (this: HTMLIcPaginationBarElement, ev: IcPaginationBarCustomEvent<HTMLIcPaginationBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIcPaginationBarElementEventMap>(type: K, listener: (this: HTMLIcPaginationBarElement, ev: IcPaginationBarCustomEvent<HTMLIcPaginationBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIcPaginationBarElement: {
        prototype: HTMLIcPaginationBarElement;
        new (): HTMLIcPaginationBarElement;
    };
    interface HTMLIcSelectWithMultiElementEventMap {
        "icBlur": void;
        "icChange": IcValueEventDetail;
        "icClear": void;
        "icFocus": void;
        "icInput": IcValueEventDetail;
        "icOptionSelect": IcOptionSelectEventDetail;
        "icOptionDeselect": IcOptionSelectEventDetail;
        "icRetryLoad": IcValueEventDetail;
    }
    interface HTMLIcSelectWithMultiElement extends Components.IcSelectWithMulti, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIcSelectWithMultiElementEventMap>(type: K, listener: (this: HTMLIcSelectWithMultiElement, ev: IcSelectWithMultiCustomEvent<HTMLIcSelectWithMultiElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIcSelectWithMultiElementEventMap>(type: K, listener: (this: HTMLIcSelectWithMultiElement, ev: IcSelectWithMultiCustomEvent<HTMLIcSelectWithMultiElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIcSelectWithMultiElement: {
        prototype: HTMLIcSelectWithMultiElement;
        new (): HTMLIcSelectWithMultiElement;
    };
    interface HTMLElementTagNameMap {
        "ic-data-table": HTMLIcDataTableElement;
        "ic-date-input": HTMLIcDateInputElement;
        "ic-menu-with-multi": HTMLIcMenuWithMultiElement;
        "ic-pagination-bar": HTMLIcPaginationBarElement;
        "ic-select-with-multi": HTMLIcSelectWithMultiElement;
    }
}
declare namespace LocalJSX {
    interface IcDataTable {
        /**
          * The title for the table only visible to screen readers.
         */
        "caption": string;
        /**
          * The column headers for the table.
         */
        "columns": IcDataTableColumnObject[];
        /**
          * The row content for the table.
         */
        "data"?: { [key: string]: any }[];
        /**
          * Set the density of the table including font and padding.
         */
        "density"?: IcDataTableDensityOptions;
        /**
          * Applies a border to the table container.
         */
        "embedded"?: boolean;
        /**
          * If `true`, column headers will not be visible.
         */
        "hideColumnHeaders"?: boolean;
        /**
          * Sets the props for the pagination bar.
         */
        "paginationOptions"?: {
    itemsPerPage?: { label: string; value: string }[];
    type?: IcPaginationTypes;
    control?: IcPaginationControlTypes;
    itemsPerPageControl?: boolean;
    goToPageControl?: boolean;
    alignment?: IcPaginationAlignmentOptions;
  };
        /**
          * If `true`, adds a pagination bar to the bottom of the table.
         */
        "showPagination"?: boolean;
        /**
          * Sets the order columns will be sorted in and allows for 'default' sorts to be added.
         */
        "sortOptions"?: {
    sortOrders: IcDataTableSortOrderOptions[];
    defaultColumn?: string;
  };
        /**
          * If `true`, allows table columns to be sorted using applied sort buttons.
         */
        "sortable"?: boolean;
        /**
          * If `true`, column headers will remain at the top of the table when scrolling vertically.
         */
        "stickyColumnHeaders"?: boolean;
        /**
          * If `true`, row headers will remain to the left when scrolling horizontally.
         */
        "stickyRowHeaders"?: boolean;
    }
    interface IcDateInput {
        /**
          * The format in which the date will be displayed.
         */
        "dateFormat"?: IcDateFormat;
        /**
          * The days of the week to disable.
         */
        "disableDays"?: IcWeekDays[];
        /**
          * The text to display as the validation message when `disableDays` is set and a disabled date is entered.
         */
        "disableDaysMessage"?: string;
        /**
          * If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.
         */
        "disableFuture"?: boolean;
        /**
          * The text to display as the validation message when `disableFuture` is true and a date in the future is entered.
         */
        "disableFutureMessage"?: string;
        /**
          * If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.
         */
        "disablePast"?: boolean;
        /**
          * The text to display as the validation message when `disablePast` is true and a date in the past is entered.
         */
        "disablePastMessage"?: string;
        /**
          * If `true`, the disabled state will be set.
         */
        "disabled"?: boolean;
        /**
          * The helper text that will be displayed for additional field guidance. This will default to the text "Use format" along with the `dateFormat` value.
         */
        "helperText"?: string;
        /**
          * The ID for the input.
         */
        "inputId"?: string;
        /**
          * The label for the date input.
         */
        "label": string;
        /**
          * The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disableFuture` is set to `true`.
         */
        "max"?: string | Date;
        /**
          * The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object. The value of this prop is ignored if `disablePast` is set to `true`.
         */
        "min"?: string | Date;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        "onCalendarButtonClicked"?: (event: IcDateInputCustomEvent<{ value: Date }>) => void;
        /**
          * Emitted when the input loses focus.
         */
        "onIcBlur"?: (event: IcDateInputCustomEvent<{ value: Date }>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onIcChange"?: (event: IcDateInputCustomEvent<{ value: Date }>) => void;
        /**
          * Emitted when the input gains focus.
         */
        "onIcFocus"?: (event: IcDateInputCustomEvent<{ value: Date }>) => void;
        /**
          * If `true`, the input will require a value.
         */
        "required"?: boolean;
        "showCalendarButton"?: boolean;
        /**
          * If `true`, a button which clears the date input when clicked will be displayed.
         */
        "showClearButton"?: boolean;
        /**
          * The size of the date input to be displayed.
         */
        "size"?: IcSizes;
        /**
          * The validation status - e.g. 'error' | 'warning' | 'success'. This will override the built-in date validation.
         */
        "validationStatus"?: IcInformationStatusOrEmpty;
        /**
          * The text to display as the validation message. This will override the built-in date validation.
         */
        "validationText"?: string;
        /**
          * The value of the date input. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.
         */
        "value"?: string | Date | null | undefined;
    }
    interface IcMenuWithMulti {
        /**
          * Determines whether options manually set as values (by pressing 'Enter') when they receive focus using keyboard navigation.
         */
        "activationType"?: IcActivationTypes;
        /**
          * The reference to an anchor element the menu will position itself from when rendered.
         */
        "anchorEl": HTMLElement;
        "autoFocusOnSelected"?: boolean;
        /**
          * If `true`, the menu will close when an option is selected.
         */
        "closeOnSelect"?: boolean;
        /**
          * If `true`, the menu will fill the width of the container.
         */
        "fullWidth"?: boolean;
        /**
          * The reference to the input element.
         */
        "inputEl": HTMLElement;
        /**
          * The label for the input element.
         */
        "inputLabel": string;
        /**
          * The custom name for the label field for IcMenuOption.
         */
        "labelField"?: string;
        /**
          * The ID of the menu.
         */
        "menuId": string;
        "onMenuKeyPress"?: (event: IcMenuWithMultiCustomEvent<{ isNavKey: boolean; key: string }>) => void;
        "onMenuOptionId"?: (event: IcMenuWithMultiCustomEvent<IcMenuOptionIdEventDetail>) => void;
        "onMenuOptionSelect"?: (event: IcMenuWithMultiCustomEvent<IcOptionSelectEventDetail>) => void;
        "onMenuOptionSelectAll"?: (event: IcMenuWithMultiCustomEvent<{ select: boolean }>) => void;
        "onMenuStateChange"?: (event: IcMenuWithMultiCustomEvent<IcMenuChangeEventDetail>) => void;
        "onRetryButtonClicked"?: (event: IcMenuWithMultiCustomEvent<IcValueEventDetail>) => void;
        "onTimeoutBlur"?: (event: IcMenuWithMultiCustomEvent<{ ev: FocusEvent }>) => void;
        "onUngroupedOptionsSet"?: (event: IcMenuWithMultiCustomEvent<{ options: IcMenuOption[] }>) => void;
        /**
          * If `true`, the menu will be displayed open.
         */
        "open": boolean;
        /**
          * The possible menu selection options.
         */
        "options": IcMenuOption[];
        "parentEl"?: HTMLElement;
        /**
          * Specify the mode search bar uses to search. `navigation` allows for quick lookups of a set of values, `query` allows for more general searches.
         */
        "searchMode"?: IcSearchBarSearchModes;
        "selectOnEnter"?: boolean;
        /**
          * The size of the menu.
         */
        "size"?: IcSizes;
        /**
          * @deprecated This prop should not be used anymore. Set prop `size` to "small" instead.
         */
        "small"?: boolean;
        /**
          * The value of the currently selected option - or array of values (if multiple options allowed).
         */
        "value": string | string[];
        /**
          * The custom name for the value field for IcMenuOption.
         */
        "valueField"?: string;
    }
    interface IcPaginationBar {
        /**
          * Sets the alignment of the items in the pagination bar.
         */
        "alignment"?: IcPaginationAlignmentOptions;
        /**
          * Sets the styling for the items in the pagination bar.
         */
        "appearance"?: IcThemeForeground;
        /**
          * The label which will be used in place of 'items' if paginationType is data. Should be capitalised.
         */
        "itemLabel"?: string;
        /**
          * The options which will be displayed for 'items per page' select input. Set a maximum of 4 options including a required 'All' option with value equal to total number of items.
         */
        "itemsPerPageOptions"?: {
    label: string;
    value: string;
  }[];
        /**
          * Emitted when the items per page option is changed.
         */
        "onIcItemsPerPageChange"?: (event: IcPaginationBarCustomEvent<{ value: number }>) => void;
        /**
          * Emitted when a page is navigated to via the 'go to' input.
         */
        "onIcPageChange"?: (event: IcPaginationBarCustomEvent<{ value: number }>) => void;
        /**
          * The label which will be used in place of 'Page' if paginationType is page. Should be capitalised.
         */
        "pageLabel"?: string;
        /**
          * Whether the displayed pagination is simple or complex.
         */
        "paginationControl"?: IcPaginationControlTypes;
        /**
          * Whether total number of items and current item range or total number of pages and current page is displayed.
         */
        "paginationType"?: IcPaginationTypes;
        /**
          * If `true`, the 'go to page' control should be displayed.
         */
        "showGoToPageControl"?: boolean;
        /**
          * If `true`, the number of total items and current item range or number of total pages and current page should be displayed.
         */
        "showItemsPerPage"?: boolean;
        /**
          * If `true`, the select input to control 'items per page' should be displayed.
         */
        "showItemsPerPageControl"?: boolean;
        /**
          * Total number of items to be displayed across all pages.
         */
        "totalItems": number;
    }
    interface IcSelectWithMulti {
        /**
          * **[DEPRECATED]** This prop should not be used anymore.
         */
        "charactersUntilSuggestions"?: number;
        /**
          * The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * If `true`, the built in filtering will be disabled for a searchable variant. For example, if options will already be filtered from external source.
         */
        "disableFilter"?: boolean;
        /**
          * If `true`, the disabled state will be set.
         */
        "disabled"?: boolean;
        /**
          * The text displayed when there are no options in the option list.
         */
        "emptyOptionListText"?: string;
        /**
          * The <form> element to associate the select with.
         */
        "form"?: string;
        /**
          * The URL that processes the information submitted by the select. It overrides the action attribute of the select's form owner. Does nothing if there is no form owner. This prop should only be used with searchable select and will only be applied if searchable is true.
         */
        "formaction"?: string;
        /**
          * The way the submitted form data is encoded. This prop should only be used with searchable select and will only be applied if searchable is true.
         */
        "formenctype"?: string;
        /**
          * The HTTP method used to submit the form. This prop should only be used with searchable select and will only be applied if searchable is true.
         */
        "formmethod"?: string;
        /**
          * If `true`, the form will not be validated when submitted. This prop should only be used with searchable select and will only be applied if searchable is true.
         */
        "formnovalidate"?: boolean;
        /**
          * The place to display the response from submitting the form. It overrides the target attribute of the select's form owner. This prop should only be used with searchable select and will only be applied if searchable is true.
         */
        "formtarget"?: string;
        /**
          * If `true`, the select element will fill the width of the container. This prop should only be used with searchable select and will only be applied if searchable is true.
         */
        "fullWidth"?: boolean;
        /**
          * The helper text that will be displayed for additional field guidance.
         */
        "helperText"?: string;
        /**
          * If `true`, the label will be hidden and the required label value will be applied as an aria-label.
         */
        "hideLabel"?: boolean;
        /**
          * If `true`, descriptions of options will be included when filtering options in a searchable select. Only applies to built in filtering.
         */
        "includeDescriptionsInSearch"?: boolean;
        /**
          * If `true`, group titles of grouped options will be included when filtering options in a searchable select. Only applies to built in filtering.
         */
        "includeGroupTitlesInSearch"?: boolean;
        /**
          * The label for the select.
         */
        "label": string;
        /**
          * If `true`, the loading state will be triggered when fetching options asynchronously.
         */
        "loading"?: boolean;
        /**
          * The message displayed when external loading times out.
         */
        "loadingErrorLabel"?: string;
        /**
          * The message displayed whilst the options are being loaded externally.
         */
        "loadingLabel"?: string;
        /**
          * If `true`, multiple options can be selected.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the select loses focus.
         */
        "onIcBlur"?: (event: IcSelectWithMultiCustomEvent<void>) => void;
        /**
          * Emitted when the value changes.
         */
        "onIcChange"?: (event: IcSelectWithMultiCustomEvent<IcValueEventDetail>) => void;
        /**
          * Emitted when the clear button is clicked.
         */
        "onIcClear"?: (event: IcSelectWithMultiCustomEvent<void>) => void;
        /**
          * Emitted when the select gains focus.
         */
        "onIcFocus"?: (event: IcSelectWithMultiCustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onIcInput"?: (event: IcSelectWithMultiCustomEvent<IcValueEventDetail>) => void;
        /**
          * Emitted when `multiple` is `true` and an option is deselected.
         */
        "onIcOptionDeselect"?: (event: IcSelectWithMultiCustomEvent<IcOptionSelectEventDetail>) => void;
        /**
          * Emitted when an option is selected. Selecting an option will also trigger an `icChange/onIcChange` due to the value being updated.
         */
        "onIcOptionSelect"?: (event: IcSelectWithMultiCustomEvent<IcOptionSelectEventDetail>) => void;
        /**
          * Emitted when the 'retry loading' button is clicked for a searchable variant.
         */
        "onIcRetryLoad"?: (event: IcSelectWithMultiCustomEvent<IcValueEventDetail>) => void;
        /**
          * The possible selection options.
         */
        "options"?: IcMenuOption[];
        /**
          * The placeholder value to be displayed.
         */
        "placeholder"?: string;
        /**
          * If `true`, the readonly state will be set.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the select will require a value.
         */
        "required"?: boolean;
        /**
          * Whether the search string of the searchable select should match the start of or anywhere in the options. Only applies to built in filtering.
         */
        "searchMatchPosition"?: IcSearchMatchPositions;
        /**
          * If `true`, a searchable variant of the select will be displayed which can be typed in to filter options.
         */
        "searchable"?: boolean;
        /**
          * If `true`, the icOptionSelect event will be fired on enter instead of ArrowUp and ArrowDown.
         */
        "selectOnEnter"?: boolean;
        /**
          * If `true`, a button which clears the select input when clicked will be displayed. The button will always appear on the searchable select.
         */
        "showClearButton"?: boolean;
        /**
          * The size of the select.
         */
        "size"?: IcSizes;
        /**
          * **[DEPRECATED]** This prop should not be used anymore. Set prop `size` to "small" instead.
         */
        "small"?: boolean;
        /**
          * If using external filtering, set a timeout for when loading takes too long.
         */
        "timeout"?: number;
        /**
          * The validation status - e.g. 'error' | 'warning' | 'success'.
         */
        "validationStatus"?: IcInformationStatusOrEmpty;
        /**
          * The text to display as the validation message.
         */
        "validationText"?: string;
        /**
          * The value of the select, reflected by the value of the currently selected option. For the searchable variant, the value is also reflected by the user input. For the multi-select variant, the value must be an array of option values.
         */
        "value"?: string | string[];
    }
    interface IntrinsicElements {
        "ic-data-table": IcDataTable;
        "ic-date-input": IcDateInput;
        "ic-menu-with-multi": IcMenuWithMulti;
        "ic-pagination-bar": IcPaginationBar;
        "ic-select-with-multi": IcSelectWithMulti;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ic-data-table": LocalJSX.IcDataTable & JSXBase.HTMLAttributes<HTMLIcDataTableElement>;
            "ic-date-input": LocalJSX.IcDateInput & JSXBase.HTMLAttributes<HTMLIcDateInputElement>;
            "ic-menu-with-multi": LocalJSX.IcMenuWithMulti & JSXBase.HTMLAttributes<HTMLIcMenuWithMultiElement>;
            "ic-pagination-bar": LocalJSX.IcPaginationBar & JSXBase.HTMLAttributes<HTMLIcPaginationBarElement>;
            "ic-select-with-multi": LocalJSX.IcSelectWithMulti & JSXBase.HTMLAttributes<HTMLIcSelectWithMultiElement>;
        }
    }
}
