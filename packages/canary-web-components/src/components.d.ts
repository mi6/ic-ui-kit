/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IcDataTableColumnObject, IcDataTableDensityOptions, IcDataTableSortOrderOptions } from "./components/ic-data-table/ic-data-table.types";
import { IcPaginationAlignmentOptions, IcPaginationControlTypes, IcPaginationTypes } from "./components/ic-pagination/ic-pagination.types";
import { IcThemeForeground } from "@ukic/web-components/dist/types/interface";
export { IcDataTableColumnObject, IcDataTableDensityOptions, IcDataTableSortOrderOptions } from "./components/ic-data-table/ic-data-table.types";
export { IcPaginationAlignmentOptions, IcPaginationControlTypes, IcPaginationTypes } from "./components/ic-pagination/ic-pagination.types";
export { IcThemeForeground } from "@ukic/web-components/dist/types/interface";
export namespace Components {
    interface IcDataTable {
        /**
          * The title for the table only visible to screen readers.
         */
        "caption": string;
        /**
          * The column headers for the table.
         */
        "columns": IcDataTableColumnObject[];
        /**
          * The row content for the table.
         */
        "data": { [key: string]: any }[];
        /**
          * Set the density of the table including font and padding.
         */
        "density"?: IcDataTableDensityOptions;
        /**
          * Applies a border to the table container.
         */
        "embedded"?: boolean;
        /**
          * If `true`, column headers will not be visible.
         */
        "hideColumnHeaders"?: boolean;
        /**
          * Sets the props for the pagination bar.
         */
        "paginationOptions"?: {
    itemsPerPage?: { label: string; value: string }[];
    type?: IcPaginationTypes;
    control?: IcPaginationControlTypes;
    itemsPerPageControl?: boolean;
    goToPageControl?: boolean;
    alignment?: IcPaginationAlignmentOptions;
  };
        /**
          * If `true`, adds a pagination bar to the bottom of the table.
         */
        "showPagination"?: boolean;
        /**
          * Sets the order columns will be sorted in and allows for 'default' sorts to be added.
         */
        "sortOptions"?: {
    sortOrders: IcDataTableSortOrderOptions[];
    defaultColumn?: string;
  };
        /**
          * If `true`, allows table columns to be sorted using applied sort buttons.
         */
        "sortable"?: boolean;
        /**
          * If `true`, column headers will remain at the top of the table when scrolling vertically.
         */
        "stickyColumnHeaders"?: boolean;
        /**
          * If `true`, row headers will remain to the left when scrolling horizontally.
         */
        "stickyRowHeaders"?: boolean;
    }
    interface IcPaginationBar {
        /**
          * Sets the alignment of the items in the pagination bar.
         */
        "alignment"?: IcPaginationAlignmentOptions;
        /**
          * Sets the styling for the items in the pagination bar.
         */
        "appearance"?: IcThemeForeground;
        /**
          * The label which will be used in place of 'items' if paginationType is data. Should be capitalised.
         */
        "itemLabel"?: string;
        /**
          * The options which will be displayed for 'items per page' select input. Set a maximum of 4 options including a required 'All' option with value equal to total number of items.
         */
        "itemsPerPageOptions"?: {
    label: string;
    value: string;
  }[];
        /**
          * The label which will be used in place of 'Page' if paginationType is page. Should be capitalised.
         */
        "pageLabel"?: string;
        /**
          * Whether the displayed pagination is simple or complex.
         */
        "paginationControl"?: IcPaginationControlTypes;
        /**
          * Whether total number of items and current item range or total number of pages and current page is displayed.
         */
        "paginationType"?: IcPaginationTypes;
        /**
          * If `true`, the 'go to page' control should be displayed.
         */
        "showGoToPageControl"?: boolean;
        /**
          * If `true`, the number of total items and current item range or number of total pages and current page should be displayed.
         */
        "showItemsPerPage"?: boolean;
        /**
          * If `true`, the select input to control 'items per page' should be displayed.
         */
        "showItemsPerPageControl"?: boolean;
        /**
          * Total number of items to be displayed across all pages.
         */
        "totalItems": number;
    }
}
export interface IcPaginationBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcPaginationBarElement;
}
declare global {
    interface HTMLIcDataTableElement extends Components.IcDataTable, HTMLStencilElement {
    }
    var HTMLIcDataTableElement: {
        prototype: HTMLIcDataTableElement;
        new (): HTMLIcDataTableElement;
    };
    interface HTMLIcPaginationBarElement extends Components.IcPaginationBar, HTMLStencilElement {
    }
    var HTMLIcPaginationBarElement: {
        prototype: HTMLIcPaginationBarElement;
        new (): HTMLIcPaginationBarElement;
    };
    interface HTMLElementTagNameMap {
        "ic-data-table": HTMLIcDataTableElement;
        "ic-pagination-bar": HTMLIcPaginationBarElement;
    }
}
declare namespace LocalJSX {
    interface IcDataTable {
        /**
          * The title for the table only visible to screen readers.
         */
        "caption": string;
        /**
          * The column headers for the table.
         */
        "columns": IcDataTableColumnObject[];
        /**
          * The row content for the table.
         */
        "data"?: { [key: string]: any }[];
        /**
          * Set the density of the table including font and padding.
         */
        "density"?: IcDataTableDensityOptions;
        /**
          * Applies a border to the table container.
         */
        "embedded"?: boolean;
        /**
          * If `true`, column headers will not be visible.
         */
        "hideColumnHeaders"?: boolean;
        /**
          * Sets the props for the pagination bar.
         */
        "paginationOptions"?: {
    itemsPerPage?: { label: string; value: string }[];
    type?: IcPaginationTypes;
    control?: IcPaginationControlTypes;
    itemsPerPageControl?: boolean;
    goToPageControl?: boolean;
    alignment?: IcPaginationAlignmentOptions;
  };
        /**
          * If `true`, adds a pagination bar to the bottom of the table.
         */
        "showPagination"?: boolean;
        /**
          * Sets the order columns will be sorted in and allows for 'default' sorts to be added.
         */
        "sortOptions"?: {
    sortOrders: IcDataTableSortOrderOptions[];
    defaultColumn?: string;
  };
        /**
          * If `true`, allows table columns to be sorted using applied sort buttons.
         */
        "sortable"?: boolean;
        /**
          * If `true`, column headers will remain at the top of the table when scrolling vertically.
         */
        "stickyColumnHeaders"?: boolean;
        /**
          * If `true`, row headers will remain to the left when scrolling horizontally.
         */
        "stickyRowHeaders"?: boolean;
    }
    interface IcPaginationBar {
        /**
          * Sets the alignment of the items in the pagination bar.
         */
        "alignment"?: IcPaginationAlignmentOptions;
        /**
          * Sets the styling for the items in the pagination bar.
         */
        "appearance"?: IcThemeForeground;
        /**
          * The label which will be used in place of 'items' if paginationType is data. Should be capitalised.
         */
        "itemLabel"?: string;
        /**
          * The options which will be displayed for 'items per page' select input. Set a maximum of 4 options including a required 'All' option with value equal to total number of items.
         */
        "itemsPerPageOptions"?: {
    label: string;
    value: string;
  }[];
        /**
          * Emitted when the items per page option is changed.
         */
        "onIcItemsPerPageChange"?: (event: IcPaginationBarCustomEvent<{ value: number }>) => void;
        /**
          * Emitted when a page is navigated to via the 'go to' input.
         */
        "onIcPageChange"?: (event: IcPaginationBarCustomEvent<{ value: number }>) => void;
        /**
          * The label which will be used in place of 'Page' if paginationType is page. Should be capitalised.
         */
        "pageLabel"?: string;
        /**
          * Whether the displayed pagination is simple or complex.
         */
        "paginationControl"?: IcPaginationControlTypes;
        /**
          * Whether total number of items and current item range or total number of pages and current page is displayed.
         */
        "paginationType"?: IcPaginationTypes;
        /**
          * If `true`, the 'go to page' control should be displayed.
         */
        "showGoToPageControl"?: boolean;
        /**
          * If `true`, the number of total items and current item range or number of total pages and current page should be displayed.
         */
        "showItemsPerPage"?: boolean;
        /**
          * If `true`, the select input to control 'items per page' should be displayed.
         */
        "showItemsPerPageControl"?: boolean;
        /**
          * Total number of items to be displayed across all pages.
         */
        "totalItems": number;
    }
    interface IntrinsicElements {
        "ic-data-table": IcDataTable;
        "ic-pagination-bar": IcPaginationBar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ic-data-table": LocalJSX.IcDataTable & JSXBase.HTMLAttributes<HTMLIcDataTableElement>;
            "ic-pagination-bar": LocalJSX.IcPaginationBar & JSXBase.HTMLAttributes<HTMLIcPaginationBarElement>;
        }
    }
}
